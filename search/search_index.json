{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Island Time","text":"<p>Island Time is a Kotlin Multiplatform library for working with dates and times. Heavily inspired by the java.time library, Island Time provides a powerful API that works across platforms while taking full advantage of the features offered by the Kotlin language.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>A full set of date-time primitives such as <code>Date</code>, <code>Time</code>, <code>DateTime</code>, <code>Instant</code>, and <code>ZonedDateTime</code></li> <li>Time zone database support</li> <li>Date ranges and time intervals, integrating with Kotlin ranges and progressions</li> <li>Read and write strings in ISO formats</li> <li>DSL-based definition of custom parsers</li> <li>Access localized text for names of months, days of the week, time zones, etc.</li> <li>Convenience operators like <code>date.next(MONDAY)</code>, <code>dateTime.startOfWeek</code>, or <code>date.week(WeekSettings.systemDefault())</code></li> <li>Convert to and from platform-specific date-time types</li> <li>Works on JVM, Android, iOS, macOS, tvOS, and watchOS</li> </ul>"},{"location":"#notable-limitations","title":"Notable Limitations","text":"<ul> <li>No custom format strings (must write platform-specific code to do this)</li> <li>No support for JavaScript or non-Apple native platforms</li> <li>Only supports the ISO calendar system</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#supported-platforms","title":"Supported Platforms","text":"<p>As a Kotlin Multiplatform library, Island Time isn't restricted to just the JVM or Android. Currently, the following platforms are supported:</p> <ul> <li>JVM</li> <li>Android</li> <li>iOS ARM64/x64/Simulator ARM64</li> <li>macOS x64/ARM64</li> <li>watchOS ARM64/x64/Simulator ARM64</li> <li>tvOS ARM64/x64/Simulator ARM64</li> </ul>"},{"location":"getting-started/#version-requirements","title":"Version Requirements","text":"Island Time Version Kotlin Version Notes 0.1.x 1.3.6x 0.2.x 1.3.7x 0.3.x/0.4.x 1.4.x Island Time 0.4.0 is built/published with Kotlin 1.4.20. While binary compatible with earlier versions, if you're using HMPP in your project, you'll need to update to at least 1.4.20 due to publishing changes. See the Kotlin 1.4.20 release notes for details. 0.5.x 1.4.3x Island Time 0.5.0 uses the new inline class name mangling introduced in Kotlin 1.4.30, requiring that you use at least that version. 0.6.x 1.5+"},{"location":"getting-started/#jvm","title":"JVM","text":"<p>Java 11 or above is required.</p>"},{"location":"getting-started/#android","title":"Android","text":"<p>Android Gradle Plugin 7.4.0 or above and a minimum compile SDK of API 21 are required.</p>"},{"location":"getting-started/#gradle-setup","title":"Gradle Setup","text":""},{"location":"getting-started/#common","title":"Common","text":"<p>Add the following dependency to your project's Gradle script:</p> KotlinGroovy <pre><code>dependencies {\n    implementation(\"io.islandtime:core:0.6.3\")\n}\n</code></pre> <pre><code>dependencies {\n    implementation \"io.islandtime:core:0.6.3\"\n}\n</code></pre> <p>Extensions are also available for the <code>@Parcelize</code> feature on Android.</p>"},{"location":"getting-started/#android_1","title":"Android","text":"<p>You'll need to turn on core library desugaring if it isn't enabled already.</p> KotlinGroovy <pre><code>android {\n    defaultConfig {\n        // Required when setting minSdkVersion to 20 or lower\n        multiDexEnabled = true\n    }\n\n    compileOptions {\n        // Flag to enable support for the new language APIs\n        isCoreLibraryDesugaringEnabled = true\n        // Sets Java compatibility to Java 11\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n}\n\ndependencies {\n    coreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:2.0.3\")\n}\n</code></pre> <pre><code>android {\n    defaultConfig {\n        // Required when setting minSdkVersion to 20 or lower\n        multiDexEnabled true\n    }\n\n    compileOptions {\n        // Flag to enable support for the new language APIs\n        coreLibraryDesugaringEnabled true\n        // Sets Java compatibility to Java 11\n        sourceCompatibility JavaVersion.VERSION_11\n        targetCompatibility JavaVersion.VERSION_11\n    }\n}\n\ndependencies {\n    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'\n}\n</code></pre>"},{"location":"getting-started/#snapshot-builds","title":"Snapshot builds","text":"<p>Development snapshot builds are available in the Sonatype OSS Snapshot Repository. To use one, you'll need to add that repository to your project's Gradle script:</p> KotlinGroovy <pre><code>repositories {\n    maven(url = \"https://oss.sonatype.org/content/repositories/snapshots/\")\n}\n</code></pre> <pre><code>repositories {\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }\n}\n</code></pre>"},{"location":"advanced/custom-providers/","title":"Custom Providers","text":"<p>By default, Island Time uses platform APIs to access time zone database information and localized text. Each platform and version of that platform exposes different information though, so there are compromises involved and Island Time may not always behave the way you'd like. Using custom providers, you can work around certain edge cases or make use of different data sources.</p>"},{"location":"advanced/custom-providers/#initialization","title":"Initialization","text":"<p>Prior to using Island Time, it may be initialized with custom providers for time zone rules or localized text. The platform default providers will be used for any that aren't specified explicitly. It's only necessary to initialize Island Time if you're using custom providers.</p> <pre><code>IslandTime.initialize {\n    // Override all of the platform default providers with our own\n    timeZoneRulesProvider = MyTimeZoneRulesProvider\n    dateTimeTextProvider = MyDateTimeTextProvider\n    timeZoneTextProvider = MyTimeZoneTextProvider\n}\n</code></pre> <p>Island Time can only be initialized once. Subsequent attempts to initialize it will throw an exception. This is intended to alert you to potentially undesirable behavior as a result of late initialization or attempts to use different providers in different places. In a test environment though, this can sometimes be problematic, so you may explciitly restore Island Time to an unitialized state using the <code>reset()</code> function:</p> <pre><code>IslandTime.reset()\n// It's now safe to initialize Island Time again\n</code></pre>"},{"location":"api/","title":"All modules","text":"<p>/</p>"},{"location":"api/#all-modules","title":"All modules:","text":"Name core parcelize-extensions"},{"location":"api/core/","title":"core","text":"<p>//core</p>"},{"location":"api/core/#core","title":"core","text":"<p>common darwin jvm</p> <p>The core set of date, time, duration, and interval types, supporting the ISO calendar system.</p>"},{"location":"api/core/#packages","title":"Packages","text":"Name Summary io.islandtime Date-time primitives and core concepts, including classes such as <code>Date</code>, <code>Time</code>, <code>Instant</code>, and <code>ZonedDateTime</code>. io.islandtime.base (Experimental) Framework-level interfaces, allowing aspects of date, time, and duration to be abstracted. io.islandtime.calendar Platform-independent calendar properties. io.islandtime.clock The default clock implementation, providing access to the current system time at up to nanosecond precision when available. io.islandtime.darwin Various extensions specific to the Apple platform. io.islandtime.format Formatting of dates, times, durations, and intervals into textual representations. io.islandtime.jvm Various extensions specific to the Java platform. io.islandtime.locale Platform-independent locale. io.islandtime.measures Classes related to the measurement of time, including <code>Duration</code>, <code>Period</code>, and more specific units, such as <code>Hours</code> or <code>Years</code>. io.islandtime.parser Parsing of dates, times, durations, and intervals from textual representations. io.islandtime.ranges Date ranges, time intervals, and the ability to iterate over them and perform various operations. io.islandtime.serialization Serializers for use with Kotlin Serialization. io.islandtime.zone Provides time zone database access."},{"location":"api/core/core/io.islandtime/","title":"io.islandtime","text":"<p>//core/io.islandtime</p>"},{"location":"api/core/core/io.islandtime/#package-level-declarations","title":"Package-level declarations","text":"<p>common darwin jvm</p> <p>Date-time primitives and core concepts, including classes such as <code>Date</code>, <code>Time</code>, <code>Instant</code>, and <code>ZonedDateTime</code>.</p>"},{"location":"api/core/core/io.islandtime/#types","title":"Types","text":"Name Summary Date <p>common</p><code>@Serializable(with = DateIsoSerializer::class)class Date(val year: Int, val month: Month, day: Int) : Comparable&lt;Date&gt; </code>A date in an ambiguous region. DateTime <p>common</p><code>@Serializable(with = DateTimeIsoSerializer::class)class DateTime(val date: Date, val time: Time) : Comparable&lt;DateTime&gt; </code>A date and time of day in an ambiguous region. DateTimeException <p>common</p><code>open class DateTimeException(message: String? = null, cause: Throwable? = null) : Exception</code> DayOfWeek <p>common</p><code>enum DayOfWeek : Enum&lt;DayOfWeek&gt; </code>A day of the week. Instant <p>common</p><code>@Serializable(with = InstantIsoSerializer::class)class Instant : TimePoint&lt;Instant&gt; , Comparable&lt;Instant&gt; </code>An instant in time with nanosecond-precision. IslandTime <p>common</p><code>object IslandTime</code>Global configuration for Island Time. Month <p>common</p><code>enum Month : Enum&lt;Month&gt; </code>A month of the year. OffsetConversionStrategy <p>common</p><code>enum OffsetConversionStrategy : Enum&lt;OffsetConversionStrategy&gt; </code>Strategy to use when converting a local date-time accompanied by a UtcOffset to a date and time that are valid according to the rules of a TimeZone. OffsetDateTime <p>common</p><code>@Serializable(with = OffsetDateTimeIsoSerializer::class)class OffsetDateTime(val dateTime: DateTime, val offset: UtcOffset) : TimePoint&lt;OffsetDateTime&gt; </code>A date and time of day with an offset from UTC. OffsetTime <p>common</p><code>@Serializable(with = OffsetTimeIsoSerializer::class)class OffsetTime(val time: Time, val offset: UtcOffset)</code>A time of day with an offset from UTC. PlatformInstant <p>common</p><code>expect class PlatformInstant</code>A platform-specific representation of an instant in time.<p>darwin jvm</p><p>darwin</p><code>actual typealias PlatformInstant = &lt;Error class: unknown class&gt;</code><p>jvm</p><code>actual typealias PlatformInstant = Instant</code> Time <p>common</p><code>@Serializable(with = TimeIsoSerializer::class)class Time(val hour: Int, val minute: Int, val second: Int = 0, val nanosecond: Int = 0) : Comparable&lt;Time&gt; </code>A time of day in an ambiguous region. TimeZone <p>common</p><code>@Serializable(with = TimeZoneSerializer::class)sealed class TimeZone : Comparable&lt;TimeZone&gt; </code>A time zone. UtcOffset <p>common</p><code>@Serializable(with = UtcOffsetIsoSerializer::class)@JvmInlinevalue class UtcOffset : Comparable&lt;UtcOffset&gt; </code>The time shift between a local time and UTC. Year <p>common</p><code>@Serializable(with = YearIsoSerializer::class)@JvmInlinevalue class Year(val value: Int) : Comparable&lt;Year&gt; </code>A year as defined by ISO-8601. YearMonth <p>common</p><code>@Serializable(with = YearMonthIsoSerializer::class)class YearMonth(val year: Int, val month: Month) : Comparable&lt;YearMonth&gt; </code>A month in a particular year. ZonedDateTime <p>common</p><code>@Serializable(with = ZonedDateTimeIsoSerializer::class)class ZonedDateTime : TimePoint&lt;ZonedDateTime&gt; </code>A date and time of day in a particular region."},{"location":"api/core/core/io.islandtime/#properties","title":"Properties","text":"Name Summary endOfDay <p>common</p><code>val Date.endOfDay: DateTime</code>The DateTime at the last representable instant of the day. Daylight savings transitions are not taken into account, so the returned date-time may not necessarily exist in all time zones. endOfMonth <p>common</p><code>val Date.endOfMonth: Date</code>The date at the end of the month that this date falls in.<p>common</p><code>val DateTime.endOfMonth: DateTime</code><code>val OffsetDateTime.endOfMonth: OffsetDateTime</code><code>val ZonedDateTime.endOfMonth: ZonedDateTime</code>The date-time at the last representable instant of the month that this date-time falls in. endOfWeek <p>common</p><code>val Date.endOfWeek: Date</code>The date at the end of the ISO week that this date falls in.<p>common</p><code>val DateTime.endOfWeek: DateTime</code><code>val OffsetDateTime.endOfWeek: OffsetDateTime</code><code>val ZonedDateTime.endOfWeek: ZonedDateTime</code>The date-time at the last representable instant of the ISO week that this date-time falls in. endOfYear <p>common</p><code>val Date.endOfYear: Date</code>The date at the end of the year that this date falls in.<p>common</p><code>val DateTime.endOfYear: DateTime</code><code>val OffsetDateTime.endOfYear: OffsetDateTime</code><code>val ZonedDateTime.endOfYear: ZonedDateTime</code>The date-time at the last representable instant of the year that this date-time falls in. isInLeapDay <p>common</p><code>val DateTime.isInLeapDay: Boolean</code><code>val OffsetDateTime.isInLeapDay: Boolean</code><code>val ZonedDateTime.isInLeapDay: Boolean</code>Checks if this date-time falls within February 29. isInLeapYear <p>common</p><code>val Date.isInLeapYear: Boolean</code>Checks if this date falls within a leap year.<p>common</p><code>val DateTime.isInLeapYear: Boolean</code><code>val OffsetDateTime.isInLeapYear: Boolean</code><code>val ZonedDateTime.isInLeapYear: Boolean</code>Checks if this date-time falls within a leap year. isLeapDay <p>common</p><code>val Date.isLeapDay: Boolean</code>Checks if this date is February 29. lengthOfMonth <p>common</p><code>val Date.lengthOfMonth: Days</code>The length of this date's month in days.<p>common</p><code>val DateTime.lengthOfMonth: Days</code><code>val OffsetDateTime.lengthOfMonth: Days</code><code>val ZonedDateTime.lengthOfMonth: Days</code>The length of this date-time's month in days. lengthOfWeekBasedYear <p>common</p><code>val Date.lengthOfWeekBasedYear: Weeks</code>The length of the ISO week-based year that this date falls in, either 52 or 53 weeks.<p>common</p><code>val DateTime.lengthOfWeekBasedYear: Weeks</code><code>val OffsetDateTime.lengthOfWeekBasedYear: Weeks</code><code>val ZonedDateTime.lengthOfWeekBasedYear: Weeks</code>The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks. lengthOfYear <p>common</p><code>val Date.lengthOfYear: Days</code>The length of this date's year in days.<p>common</p><code>val DateTime.lengthOfYear: Days</code><code>val OffsetDateTime.lengthOfYear: Days</code><code>val ZonedDateTime.lengthOfYear: Days</code>The length of this date-time's year in days. startOfDay <p>common</p><code>val Date.startOfDay: DateTime</code>The DateTime at the start of the day. Daylight savings transitions are not taken into account, so the returned date-time may not necessarily exist in all time zones. startOfMonth <p>common</p><code>val Date.startOfMonth: Date</code>The date at the start of the month that this date falls in.<p>common</p><code>val DateTime.startOfMonth: DateTime</code><code>val OffsetDateTime.startOfMonth: OffsetDateTime</code><code>val ZonedDateTime.startOfMonth: ZonedDateTime</code>The date-time at the first instant of the month that this date-time falls in. startOfWeek <p>common</p><code>val Date.startOfWeek: Date</code>The date at the start of the ISO week that this date falls in.<p>common</p><code>val DateTime.startOfWeek: DateTime</code><code>val OffsetDateTime.startOfWeek: OffsetDateTime</code><code>val ZonedDateTime.startOfWeek: ZonedDateTime</code>The date-time at the first instant of the ISO week that this date-time falls in. startOfYear <p>common</p><code>val Date.startOfYear: Date</code>The date at the start of the year that this date falls in.<p>common</p><code>val DateTime.startOfYear: DateTime</code><code>val OffsetDateTime.startOfYear: OffsetDateTime</code><code>val ZonedDateTime.startOfYear: ZonedDateTime</code>The date-time at the first instant of the year that this date-time falls in. week <p>common</p><code>val Date.week: DateRange</code>The range defining the ISO week that this date falls within.<p>common</p><code>val DateTime.week: DateTimeInterval</code><code>val OffsetDateTime.week: OffsetDateTimeInterval</code><code>val ZonedDateTime.week: ZonedDateTimeInterval</code>The interval defining the ISO week that this date-time falls within. weekBasedYear <p>common</p><code>val Date.weekBasedYear: Int</code><code>val DateTime.weekBasedYear: Int</code><code>val OffsetDateTime.weekBasedYear: Int</code><code>val ZonedDateTime.weekBasedYear: Int</code>The week-based year used in the ISO week date system. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>val Date.weekOfMonth: Int</code><code>val DateTime.weekOfMonth: Int</code><code>val OffsetDateTime.weekOfMonth: Int</code><code>val ZonedDateTime.weekOfMonth: Int</code>The week of the month, from 0-6, calculated using the ISO week definition. weekOfWeekBasedYear <p>common</p><code>val Date.weekOfWeekBasedYear: Int</code><code>val DateTime.weekOfWeekBasedYear: Int</code><code>val OffsetDateTime.weekOfWeekBasedYear: Int</code><code>val ZonedDateTime.weekOfWeekBasedYear: Int</code>The week number used in the ISO week date system. weekOfYear <p>common</p><code>val Date.weekOfYear: Int</code><code>val DateTime.weekOfYear: Int</code><code>val OffsetDateTime.weekOfYear: Int</code><code>val ZonedDateTime.weekOfYear: Int</code>The week of the year, calculated using the ISO week definition. If the week number is associated with the preceding year, <code>0</code> will be returned."},{"location":"api/core/core/io.islandtime/#functions","title":"Functions","text":"Name Summary asTimeZone <p>common</p><code>fun UtcOffset.asTimeZone(): TimeZone</code>Converts this UtcOffset into a fixed-offset TimeZone. asUtcOffset <p>common</p><code>fun Hours.asUtcOffset(): UtcOffset</code>Converts a duration of hours into a UtcOffset of the same length.<p>common</p><code>fun Minutes.asUtcOffset(): UtcOffset</code>Converts a duration of minutes into a UtcOffset of the same length.<p>common</p><code>fun Seconds.asUtcOffset(): UtcOffset</code>Converts a duration of seconds into a UtcOffset of the same length. asZonedDateTime <p>common</p><code>fun OffsetDateTime.asZonedDateTime(): ZonedDateTime</code>Converts this OffsetDateTime to an equivalent ZonedDateTime using a fixed-offset time zone. at <p>common</p><code>infix fun Date.at(offsetTime: OffsetTime): OffsetDateTime</code>Combines a local date with a time and UTC offset to create an OffsetDateTime.<p>common</p><code>infix fun Date.at(time: Time): DateTime</code>Combines a Date with a Time to create a DateTime.<p>common</p><code>infix fun DateTime.at(zone: TimeZone): ZonedDateTime</code>Combines a local date and time with a time zone to create a ZonedDateTime.<p>common</p><code>infix fun DateTime.at(offset: UtcOffset): OffsetDateTime</code>Combines a local date and time with a UTC offset to create an OffsetDateTime.<p>common</p><code>infix fun Instant.at(zone: TimeZone): ZonedDateTime</code>Combines an instant with a time zone to create a ZonedDateTime.<p>common</p><code>infix fun Instant.at(offset: UtcOffset): OffsetDateTime</code>Combines an instant with a UTC offset to create an OffsetDateTime.<p>common</p><code>infix fun Time.at(offset: UtcOffset): OffsetTime</code>Combines a local time with a UTC offset to create an OffsetTime.<p>common</p><code>infix fun Year.at(month: Month): YearMonth</code>Combines a year and month to create a YearMonth. atDay <p>common</p><code>fun YearMonth.atDay(day: Int): Date</code>Combines a YearMonth with a day of the month to create a Date. atMonth <p>common</p><code>fun Year.atMonth(number: Int): YearMonth</code>Combines a year and month number to create a YearMonth. atTime <p>common</p><code>fun Date.atTime(hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0): DateTime</code>Combines a Date with a time to create a DateTime. between <p>common</p><code>fun Centuries.Companion.between(start: Date, endExclusive: Date): Centuries</code>Returns the number of whole centuries between two dates.<p>common</p><code>fun Centuries.Companion.between(start: DateTime, endExclusive: DateTime): Centuries</code>Returns the number of whole centuries between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Centuries.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Centuries</code>Returns the number of whole centuries between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Centuries.Companion.between(start: Year, endExclusive: Year): Centuries</code>Returns the number of whole centuries between two years.<p>common</p><code>fun Centuries.Companion.between(start: YearMonth, endExclusive: YearMonth): Centuries</code>Returns the number of whole centuries between two year-months.<p>common</p><code>fun Centuries.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Centuries</code>Returns the number of whole centuries between two date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Days.Companion.between(start: Date, endExclusive: Date): Days</code>Returns the number of days between two dates.<p>common</p><code>fun Days.Companion.between(start: DateTime, endExclusive: DateTime): Days</code>Returns the number whole days between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Days.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Days</code>Returns the number whole days between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Days.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Days</code>Returns the number of whole days between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Decades.Companion.between(start: Date, endExclusive: Date): Decades</code>Returns the number of whole decades between two dates.<p>common</p><code>fun Decades.Companion.between(start: DateTime, endExclusive: DateTime): Decades</code>Returns the number of whole decades between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Decades.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Decades</code>Returns the number of whole decades between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Decades.Companion.between(start: Year, endExclusive: Year): Decades</code>Returns the number of whole decades between two years.<p>common</p><code>fun Decades.Companion.between(start: YearMonth, endExclusive: YearMonth): Decades</code>Returns the number of whole decades between two year-months.<p>common</p><code>fun Decades.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Decades</code>Returns the number of whole decades between two date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Duration.Companion.between(start: DateTime, endExclusive: DateTime): Duration</code>Returns the Duration between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Duration.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Duration</code>Returns the Duration between two time points.<p>common</p><code>fun Hours.Companion.between(start: DateTime, endExclusive: DateTime): Hours</code>Returns the number of whole hours between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Hours.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Hours</code>Returns the number of whole hours between two time points.<p>common</p><code>fun Microseconds.Companion.between(start: DateTime, endExclusive: DateTime): Microseconds</code>Returns the number of whole microseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Microseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Microseconds</code>Returns the number of whole microseconds between two time points.<p>common</p><code>fun Milliseconds.Companion.between(start: DateTime, endExclusive: DateTime): Milliseconds</code>Returns the number of whole milliseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Milliseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Milliseconds</code>Returns the number of whole milliseconds between two time points.<p>common</p><code>fun Minutes.Companion.between(start: DateTime, endExclusive: DateTime): Minutes</code>Returns the number of whole minutes between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Minutes.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Minutes</code>Returns the number of whole minutes between two time points.<p>common</p><code>fun Months.Companion.between(start: Date, endExclusive: Date): Months</code>Returns the number of whole months between two dates.<p>common</p><code>fun Months.Companion.between(start: DateTime, endExclusive: DateTime): Months</code>Returns the number of whole months between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Months.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Months</code>Returns the number of whole months between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Months.Companion.between(start: YearMonth, endExclusive: YearMonth): Months</code>Returns the number of months between two year-months.<p>common</p><code>fun Months.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Months</code>Returns the number of whole months between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Nanoseconds.Companion.between(start: DateTime, endExclusive: DateTime): Nanoseconds</code>Returns the number of nanoseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Nanoseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Nanoseconds</code>Returns the number of nanoseconds between two time points.<p>common</p><code>fun Period.Companion.between(start: Date, endExclusive: Date): Period</code>Returns the Period between two dates.<p>common</p><code>fun Period.Companion.between(start: DateTime, endExclusive: DateTime): Period</code>Returns the Period between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Period.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Period</code>Returns the Period between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Period.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Period</code>Returns the Period between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Seconds.Companion.between(start: DateTime, endExclusive: DateTime): Seconds</code>Returns the number of whole seconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Seconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Seconds</code>Returns the number of whole seconds between two time points.<p>common</p><code>fun Weeks.Companion.between(start: Date, endExclusive: Date): Weeks</code>Returns the number of whole weeks between two dates.<p>common</p><code>fun Weeks.Companion.between(start: DateTime, endExclusive: DateTime): Weeks</code>Returns the number whole weeks between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Weeks.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Weeks</code>Returns the number whole weeks between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Weeks.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Weeks</code>Returns the number of whole weeks between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Years.Companion.between(start: Date, endExclusive: Date): Years</code>Returns the number of whole years between two dates.<p>common</p><code>fun Years.Companion.between(start: DateTime, endExclusive: DateTime): Years</code>Returns the number of whole years between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Years.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Years</code>Returns the number of whole years between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Years.Companion.between(start: Year, endExclusive: Year): Years</code>Returns the number of years between two years.<p>common</p><code>fun Years.Companion.between(start: YearMonth, endExclusive: YearMonth): Years</code>Returns the number of whole years between two year-months.<p>common</p><code>fun Years.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Years</code>Returns the number of whole years between date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time. Date <p>common</p><code>fun Date(year: Int, dayOfYear: Int): Date</code>Creates a Date from a year and day of year endOfDayAt <p>common</p><code>fun Date.endOfDayAt(zone: TimeZone): ZonedDateTime</code>The ZonedDateTime at the last representable instant of the day in zone, taking into account any daylight savings transitions. endOfWeek <p>common</p><code>fun Date.endOfWeek(settings: WeekSettings): Date</code>The date at the end of the week that this date falls in. The first day of the week will be determined by settings. The first day of the week will be determined by the system settings. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.<p>common</p><code>fun Date.endOfWeek(locale: Locale): Date</code>The date at the end of the week that this date falls in. The first day of the week will be determined by locale.<p>common</p><code>fun DateTime.endOfWeek(settings: WeekSettings): DateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.<p>common</p><code>fun DateTime.endOfWeek(locale: Locale): DateTime</code><code>fun OffsetDateTime.endOfWeek(locale: Locale): OffsetDateTime</code><code>fun ZonedDateTime.endOfWeek(locale: Locale): ZonedDateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale.<p>common</p><code>fun OffsetDateTime.endOfWeek(settings: WeekSettings): OffsetDateTime</code><code>fun ZonedDateTime.endOfWeek(settings: WeekSettings): ZonedDateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this. fromWeekDate <p>common</p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int): Date</code>Creates a Date from an ISO week date.<p>common</p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int, settings: WeekSettings): Date</code>Creates a Date from a week date representation using the week definition in settings.<p>common</p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int, locale: Locale): Date</code>Creates a Date from a week date representation using the week definition associated with the provided locale. Instant <p>common</p><code>fun Instant(millisecondsSinceUnixEpoch: Milliseconds): Instant</code>Creates the Instant represented by a number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z.<p>common</p><code>fun Instant(secondsSinceUnixEpoch: Seconds): Instant</code>Creates the Instant represented by a number of seconds relative to the Unix epoch of 1970-01-01T00:00Z.<p>common</p><code>fun Instant(secondsSinceUnixEpoch: Seconds, nanosecondAdjustment: Nanoseconds): Instant</code>Creates the Instant represented by a number of seconds and additional nanoseconds relative to the Unix epoch of 1970-01-01T00:00Z. next <p>common</p><code>fun Date.next(dayOfWeek: DayOfWeek): Date</code>The next date after this one that falls on dayOfWeek.<p>common</p><code>fun DateTime.next(dayOfWeek: DayOfWeek): DateTime</code><code>fun OffsetDateTime.next(dayOfWeek: DayOfWeek): OffsetDateTime</code><code>fun ZonedDateTime.next(dayOfWeek: DayOfWeek): ZonedDateTime</code>The next date-time after this one that falls on dayOfWeek. nextOrSame <p>common</p><code>fun Date.nextOrSame(dayOfWeek: DayOfWeek): Date</code>The next date that falls on dayOfWeek, or this date if it falls on the same day.<p>common</p><code>fun DateTime.nextOrSame(dayOfWeek: DayOfWeek): DateTime</code><code>fun OffsetDateTime.nextOrSame(dayOfWeek: DayOfWeek): OffsetDateTime</code><code>fun ZonedDateTime.nextOrSame(dayOfWeek: DayOfWeek): ZonedDateTime</code>The next date-time that falls on dayOfWeek, or this date-time if it falls on the same day. previous <p>common</p><code>fun Date.previous(dayOfWeek: DayOfWeek): Date</code>The last date before this one that falls on dayOfWeek.<p>common</p><code>fun DateTime.previous(dayOfWeek: DayOfWeek): DateTime</code><code>fun OffsetDateTime.previous(dayOfWeek: DayOfWeek): OffsetDateTime</code><code>fun ZonedDateTime.previous(dayOfWeek: DayOfWeek): ZonedDateTime</code>The last date-time before this one that falls on dayOfWeek. previousOrSame <p>common</p><code>fun Date.previousOrSame(dayOfWeek: DayOfWeek): Date</code>The previous date that falls on dayOfWeek, or this date if it falls on the same day.<p>common</p><code>fun DateTime.previousOrSame(dayOfWeek: DayOfWeek): DateTime</code><code>fun OffsetDateTime.previousOrSame(dayOfWeek: DayOfWeek): OffsetDateTime</code><code>fun ZonedDateTime.previousOrSame(dayOfWeek: DayOfWeek): ZonedDateTime</code>The previous date-time that falls on dayOfWeek, or this date-time if it falls on the same day. roundedDownTo <p>common</p><code>fun DateTime.roundedDownTo(unit: TimeUnit): DateTime</code><code>fun OffsetDateTime.roundedDownTo(unit: TimeUnit): OffsetDateTime</code><code>fun ZonedDateTime.roundedDownTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded down to match the precision of a given unit.<p>common</p><code>fun Instant.roundedDownTo(unit: TimeUnit): Instant</code>Returns this instant, rounded down to match the precision of a given unit.<p>common</p><code>fun OffsetTime.roundedDownTo(unit: TimeUnit): OffsetTime</code><code>fun Time.roundedDownTo(unit: TimeUnit): Time</code>Returns this time, rounded down to match the precision of a given unit. roundedDownToNearest <p>common</p><code>fun DateTime.roundedDownToNearest(increment: Hours): DateTime</code><code>fun OffsetDateTime.roundedDownToNearest(increment: Hours): OffsetDateTime</code><code>fun ZonedDateTime.roundedDownToNearest(increment: Hours): ZonedDateTime</code>Returns this date-time, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Microseconds): DateTime</code><code>fun OffsetDateTime.roundedDownToNearest(increment: Microseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedDownToNearest(increment: Microseconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Milliseconds): DateTime</code><code>fun OffsetDateTime.roundedDownToNearest(increment: Milliseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedDownToNearest(increment: Milliseconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Minutes): DateTime</code><code>fun OffsetDateTime.roundedDownToNearest(increment: Minutes): OffsetDateTime</code><code>fun ZonedDateTime.roundedDownToNearest(increment: Minutes): ZonedDateTime</code>Returns this date-time, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Nanoseconds): DateTime</code><code>fun OffsetDateTime.roundedDownToNearest(increment: Nanoseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedDownToNearest(increment: Nanoseconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Seconds): DateTime</code><code>fun OffsetDateTime.roundedDownToNearest(increment: Seconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedDownToNearest(increment: Seconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest second that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Hours): Instant</code>Returns this instant, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Microseconds): Instant</code>Returns this instant, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Milliseconds): Instant</code>Returns this instant, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Minutes): Instant</code>Returns this instant, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Nanoseconds): Instant</code>Returns this instant, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Seconds): Instant</code>Returns this instant, rounded down to the nearest second that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Hours): OffsetTime</code><code>fun Time.roundedDownToNearest(increment: Hours): Time</code>Returns this time, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Microseconds): OffsetTime</code><code>fun Time.roundedDownToNearest(increment: Microseconds): Time</code>Returns this time, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Milliseconds): OffsetTime</code><code>fun Time.roundedDownToNearest(increment: Milliseconds): Time</code>Returns this time, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Minutes): OffsetTime</code><code>fun Time.roundedDownToNearest(increment: Minutes): Time</code>Returns this time, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Nanoseconds): OffsetTime</code><code>fun Time.roundedDownToNearest(increment: Nanoseconds): Time</code>Returns this time, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Seconds): OffsetTime</code><code>fun Time.roundedDownToNearest(increment: Seconds): Time</code>Returns this time, rounded down to the nearest second that satisfies the increment. roundedTo <p>common</p><code>fun DateTime.roundedTo(unit: TimeUnit): DateTime</code><code>fun OffsetDateTime.roundedTo(unit: TimeUnit): OffsetDateTime</code><code>fun ZonedDateTime.roundedTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up.<p>common</p><code>fun Instant.roundedTo(unit: TimeUnit): Instant</code>Returns this instant, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedTo(unit: TimeUnit): OffsetTime</code><code>fun Time.roundedTo(unit: TimeUnit): Time</code>Returns this time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up. roundedToNearest <p>common</p><code>fun DateTime.roundedToNearest(increment: Hours): DateTime</code><code>fun OffsetDateTime.roundedToNearest(increment: Hours): OffsetDateTime</code><code>fun ZonedDateTime.roundedToNearest(increment: Hours): ZonedDateTime</code>Returns this date-time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Microseconds): DateTime</code><code>fun OffsetDateTime.roundedToNearest(increment: Microseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedToNearest(increment: Microseconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Milliseconds): DateTime</code><code>fun OffsetDateTime.roundedToNearest(increment: Milliseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedToNearest(increment: Milliseconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Minutes): DateTime</code><code>fun OffsetDateTime.roundedToNearest(increment: Minutes): OffsetDateTime</code><code>fun ZonedDateTime.roundedToNearest(increment: Minutes): ZonedDateTime</code>Returns this date-time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Nanoseconds): DateTime</code><code>fun OffsetDateTime.roundedToNearest(increment: Nanoseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedToNearest(increment: Nanoseconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Seconds): DateTime</code><code>fun OffsetDateTime.roundedToNearest(increment: Seconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedToNearest(increment: Seconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Hours): Instant</code>Returns this instant, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Microseconds): Instant</code>Returns this instant, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Milliseconds): Instant</code>Returns this instant, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Minutes): Instant</code>Returns this instant, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Nanoseconds): Instant</code>Returns this instant, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Seconds): Instant</code>Returns this instant, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Hours): OffsetTime</code><code>fun Time.roundedToNearest(increment: Hours): Time</code>Returns this time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Microseconds): OffsetTime</code><code>fun Time.roundedToNearest(increment: Microseconds): Time</code>Returns this time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Milliseconds): OffsetTime</code><code>fun Time.roundedToNearest(increment: Milliseconds): Time</code>Returns this time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Minutes): OffsetTime</code><code>fun Time.roundedToNearest(increment: Minutes): Time</code>Returns this time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Nanoseconds): OffsetTime</code><code>fun Time.roundedToNearest(increment: Nanoseconds): Time</code>Returns this time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Seconds): OffsetTime</code><code>fun Time.roundedToNearest(increment: Seconds): Time</code>Returns this time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up. roundedUpTo <p>common</p><code>fun DateTime.roundedUpTo(unit: TimeUnit): DateTime</code><code>fun OffsetDateTime.roundedUpTo(unit: TimeUnit): OffsetDateTime</code><code>fun ZonedDateTime.roundedUpTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded up to match the precision of a given unit.<p>common</p><code>fun Instant.roundedUpTo(unit: TimeUnit): Instant</code>Returns this instant, rounded up to match the precision of a given unit.<p>common</p><code>fun OffsetTime.roundedUpTo(unit: TimeUnit): OffsetTime</code><code>fun Time.roundedUpTo(unit: TimeUnit): Time</code>Returns this time, rounded up to match the precision of a given unit. roundedUpToNearest <p>common</p><code>fun DateTime.roundedUpToNearest(increment: Hours): DateTime</code><code>fun OffsetDateTime.roundedUpToNearest(increment: Hours): OffsetDateTime</code><code>fun ZonedDateTime.roundedUpToNearest(increment: Hours): ZonedDateTime</code>Returns this date-time, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Microseconds): DateTime</code><code>fun OffsetDateTime.roundedUpToNearest(increment: Microseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedUpToNearest(increment: Microseconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Milliseconds): DateTime</code><code>fun OffsetDateTime.roundedUpToNearest(increment: Milliseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedUpToNearest(increment: Milliseconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Minutes): DateTime</code><code>fun OffsetDateTime.roundedUpToNearest(increment: Minutes): OffsetDateTime</code><code>fun ZonedDateTime.roundedUpToNearest(increment: Minutes): ZonedDateTime</code>Returns this date-time, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Nanoseconds): DateTime</code><code>fun OffsetDateTime.roundedUpToNearest(increment: Nanoseconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedUpToNearest(increment: Nanoseconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Seconds): DateTime</code><code>fun OffsetDateTime.roundedUpToNearest(increment: Seconds): OffsetDateTime</code><code>fun ZonedDateTime.roundedUpToNearest(increment: Seconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest second that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Hours): Instant</code>Returns this instant, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Microseconds): Instant</code>Returns this instant, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Milliseconds): Instant</code>Returns this instant, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Minutes): Instant</code>Returns this instant, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Nanoseconds): Instant</code>Returns this instant, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Seconds): Instant</code>Returns this instant, rounded up to the nearest second that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Hours): OffsetTime</code><code>fun Time.roundedUpToNearest(increment: Hours): Time</code>Returns this time, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Microseconds): OffsetTime</code><code>fun Time.roundedUpToNearest(increment: Microseconds): Time</code>Returns this time, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Milliseconds): OffsetTime</code><code>fun Time.roundedUpToNearest(increment: Milliseconds): Time</code>Returns this time, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Minutes): OffsetTime</code><code>fun Time.roundedUpToNearest(increment: Minutes): Time</code>Returns this time, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Nanoseconds): OffsetTime</code><code>fun Time.roundedUpToNearest(increment: Nanoseconds): Time</code>Returns this time, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Seconds): OffsetTime</code><code>fun Time.roundedUpToNearest(increment: Seconds): Time</code>Returns this time, rounded up to the nearest second that satisfies the increment. startOfDayAt <p>common</p><code>fun Date.startOfDayAt(zone: TimeZone): ZonedDateTime</code>The ZonedDateTime at the start of the day in zone, taking into account any daylight savings transitions. startOfWeek <p>common</p><code>fun Date.startOfWeek(settings: WeekSettings): Date</code>The date at the start of the week that this date falls in. The first day of the week will be determined by settings.<p>common</p><code>fun Date.startOfWeek(locale: Locale): Date</code>The date at the start of the week that this date falls in. The first day of the week will be determined by locale.<p>common</p><code>fun DateTime.startOfWeek(settings: WeekSettings): DateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.<p>common</p><code>fun DateTime.startOfWeek(locale: Locale): DateTime</code><code>fun OffsetDateTime.startOfWeek(locale: Locale): OffsetDateTime</code><code>fun ZonedDateTime.startOfWeek(locale: Locale): ZonedDateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale.<p>common</p><code>fun OffsetDateTime.startOfWeek(settings: WeekSettings): OffsetDateTime</code><code>fun ZonedDateTime.startOfWeek(settings: WeekSettings): ZonedDateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this. TimeZone <p>common</p><code>fun TimeZone(id: String): TimeZone</code>Creates a TimeZone from an identifier. toDate <p>common</p><code>fun String.toDate(): Date</code>Converts a string to a Date.<p>common</p><code>fun String.toDate(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date</code>Converts a string to a Date using a specific parser. toDateAt <p>common</p><code>fun Instant.toDateAt(zone: TimeZone): Date</code>Converts this instant to the corresponding Date in zone.<p>common</p><code>fun Instant.toDateAt(offset: UtcOffset): Date</code>Converts this instant to the corresponding Date at offset. toDateTime <p>common</p><code>fun String.toDateTime(): DateTime</code>Convert a string to a DateTime.<p>common</p><code>fun String.toDateTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime</code>Converts a string to a DateTime using a specific parser. toDateTimeAt <p>common</p><code>fun Instant.toDateTimeAt(zone: TimeZone): DateTime</code>Converts this instant to the corresponding DateTime in zone.<p>common</p><code>fun Instant.toDateTimeAt(offset: UtcOffset): DateTime</code>Converts this instant to the corresponding DateTime at offset. toDayOfWeek <p>common</p><code>fun Int.toDayOfWeek(): DayOfWeek</code>Converts an ISO day of week number to a DayOfWeek.<p>common</p><code>fun Int.toDayOfWeek(settings: WeekSettings): DayOfWeek</code>Converts a day of week number (1-7) to a DayOfWeek using the week definition provided by settings. toInstant <p>common</p><code>fun OffsetDateTime.toInstant(): Instant</code><code>fun ZonedDateTime.toInstant(): Instant</code>Converts this date-time to an Instant representing the same time point.<p>common</p><code>fun String.toInstant(): Instant</code>Converts a string to an Instant.<p>common</p><code>fun String.toInstant(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant</code>Converts a string to an Instant using a specific parser. toInstantAt <p>common</p><code>fun DateTime.toInstantAt(offset: UtcOffset): Instant</code>Converts this date-time to the corresponding Instant at offset. toMonth <p>common</p><code>fun Int.toMonth(): Month</code>Converts an ISO month number, from 1-12, to a Month. toOffsetDateTime <p>common</p><code>fun ZonedDateTime.toOffsetDateTime(): OffsetDateTime</code>Returns the combined date, time, and UTC offset.<p>common</p><code>fun String.toOffsetDateTime(): OffsetDateTime</code>Converts a string to an OffsetDateTime.<p>common</p><code>fun String.toOffsetDateTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime</code>Converts a string to an OffsetDateTime using a specific parser. toOffsetTime <p>common</p><code>fun OffsetDateTime.toOffsetTime(): OffsetTime</code><code>fun ZonedDateTime.toOffsetTime(): OffsetTime</code>Returns the combined time and UTC offset.<p>common</p><code>fun String.toOffsetTime(): OffsetTime</code>Converts a string to an OffsetTime.<p>common</p><code>fun String.toOffsetTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime</code>Converts a string to an OffsetTime using a specific parser. toTime <p>common</p><code>fun String.toTime(): Time</code>Converts a string to a Time.<p>common</p><code>fun String.toTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time</code>Converts a string to a Time using a specific parser. toUtcOffset <p>common</p><code>fun String.toUtcOffset(): UtcOffset</code>Converts a string to a UtcOffset.<p>common</p><code>fun String.toUtcOffset(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset</code>Converts a string to a UtcOffset using a specific parser. toWeekDate <p>common</p><code>inline fun &lt;T&gt; Date.toWeekDate(action: (year: Int, week: Int, day: Int) -&gt; T): T</code>Converts this date to an ISO week date representation.<p>common</p><code>inline fun &lt;T&gt; Date.toWeekDate(settings: WeekSettings, action: (year: Int, week: Int, day: Int) -&gt; T): T</code>Converts this date to a week date representation using the week definition in settings.<p>common</p><code>inline fun &lt;T&gt; Date.toWeekDate(locale: Locale, action: (year: Int, week: Int, day: Int) -&gt; T): T</code>Converts this date to a week date representation using the week definition associated with the provided locale. toYear <p>common</p><code>fun Date.toYear(): Year</code>Returns this date with the precision reduced to the year.<p>common</p><code>fun DateTime.toYear(): Year</code><code>fun OffsetDateTime.toYear(): Year</code><code>fun ZonedDateTime.toYear(): Year</code>Returns this date-time with the precision reduced to the year.<p>common</p><code>fun YearMonth.toYear(): Year</code>Returns this year-month with the precision reduced to the year.<p>common</p><code>fun String.toYear(): Year</code>Converts a string to a Year.<p>common</p><code>fun String.toYear(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year</code>Converts a string to a Year using a specific parser. toYearMonth <p>common</p><code>fun Date.toYearMonth(): YearMonth</code>Returns this date with the precision reduced to the month.<p>common</p><code>fun DateTime.toYearMonth(): YearMonth</code><code>fun OffsetDateTime.toYearMonth(): YearMonth</code><code>fun ZonedDateTime.toYearMonth(): YearMonth</code>Returns this date-time with the precision reduced to the month.<p>common</p><code>fun String.toYearMonth(): YearMonth</code>Converts a string to a YearMonth.<p>common</p><code>fun String.toYearMonth(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth</code>Converts a string to a YearMonth using a specific parser. toZonedDateTime <p>common</p><code>fun String.toZonedDateTime(): ZonedDateTime</code>Converts a string to a ZonedDateTime.<p>common</p><code>fun OffsetDateTime.toZonedDateTime(zone: TimeZone, strategy: OffsetConversionStrategy): ZonedDateTime</code>Converts this OffsetDateTime to a ZonedDateTime using the specified strategy to adjust it to a valid date, time, and offset in zone.<p>common</p><code>fun String.toZonedDateTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime</code>Converts a string to a ZonedDateTime using a specific parser. truncatedTo <p>common</p><code>fun DateTime.truncatedTo(unit: TimeUnit): DateTime</code><code>fun OffsetDateTime.truncatedTo(unit: TimeUnit): OffsetDateTime</code><code>fun ZonedDateTime.truncatedTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded down to match the precision of a given unit.<p>common</p><code>fun Instant.truncatedTo(unit: TimeUnit): Instant</code>Returns this instant, rounded down to match the precision of a given unit.<p>common</p><code>fun OffsetTime.truncatedTo(unit: TimeUnit): OffsetTime</code><code>fun Time.truncatedTo(unit: TimeUnit): Time</code>Returns this time, rounded down to match the precision of a given unit. UtcOffset <p>common</p><code>fun UtcOffset(hours: Hours, minutes: Minutes = 0.minutes, seconds: Seconds = 0.seconds): UtcOffset</code>Creates a UTC offset of hours, minutes, and seconds. Each component must be within its valid range and without any mixed positive and negative values. week <p>common</p><code>fun Date.week(settings: WeekSettings): DateRange</code>The range defining the week that this date falls within. The first day of the week will be determined by the provided settings.<p>common</p><code>fun Date.week(locale: Locale): DateRange</code>The range defining the week that this date falls within. The first day of the week will be the default associated with the provided locale.<p>common</p><code>fun DateTime.week(settings: WeekSettings): DateTimeInterval</code><code>fun OffsetDateTime.week(settings: WeekSettings): OffsetDateTimeInterval</code><code>fun ZonedDateTime.week(settings: WeekSettings): ZonedDateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be determined by the provided settings.<p>common</p><code>fun DateTime.week(locale: Locale): DateTimeInterval</code><code>fun OffsetDateTime.week(locale: Locale): OffsetDateTimeInterval</code><code>fun ZonedDateTime.week(locale: Locale): ZonedDateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be the default associated with the provided locale. weekBasedYear <p>common</p><code>fun Date.weekBasedYear(settings: WeekSettings): Int</code><code>fun DateTime.weekBasedYear(settings: WeekSettings): Int</code><code>fun OffsetDateTime.weekBasedYear(settings: WeekSettings): Int</code><code>fun ZonedDateTime.weekBasedYear(settings: WeekSettings): Int</code>The week-based year, calculated using the week definition in settings. This value differs from the regular ISO year when the week number falls in the preceding or following year.<p>common</p><code>fun Date.weekBasedYear(locale: Locale): Int</code><code>fun DateTime.weekBasedYear(locale: Locale): Int</code><code>fun OffsetDateTime.weekBasedYear(locale: Locale): Int</code><code>fun ZonedDateTime.weekBasedYear(locale: Locale): Int</code>The week-based year, calculated using the week definition associated with the provided locale. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>fun Date.weekOfMonth(settings: WeekSettings): Int</code><code>fun DateTime.weekOfMonth(settings: WeekSettings): Int</code><code>fun OffsetDateTime.weekOfMonth(settings: WeekSettings): Int</code><code>fun ZonedDateTime.weekOfMonth(settings: WeekSettings): Int</code>The week of the month, from 0-6, calculated using the week definition in settings.<p>common</p><code>fun Date.weekOfMonth(locale: Locale): Int</code><code>fun DateTime.weekOfMonth(locale: Locale): Int</code><code>fun OffsetDateTime.weekOfMonth(locale: Locale): Int</code><code>fun ZonedDateTime.weekOfMonth(locale: Locale): Int</code>The week of the month, from 0-6, calculated using the default week definition associated with the provided locale. weekOfWeekBasedYear <p>common</p><code>fun Date.weekOfWeekBasedYear(settings: WeekSettings): Int</code><code>fun DateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code><code>fun OffsetDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code><code>fun ZonedDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code>The week number of the week-based year, calculated using the week definition in settings.<p>common</p><code>fun Date.weekOfWeekBasedYear(locale: Locale): Int</code><code>fun DateTime.weekOfWeekBasedYear(locale: Locale): Int</code><code>fun OffsetDateTime.weekOfWeekBasedYear(locale: Locale): Int</code><code>fun ZonedDateTime.weekOfWeekBasedYear(locale: Locale): Int</code>The week number of the week-based year, calculated using the week definition associated with the provided locale. weekOfYear <p>common</p><code>fun Date.weekOfYear(settings: WeekSettings): Int</code><code>fun DateTime.weekOfYear(settings: WeekSettings): Int</code><code>fun OffsetDateTime.weekOfYear(settings: WeekSettings): Int</code><code>fun ZonedDateTime.weekOfYear(settings: WeekSettings): Int</code>The week of the year, calculated using the week definition in settings. If the week number is associated with the preceding year, <code>0</code> will be returned.<p>common</p><code>fun Date.weekOfYear(locale: Locale): Int</code><code>fun DateTime.weekOfYear(locale: Locale): Int</code><code>fun OffsetDateTime.weekOfYear(locale: Locale): Int</code><code>fun ZonedDateTime.weekOfYear(locale: Locale): Int</code>The week of the year, calculated using the week definition associated with the provided locale. If the week number is associated with the preceding year, <code>0</code> will be returned. ZonedDateTime <p>common</p><code>fun ZonedDateTime(dateTime: DateTime, zone: TimeZone): ZonedDateTime</code><code>fun ZonedDateTime(date: Date, time: Time, zone: TimeZone): ZonedDateTime</code><code>fun ZonedDateTime(year: Int, dayOfYear: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, zone: TimeZone): ZonedDateTime</code><code>fun ZonedDateTime(year: Int, month: Month, day: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, zone: TimeZone): ZonedDateTime</code><code>fun ZonedDateTime(year: Int, monthNumber: Int, day: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, zone: TimeZone): ZonedDateTime</code>Creates a ZonedDateTime from a local date and time."},{"location":"api/core/core/io.islandtime/-date/","title":"Date","text":"<p>//core/io.islandtime/Date</p>"},{"location":"api/core/core/io.islandtime/-date/#date","title":"Date","text":"<p>common</p> <p><code>fun Date(year: Int, dayOfYear: Int): Date</code></p> <p>Creates a Date from a year and day of year</p>"},{"location":"api/core/core/io.islandtime/-date/#parameters","title":"Parameters","text":"<p>common</p> year the year dayOfYear the day of the calendar year"},{"location":"api/core/core/io.islandtime/-date/#throws","title":"Throws","text":"DateTimeException if the year or day of year are invalid"},{"location":"api/core/core/io.islandtime/-instant/","title":"Instant","text":"<p>//core/io.islandtime/Instant</p>"},{"location":"api/core/core/io.islandtime/-instant/#instant","title":"Instant","text":"<p>common</p> <p><code>fun Instant(secondsSinceUnixEpoch: Seconds): Instant</code></p> <p>Creates the Instant represented by a number of seconds relative to the Unix epoch of 1970-01-01T00:00Z.</p> <p>common</p> <p><code>fun Instant(secondsSinceUnixEpoch: Seconds, nanosecondAdjustment: Nanoseconds): Instant</code></p> <p>Creates the Instant represented by a number of seconds and additional nanoseconds relative to the Unix epoch of 1970-01-01T00:00Z.</p> <p>common</p> <p><code>fun Instant(millisecondsSinceUnixEpoch: Milliseconds): Instant</code></p> <p>Creates the Instant represented by a number of milliseconds relative to the Unix epoch of 1970-01-01T00:00Z.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/","title":"TimeZone","text":"<p>//core/io.islandtime/TimeZone</p>"},{"location":"api/core/core/io.islandtime/-time-zone/#timezone","title":"TimeZone","text":"<p>common</p> <p><code>fun TimeZone(id: String): TimeZone</code></p> <p>Creates a TimeZone from an identifier.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/","title":"UtcOffset","text":"<p>//core/io.islandtime/UtcOffset</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/#utcoffset","title":"UtcOffset","text":"<p>common</p> <p><code>fun UtcOffset(hours: Hours, minutes: Minutes = 0.minutes, seconds: Seconds = 0.seconds): UtcOffset</code></p> <p>Creates a UTC offset of hours, minutes, and seconds. Each component must be within its valid range and without any mixed positive and negative values.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/#return","title":"Return","text":"<p>a UtcOffset</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/#parameters","title":"Parameters","text":"<p>common</p> hours hours to offset by, within +/-18 minutes minutes to offset by, within +/-59 seconds seconds to offset by, within +/-59"},{"location":"api/core/core/io.islandtime/-utc-offset/#throws","title":"Throws","text":"DateTimeException if the offset or any of its components are invalid"},{"location":"api/core/core/io.islandtime/-zoned-date-time/","title":"ZonedDateTime","text":"<p>//core/io.islandtime/ZonedDateTime</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/#zoneddatetime","title":"ZonedDateTime","text":"<p>common</p> <p><code>fun ZonedDateTime(year: Int, month: Month, day: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, zone: TimeZone): ZonedDateTime</code></p> <p><code>fun ZonedDateTime(year: Int, monthNumber: Int, day: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, zone: TimeZone): ZonedDateTime</code></p> <p><code>fun ZonedDateTime(year: Int, dayOfYear: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, zone: TimeZone): ZonedDateTime</code></p> <p><code>fun ZonedDateTime(date: Date, time: Time, zone: TimeZone): ZonedDateTime</code></p> <p><code>fun ZonedDateTime(dateTime: DateTime, zone: TimeZone): ZonedDateTime</code></p> <p>Creates a ZonedDateTime from a local date and time.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.</p>"},{"location":"api/core/core/io.islandtime/as-time-zone/","title":"asTimeZone","text":"<p>//core/io.islandtime/asTimeZone</p>"},{"location":"api/core/core/io.islandtime/as-time-zone/#astimezone","title":"asTimeZone","text":"<p>common</p> <p><code>fun UtcOffset.asTimeZone(): TimeZone</code></p> <p>Converts this UtcOffset into a fixed-offset TimeZone.</p>"},{"location":"api/core/core/io.islandtime/as-utc-offset/","title":"asUtcOffset","text":"<p>//core/io.islandtime/asUtcOffset</p>"},{"location":"api/core/core/io.islandtime/as-utc-offset/#asutcoffset","title":"asUtcOffset","text":"<p>common</p> <p><code>fun Hours.asUtcOffset(): UtcOffset</code></p> <p>Converts a duration of hours into a UtcOffset of the same length.</p>"},{"location":"api/core/core/io.islandtime/as-utc-offset/#throws","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>fun Minutes.asUtcOffset(): UtcOffset</code></p> <p>Converts a duration of minutes into a UtcOffset of the same length.</p>"},{"location":"api/core/core/io.islandtime/as-utc-offset/#throws_1","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>fun Seconds.asUtcOffset(): UtcOffset</code></p> <p>Converts a duration of seconds into a UtcOffset of the same length.</p>"},{"location":"api/core/core/io.islandtime/as-utc-offset/#throws_2","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime/as-zoned-date-time/","title":"asZonedDateTime","text":"<p>//core/io.islandtime/asZonedDateTime</p>"},{"location":"api/core/core/io.islandtime/as-zoned-date-time/#aszoneddatetime","title":"asZonedDateTime","text":"<p>common</p> <p><code>fun OffsetDateTime.asZonedDateTime(): ZonedDateTime</code></p> <p>Converts this OffsetDateTime to an equivalent ZonedDateTime using a fixed-offset time zone.</p> <p>This comes with the caveat that a fixed-offset zone lacks knowledge of any region and will not respond to daylight savings time changes. To convert to a region-based zone, use toZonedDateTime instead.</p>"},{"location":"api/core/core/io.islandtime/as-zoned-date-time/#see-also","title":"See also","text":"toZonedDateTime"},{"location":"api/core/core/io.islandtime/at-day/","title":"atDay","text":"<p>//core/io.islandtime/atDay</p>"},{"location":"api/core/core/io.islandtime/at-day/#atday","title":"atDay","text":"<p>common</p> <p><code>fun YearMonth.atDay(day: Int): Date</code></p> <p>Combines a YearMonth with a day of the month to create a Date.</p>"},{"location":"api/core/core/io.islandtime/at-day/#parameters","title":"Parameters","text":"<p>common</p> day the day of the month"},{"location":"api/core/core/io.islandtime/at-month/","title":"atMonth","text":"<p>//core/io.islandtime/atMonth</p>"},{"location":"api/core/core/io.islandtime/at-month/#atmonth","title":"atMonth","text":"<p>common</p> <p><code>fun Year.atMonth(number: Int): YearMonth</code></p> <p>Combines a year and month number to create a YearMonth.</p>"},{"location":"api/core/core/io.islandtime/at-time/","title":"atTime","text":"<p>//core/io.islandtime/atTime</p>"},{"location":"api/core/core/io.islandtime/at-time/#attime","title":"atTime","text":"<p>common</p> <p><code>fun Date.atTime(hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0): DateTime</code></p> <p>Combines a Date with a time to create a DateTime.</p>"},{"location":"api/core/core/io.islandtime/at/","title":"at","text":"<p>//core/io.islandtime/at</p>"},{"location":"api/core/core/io.islandtime/at/#at","title":"at","text":"<p>common</p> <p><code>infix fun Year.at(month: Month): YearMonth</code></p> <p>Combines a year and month to create a YearMonth.</p> <p>common</p> <p><code>infix fun Date.at(time: Time): DateTime</code></p> <p>Combines a Date with a Time to create a DateTime.</p> <p>common</p> <p><code>infix fun DateTime.at(offset: UtcOffset): OffsetDateTime</code></p> <p>Combines a local date and time with a UTC offset to create an OffsetDateTime.</p> <p>common</p> <p><code>infix fun Date.at(offsetTime: OffsetTime): OffsetDateTime</code></p> <p>Combines a local date with a time and UTC offset to create an OffsetDateTime.</p> <p>common</p> <p><code>infix fun Instant.at(offset: UtcOffset): OffsetDateTime</code></p> <p>Combines an instant with a UTC offset to create an OffsetDateTime.</p> <p>common</p> <p><code>infix fun Instant.at(zone: TimeZone): ZonedDateTime</code></p> <p>Combines an instant with a time zone to create a ZonedDateTime.</p> <p>common</p> <p><code>infix fun DateTime.at(zone: TimeZone): ZonedDateTime</code></p> <p>Combines a local date and time with a time zone to create a ZonedDateTime.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.</p> <p>common</p> <p><code>infix fun Time.at(offset: UtcOffset): OffsetTime</code></p> <p>Combines a local time with a UTC offset to create an OffsetTime.</p>"},{"location":"api/core/core/io.islandtime/between/","title":"between","text":"<p>//core/io.islandtime/between</p>"},{"location":"api/core/core/io.islandtime/between/#between","title":"between","text":"<p>common</p> <p><code>fun Centuries.Companion.between(start: Year, endExclusive: Year): Centuries</code></p> <p>Returns the number of whole centuries between two years.</p> <p>common</p> <p><code>fun Centuries.Companion.between(start: YearMonth, endExclusive: YearMonth): Centuries</code></p> <p>Returns the number of whole centuries between two year-months.</p> <p>common</p> <p><code>fun Centuries.Companion.between(start: Date, endExclusive: Date): Centuries</code></p> <p>Returns the number of whole centuries between two dates.</p> <p>common</p> <p><code>fun Centuries.Companion.between(start: DateTime, endExclusive: DateTime): Centuries</code></p> <p>Returns the number of whole centuries between two date-times, which are assumed to be in the same time zone.</p> <p>common</p> <p><code>fun Centuries.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Centuries</code></p> <p>Returns the number of whole centuries between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Centuries.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Centuries</code></p> <p>Returns the number of whole centuries between two date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Decades.Companion.between(start: Year, endExclusive: Year): Decades</code></p> <p>Returns the number of whole decades between two years.</p> <p>common</p> <p><code>fun Decades.Companion.between(start: YearMonth, endExclusive: YearMonth): Decades</code></p> <p>Returns the number of whole decades between two year-months.</p> <p>common</p> <p><code>fun Decades.Companion.between(start: Date, endExclusive: Date): Decades</code></p> <p>Returns the number of whole decades between two dates.</p> <p>common</p> <p><code>fun Decades.Companion.between(start: DateTime, endExclusive: DateTime): Decades</code></p> <p>Returns the number of whole decades between two date-times, which are assumed to be in the same time zone.</p> <p>common</p> <p><code>fun Decades.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Decades</code></p> <p>Returns the number of whole decades between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Decades.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Decades</code></p> <p>Returns the number of whole decades between two date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Years.Companion.between(start: Year, endExclusive: Year): Years</code></p> <p>Returns the number of years between two years.</p> <p>common</p> <p><code>fun Years.Companion.between(start: YearMonth, endExclusive: YearMonth): Years</code></p> <p>Returns the number of whole years between two year-months.</p> <p>common</p> <p><code>fun Years.Companion.between(start: Date, endExclusive: Date): Years</code></p> <p>Returns the number of whole years between two dates.</p> <p>common</p> <p><code>fun Years.Companion.between(start: DateTime, endExclusive: DateTime): Years</code></p> <p>Returns the number of whole years between two date-times, which are assumed to be in the same time zone.</p> <p>common</p> <p><code>fun Years.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Years</code></p> <p>Returns the number of whole years between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Years.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Years</code></p> <p>Returns the number of whole years between date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Months.Companion.between(start: YearMonth, endExclusive: YearMonth): Months</code></p> <p>Returns the number of months between two year-months.</p> <p>common</p> <p><code>fun Months.Companion.between(start: Date, endExclusive: Date): Months</code></p> <p>Returns the number of whole months between two dates.</p> <p>common</p> <p><code>fun Months.Companion.between(start: DateTime, endExclusive: DateTime): Months</code></p> <p>Returns the number of whole months between two date-times, which are assumed to be in the same time zone.</p> <p>common</p> <p><code>fun Months.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Months</code></p> <p>Returns the number of whole months between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Months.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Months</code></p> <p>Returns the number of whole months between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Weeks.Companion.between(start: Date, endExclusive: Date): Weeks</code></p> <p>Returns the number of whole weeks between two dates.</p> <p>common</p> <p><code>fun Weeks.Companion.between(start: DateTime, endExclusive: DateTime): Weeks</code></p> <p>Returns the number whole weeks between two date-times, which are assumed to be in the same time zone.</p> <p>common</p> <p><code>fun Weeks.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Weeks</code></p> <p>Returns the number whole weeks between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Weeks.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Weeks</code></p> <p>Returns the number of whole weeks between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Days.Companion.between(start: Date, endExclusive: Date): Days</code></p> <p>Returns the number of days between two dates.</p> <p>common</p> <p><code>fun Days.Companion.between(start: DateTime, endExclusive: DateTime): Days</code></p> <p>Returns the number whole days between two date-times, which are assumed to be in the same time zone.</p> <p>common</p> <p><code>fun Days.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Days</code></p> <p>Returns the number whole days between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Days.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Days</code></p> <p>Returns the number of whole days between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Hours.Companion.between(start: DateTime, endExclusive: DateTime): Hours</code></p> <p>Returns the number of whole hours between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p> <p>common</p> <p><code>fun Hours.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Hours</code></p> <p>Returns the number of whole hours between two time points.</p> <p>common</p> <p><code>fun Minutes.Companion.between(start: DateTime, endExclusive: DateTime): Minutes</code></p> <p>Returns the number of whole minutes between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p> <p>common</p> <p><code>fun Minutes.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Minutes</code></p> <p>Returns the number of whole minutes between two time points.</p> <p>common</p> <p><code>fun Seconds.Companion.between(start: DateTime, endExclusive: DateTime): Seconds</code></p> <p>Returns the number of whole seconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p>"},{"location":"api/core/core/io.islandtime/between/#throws","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Seconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Seconds</code></p> <p>Returns the number of whole seconds between two time points.</p>"},{"location":"api/core/core/io.islandtime/between/#throws_1","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Milliseconds.Companion.between(start: DateTime, endExclusive: DateTime): Milliseconds</code></p> <p>Returns the number of whole milliseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p>"},{"location":"api/core/core/io.islandtime/between/#throws_2","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Milliseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Milliseconds</code></p> <p>Returns the number of whole milliseconds between two time points.</p>"},{"location":"api/core/core/io.islandtime/between/#throws_3","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Microseconds.Companion.between(start: DateTime, endExclusive: DateTime): Microseconds</code></p> <p>Returns the number of whole microseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p>"},{"location":"api/core/core/io.islandtime/between/#throws_4","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Microseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Microseconds</code></p> <p>Returns the number of whole microseconds between two time points.</p>"},{"location":"api/core/core/io.islandtime/between/#throws_5","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Nanoseconds.Companion.between(start: DateTime, endExclusive: DateTime): Nanoseconds</code></p> <p>Returns the number of nanoseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p>"},{"location":"api/core/core/io.islandtime/between/#throws_6","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Nanoseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Nanoseconds</code></p> <p>Returns the number of nanoseconds between two time points.</p>"},{"location":"api/core/core/io.islandtime/between/#throws_7","title":"Throws","text":"ArithmeticException if the result overflows <p>common</p> <p><code>fun Duration.Companion.between(start: DateTime, endExclusive: DateTime): Duration</code></p> <p>Returns the Duration between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p> <p>common</p> <p><code>fun Duration.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Duration</code></p> <p>Returns the Duration between two time points.</p> <p>common</p> <p><code>fun Period.Companion.between(start: Date, endExclusive: Date): Period</code></p> <p>Returns the Period between two dates.</p> <p>common</p> <p><code>fun Period.Companion.between(start: DateTime, endExclusive: DateTime): Period</code></p> <p>Returns the Period between two date-times, which are assumed to be in the same time zone.</p> <p>common</p> <p><code>fun Period.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Period</code></p> <p>Returns the Period between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.</p> <p>common</p> <p><code>fun Period.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Period</code></p> <p>Returns the Period between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time.</p>"},{"location":"api/core/core/io.islandtime/end-of-day-at/","title":"endOfDayAt","text":"<p>//core/io.islandtime/endOfDayAt</p>"},{"location":"api/core/core/io.islandtime/end-of-day-at/#endofdayat","title":"endOfDayAt","text":"<p>common</p> <p><code>fun Date.endOfDayAt(zone: TimeZone): ZonedDateTime</code></p> <p>The ZonedDateTime at the last representable instant of the day in zone, taking into account any daylight savings transitions.</p>"},{"location":"api/core/core/io.islandtime/end-of-day/","title":"endOfDay","text":"<p>//core/io.islandtime/endOfDay</p>"},{"location":"api/core/core/io.islandtime/end-of-day/#endofday","title":"endOfDay","text":"<p>common</p> <p><code>val Date.endOfDay: DateTime</code></p> <p>The DateTime at the last representable instant of the day. Daylight savings transitions are not taken into account, so the returned date-time may not necessarily exist in all time zones.</p>"},{"location":"api/core/core/io.islandtime/end-of-day/#see-also","title":"See also","text":"endOfDayAt"},{"location":"api/core/core/io.islandtime/end-of-month/","title":"endOfMonth","text":"<p>//core/io.islandtime/endOfMonth</p>"},{"location":"api/core/core/io.islandtime/end-of-month/#endofmonth","title":"endOfMonth","text":"<p>common</p> <p><code>val Date.endOfMonth: Date</code></p> <p>The date at the end of the month that this date falls in.</p> <p>common</p> <p><code>val DateTime.endOfMonth: DateTime</code></p> <p><code>val OffsetDateTime.endOfMonth: OffsetDateTime</code></p> <p><code>val ZonedDateTime.endOfMonth: ZonedDateTime</code></p> <p>The date-time at the last representable instant of the month that this date-time falls in.</p>"},{"location":"api/core/core/io.islandtime/end-of-week/","title":"endOfWeek","text":"<p>//core/io.islandtime/endOfWeek</p>"},{"location":"api/core/core/io.islandtime/end-of-week/#endofweek","title":"endOfWeek","text":"<p>common</p> <p><code>fun Date.endOfWeek(settings: WeekSettings): Date</code></p> <p>The date at the end of the week that this date falls in. The first day of the week will be determined by settings. The first day of the week will be determined by the system settings. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.</p> <p>common</p> <p><code>fun Date.endOfWeek(locale: Locale): Date</code></p> <p>The date at the end of the week that this date falls in. The first day of the week will be determined by locale.</p> <p>common</p> <p><code>fun DateTime.endOfWeek(settings: WeekSettings): DateTime</code></p> <p>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.</p> <p>common</p> <p><code>fun DateTime.endOfWeek(locale: Locale): DateTime</code></p> <p><code>fun OffsetDateTime.endOfWeek(locale: Locale): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.endOfWeek(locale: Locale): ZonedDateTime</code></p> <p>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale.</p> <p>common</p> <p><code>fun OffsetDateTime.endOfWeek(settings: WeekSettings): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.endOfWeek(settings: WeekSettings): ZonedDateTime</code></p> <p>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.</p> <p>common</p> <p><code>val Date.endOfWeek: Date</code></p> <p>The date at the end of the ISO week that this date falls in.</p> <p>The ISO week starts on Monday and ends on Sunday.</p> <p>common</p> <p><code>val DateTime.endOfWeek: DateTime</code></p> <p><code>val OffsetDateTime.endOfWeek: OffsetDateTime</code></p> <p><code>val ZonedDateTime.endOfWeek: ZonedDateTime</code></p> <p>The date-time at the last representable instant of the ISO week that this date-time falls in.</p> <p>The ISO week starts on Monday and ends on Sunday.</p>"},{"location":"api/core/core/io.islandtime/end-of-year/","title":"endOfYear","text":"<p>//core/io.islandtime/endOfYear</p>"},{"location":"api/core/core/io.islandtime/end-of-year/#endofyear","title":"endOfYear","text":"<p>common</p> <p><code>val Date.endOfYear: Date</code></p> <p>The date at the end of the year that this date falls in.</p> <p>common</p> <p><code>val DateTime.endOfYear: DateTime</code></p> <p><code>val OffsetDateTime.endOfYear: OffsetDateTime</code></p> <p><code>val ZonedDateTime.endOfYear: ZonedDateTime</code></p> <p>The date-time at the last representable instant of the year that this date-time falls in.</p>"},{"location":"api/core/core/io.islandtime/from-week-date/","title":"fromWeekDate","text":"<p>//core/io.islandtime/fromWeekDate</p>"},{"location":"api/core/core/io.islandtime/from-week-date/#fromweekdate","title":"fromWeekDate","text":"<p>common</p> <p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int): Date</code></p> <p>Creates a Date from an ISO week date.</p>"},{"location":"api/core/core/io.islandtime/from-week-date/#parameters","title":"Parameters","text":"<p>common</p> year the week-based year week the week number of the week-based year day the ISO day of week number, 1 (Monday) to 7 (Sunday)"},{"location":"api/core/core/io.islandtime/from-week-date/#throws","title":"Throws","text":"DateTimeException if the year, week, or day is invalid <p>common</p> <p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int, settings: WeekSettings): Date</code></p> <p>Creates a Date from a week date representation using the week definition in settings.</p>"},{"location":"api/core/core/io.islandtime/from-week-date/#parameters_1","title":"Parameters","text":"<p>common</p> year the week-based year week the week number of the week-based year day the day of week number, 1-7 settings the week definition to use when interpreting the year, week, and day <p>common</p> <p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int, locale: Locale): Date</code></p> <p>Creates a Date from a week date representation using the week definition associated with the provided locale.</p>"},{"location":"api/core/core/io.islandtime/from-week-date/#parameters_2","title":"Parameters","text":"<p>common</p> year the week-based year week the week number of the week-based year day the day of week number, 1-7 locale the locale providing the week definition to use when interpreting the year, week, and day"},{"location":"api/core/core/io.islandtime/is-in-leap-day/","title":"isInLeapDay","text":"<p>//core/io.islandtime/isInLeapDay</p>"},{"location":"api/core/core/io.islandtime/is-in-leap-day/#isinleapday","title":"isInLeapDay","text":"<p>common</p> <p><code>val DateTime.isInLeapDay: Boolean</code></p> <p><code>val OffsetDateTime.isInLeapDay: Boolean</code></p> <p><code>val ZonedDateTime.isInLeapDay: Boolean</code></p> <p>Checks if this date-time falls within February 29.</p>"},{"location":"api/core/core/io.islandtime/is-in-leap-year/","title":"isInLeapYear","text":"<p>//core/io.islandtime/isInLeapYear</p>"},{"location":"api/core/core/io.islandtime/is-in-leap-year/#isinleapyear","title":"isInLeapYear","text":"<p>common</p> <p><code>val Date.isInLeapYear: Boolean</code></p> <p>Checks if this date falls within a leap year.</p> <p>common</p> <p><code>val DateTime.isInLeapYear: Boolean</code></p> <p><code>val OffsetDateTime.isInLeapYear: Boolean</code></p> <p><code>val ZonedDateTime.isInLeapYear: Boolean</code></p> <p>Checks if this date-time falls within a leap year.</p>"},{"location":"api/core/core/io.islandtime/is-leap-day/","title":"isLeapDay","text":"<p>//core/io.islandtime/isLeapDay</p>"},{"location":"api/core/core/io.islandtime/is-leap-day/#isleapday","title":"isLeapDay","text":"<p>common</p> <p><code>val Date.isLeapDay: Boolean</code></p> <p>Checks if this date is February 29.</p>"},{"location":"api/core/core/io.islandtime/length-of-month/","title":"lengthOfMonth","text":"<p>//core/io.islandtime/lengthOfMonth</p>"},{"location":"api/core/core/io.islandtime/length-of-month/#lengthofmonth","title":"lengthOfMonth","text":"<p>common</p> <p><code>val Date.lengthOfMonth: Days</code></p> <p>The length of this date's month in days.</p> <p>common</p> <p><code>val DateTime.lengthOfMonth: Days</code></p> <p><code>val OffsetDateTime.lengthOfMonth: Days</code></p> <p><code>val ZonedDateTime.lengthOfMonth: Days</code></p> <p>The length of this date-time's month in days.</p>"},{"location":"api/core/core/io.islandtime/length-of-week-based-year/","title":"lengthOfWeekBasedYear","text":"<p>//core/io.islandtime/lengthOfWeekBasedYear</p>"},{"location":"api/core/core/io.islandtime/length-of-week-based-year/#lengthofweekbasedyear","title":"lengthOfWeekBasedYear","text":"<p>common</p> <p><code>val Date.lengthOfWeekBasedYear: Weeks</code></p> <p>The length of the ISO week-based year that this date falls in, either 52 or 53 weeks.</p> <p>common</p> <p><code>val DateTime.lengthOfWeekBasedYear: Weeks</code></p> <p><code>val OffsetDateTime.lengthOfWeekBasedYear: Weeks</code></p> <p><code>val ZonedDateTime.lengthOfWeekBasedYear: Weeks</code></p> <p>The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks.</p>"},{"location":"api/core/core/io.islandtime/length-of-year/","title":"lengthOfYear","text":"<p>//core/io.islandtime/lengthOfYear</p>"},{"location":"api/core/core/io.islandtime/length-of-year/#lengthofyear","title":"lengthOfYear","text":"<p>common</p> <p><code>val Date.lengthOfYear: Days</code></p> <p>The length of this date's year in days.</p> <p>common</p> <p><code>val DateTime.lengthOfYear: Days</code></p> <p><code>val OffsetDateTime.lengthOfYear: Days</code></p> <p><code>val ZonedDateTime.lengthOfYear: Days</code></p> <p>The length of this date-time's year in days.</p>"},{"location":"api/core/core/io.islandtime/next-or-same/","title":"nextOrSame","text":"<p>//core/io.islandtime/nextOrSame</p>"},{"location":"api/core/core/io.islandtime/next-or-same/#nextorsame","title":"nextOrSame","text":"<p>common</p> <p><code>fun Date.nextOrSame(dayOfWeek: DayOfWeek): Date</code></p> <p>The next date that falls on dayOfWeek, or this date if it falls on the same day.</p> <p>common</p> <p><code>fun DateTime.nextOrSame(dayOfWeek: DayOfWeek): DateTime</code></p> <p><code>fun OffsetDateTime.nextOrSame(dayOfWeek: DayOfWeek): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.nextOrSame(dayOfWeek: DayOfWeek): ZonedDateTime</code></p> <p>The next date-time that falls on dayOfWeek, or this date-time if it falls on the same day.</p>"},{"location":"api/core/core/io.islandtime/next/","title":"next","text":"<p>//core/io.islandtime/next</p>"},{"location":"api/core/core/io.islandtime/next/#next","title":"next","text":"<p>common</p> <p><code>fun Date.next(dayOfWeek: DayOfWeek): Date</code></p> <p>The next date after this one that falls on dayOfWeek.</p> <p>common</p> <p><code>fun DateTime.next(dayOfWeek: DayOfWeek): DateTime</code></p> <p><code>fun OffsetDateTime.next(dayOfWeek: DayOfWeek): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.next(dayOfWeek: DayOfWeek): ZonedDateTime</code></p> <p>The next date-time after this one that falls on dayOfWeek.</p>"},{"location":"api/core/core/io.islandtime/previous-or-same/","title":"previousOrSame","text":"<p>//core/io.islandtime/previousOrSame</p>"},{"location":"api/core/core/io.islandtime/previous-or-same/#previousorsame","title":"previousOrSame","text":"<p>common</p> <p><code>fun Date.previousOrSame(dayOfWeek: DayOfWeek): Date</code></p> <p>The previous date that falls on dayOfWeek, or this date if it falls on the same day.</p> <p>common</p> <p><code>fun DateTime.previousOrSame(dayOfWeek: DayOfWeek): DateTime</code></p> <p><code>fun OffsetDateTime.previousOrSame(dayOfWeek: DayOfWeek): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.previousOrSame(dayOfWeek: DayOfWeek): ZonedDateTime</code></p> <p>The previous date-time that falls on dayOfWeek, or this date-time if it falls on the same day.</p>"},{"location":"api/core/core/io.islandtime/previous/","title":"previous","text":"<p>//core/io.islandtime/previous</p>"},{"location":"api/core/core/io.islandtime/previous/#previous","title":"previous","text":"<p>common</p> <p><code>fun Date.previous(dayOfWeek: DayOfWeek): Date</code></p> <p>The last date before this one that falls on dayOfWeek.</p> <p>common</p> <p><code>fun DateTime.previous(dayOfWeek: DayOfWeek): DateTime</code></p> <p><code>fun OffsetDateTime.previous(dayOfWeek: DayOfWeek): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.previous(dayOfWeek: DayOfWeek): ZonedDateTime</code></p> <p>The last date-time before this one that falls on dayOfWeek.</p>"},{"location":"api/core/core/io.islandtime/rounded-down-to-nearest/","title":"roundedDownToNearest","text":"<p>//core/io.islandtime/roundedDownToNearest</p>"},{"location":"api/core/core/io.islandtime/rounded-down-to-nearest/#roundeddowntonearest","title":"roundedDownToNearest","text":"<p>common</p> <p><code>fun Time.roundedDownToNearest(increment: Hours): Time</code></p> <p><code>fun OffsetTime.roundedDownToNearest(increment: Hours): OffsetTime</code></p> <p>Returns this time, rounded down to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun Time.roundedDownToNearest(increment: Minutes): Time</code></p> <p><code>fun OffsetTime.roundedDownToNearest(increment: Minutes): OffsetTime</code></p> <p>Returns this time, rounded down to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun Time.roundedDownToNearest(increment: Seconds): Time</code></p> <p><code>fun OffsetTime.roundedDownToNearest(increment: Seconds): OffsetTime</code></p> <p>Returns this time, rounded down to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun Time.roundedDownToNearest(increment: Milliseconds): Time</code></p> <p><code>fun OffsetTime.roundedDownToNearest(increment: Milliseconds): OffsetTime</code></p> <p>Returns this time, rounded down to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Time.roundedDownToNearest(increment: Microseconds): Time</code></p> <p><code>fun OffsetTime.roundedDownToNearest(increment: Microseconds): OffsetTime</code></p> <p>Returns this time, rounded down to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Time.roundedDownToNearest(increment: Nanoseconds): Time</code></p> <p><code>fun OffsetTime.roundedDownToNearest(increment: Nanoseconds): OffsetTime</code></p> <p>Returns this time, rounded down to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedDownToNearest(increment: Hours): DateTime</code></p> <p><code>fun OffsetDateTime.roundedDownToNearest(increment: Hours): OffsetDateTime</code></p> <p>Returns this date-time, rounded down to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun DateTime.roundedDownToNearest(increment: Minutes): DateTime</code></p> <p><code>fun OffsetDateTime.roundedDownToNearest(increment: Minutes): OffsetDateTime</code></p> <p>Returns this date-time, rounded down to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun DateTime.roundedDownToNearest(increment: Seconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedDownToNearest(increment: Seconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded down to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun DateTime.roundedDownToNearest(increment: Milliseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedDownToNearest(increment: Milliseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded down to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedDownToNearest(increment: Microseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedDownToNearest(increment: Microseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded down to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedDownToNearest(increment: Nanoseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedDownToNearest(increment: Nanoseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded down to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedDownToNearest(increment: Hours): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedDownToNearest(increment: Minutes): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedDownToNearest(increment: Seconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedDownToNearest(increment: Milliseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedDownToNearest(increment: Microseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedDownToNearest(increment: Nanoseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun Instant.roundedDownToNearest(increment: Hours): Instant</code></p> <p>Returns this instant, rounded down to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun Instant.roundedDownToNearest(increment: Minutes): Instant</code></p> <p>Returns this instant, rounded down to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun Instant.roundedDownToNearest(increment: Seconds): Instant</code></p> <p>Returns this instant, rounded down to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun Instant.roundedDownToNearest(increment: Milliseconds): Instant</code></p> <p>Returns this instant, rounded down to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Instant.roundedDownToNearest(increment: Microseconds): Instant</code></p> <p>Returns this instant, rounded down to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Instant.roundedDownToNearest(increment: Nanoseconds): Instant</code></p> <p>Returns this instant, rounded down to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p>"},{"location":"api/core/core/io.islandtime/rounded-down-to/","title":"roundedDownTo","text":"<p>//core/io.islandtime/roundedDownTo</p>"},{"location":"api/core/core/io.islandtime/rounded-down-to/#roundeddownto","title":"roundedDownTo","text":"<p>common</p> <p><code>fun Time.roundedDownTo(unit: TimeUnit): Time</code></p> <p><code>fun OffsetTime.roundedDownTo(unit: TimeUnit): OffsetTime</code></p> <p>Returns this time, rounded down to match the precision of a given unit.</p> <p>This is equivalent to truncatedTo.</p> <p>common</p> <p><code>fun DateTime.roundedDownTo(unit: TimeUnit): DateTime</code></p> <p><code>fun OffsetDateTime.roundedDownTo(unit: TimeUnit): OffsetDateTime</code></p> <p>Returns this date-time, rounded down to match the precision of a given unit.</p> <p>This is equivalent to truncatedTo.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedDownTo(unit: TimeUnit): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to match the precision of a given unit.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>This is equivalent to truncatedTo.</p> <p>common</p> <p><code>fun Instant.roundedDownTo(unit: TimeUnit): Instant</code></p> <p>Returns this instant, rounded down to match the precision of a given unit.</p> <p>This is equivalent to truncatedTo.</p>"},{"location":"api/core/core/io.islandtime/rounded-to-nearest/","title":"roundedToNearest","text":"<p>//core/io.islandtime/roundedToNearest</p>"},{"location":"api/core/core/io.islandtime/rounded-to-nearest/#roundedtonearest","title":"roundedToNearest","text":"<p>common</p> <p><code>fun Time.roundedToNearest(increment: Hours): Time</code></p> <p><code>fun OffsetTime.roundedToNearest(increment: Hours): OffsetTime</code></p> <p>Returns this time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun Time.roundedToNearest(increment: Minutes): Time</code></p> <p><code>fun OffsetTime.roundedToNearest(increment: Minutes): OffsetTime</code></p> <p>Returns this time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun Time.roundedToNearest(increment: Seconds): Time</code></p> <p><code>fun OffsetTime.roundedToNearest(increment: Seconds): OffsetTime</code></p> <p>Returns this time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun Time.roundedToNearest(increment: Milliseconds): Time</code></p> <p><code>fun OffsetTime.roundedToNearest(increment: Milliseconds): OffsetTime</code></p> <p>Returns this time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Time.roundedToNearest(increment: Microseconds): Time</code></p> <p><code>fun OffsetTime.roundedToNearest(increment: Microseconds): OffsetTime</code></p> <p>Returns this time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Time.roundedToNearest(increment: Nanoseconds): Time</code></p> <p><code>fun OffsetTime.roundedToNearest(increment: Nanoseconds): OffsetTime</code></p> <p>Returns this time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedToNearest(increment: Hours): DateTime</code></p> <p><code>fun OffsetDateTime.roundedToNearest(increment: Hours): OffsetDateTime</code></p> <p>Returns this date-time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun DateTime.roundedToNearest(increment: Minutes): DateTime</code></p> <p><code>fun OffsetDateTime.roundedToNearest(increment: Minutes): OffsetDateTime</code></p> <p>Returns this date-time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun DateTime.roundedToNearest(increment: Seconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedToNearest(increment: Seconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun DateTime.roundedToNearest(increment: Milliseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedToNearest(increment: Milliseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedToNearest(increment: Microseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedToNearest(increment: Microseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedToNearest(increment: Nanoseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedToNearest(increment: Nanoseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedToNearest(increment: Hours): ZonedDateTime</code></p> <p>Returns this date-time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedToNearest(increment: Minutes): ZonedDateTime</code></p> <p>Returns this date-time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into an hour.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedToNearest(increment: Seconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a minute.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedToNearest(increment: Milliseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedToNearest(increment: Microseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedToNearest(increment: Nanoseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun Instant.roundedToNearest(increment: Hours): Instant</code></p> <p>Returns this instant, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun Instant.roundedToNearest(increment: Minutes): Instant</code></p> <p>Returns this instant, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun Instant.roundedToNearest(increment: Seconds): Instant</code></p> <p>Returns this instant, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun Instant.roundedToNearest(increment: Milliseconds): Instant</code></p> <p>Returns this instant, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Instant.roundedToNearest(increment: Microseconds): Instant</code></p> <p>Returns this instant, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Instant.roundedToNearest(increment: Nanoseconds): Instant</code></p> <p>Returns this instant, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.</p> <p>The increment must multiply evenly into a second.</p>"},{"location":"api/core/core/io.islandtime/rounded-to/","title":"roundedTo","text":"<p>//core/io.islandtime/roundedTo</p>"},{"location":"api/core/core/io.islandtime/rounded-to/#roundedto","title":"roundedTo","text":"<p>common</p> <p><code>fun Time.roundedTo(unit: TimeUnit): Time</code></p> <p><code>fun OffsetTime.roundedTo(unit: TimeUnit): OffsetTime</code></p> <p>Returns this time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up.</p> <p>common</p> <p><code>fun DateTime.roundedTo(unit: TimeUnit): DateTime</code></p> <p><code>fun OffsetDateTime.roundedTo(unit: TimeUnit): OffsetDateTime</code></p> <p>Returns this date-time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedTo(unit: TimeUnit): ZonedDateTime</code></p> <p>Returns this date-time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun Instant.roundedTo(unit: TimeUnit): Instant</code></p> <p>Returns this instant, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up.</p>"},{"location":"api/core/core/io.islandtime/rounded-up-to-nearest/","title":"roundedUpToNearest","text":"<p>//core/io.islandtime/roundedUpToNearest</p>"},{"location":"api/core/core/io.islandtime/rounded-up-to-nearest/#roundeduptonearest","title":"roundedUpToNearest","text":"<p>common</p> <p><code>fun Time.roundedUpToNearest(increment: Hours): Time</code></p> <p><code>fun OffsetTime.roundedUpToNearest(increment: Hours): OffsetTime</code></p> <p>Returns this time, rounded up to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun Time.roundedUpToNearest(increment: Minutes): Time</code></p> <p><code>fun OffsetTime.roundedUpToNearest(increment: Minutes): OffsetTime</code></p> <p>Returns this time, rounded up to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun Time.roundedUpToNearest(increment: Seconds): Time</code></p> <p><code>fun OffsetTime.roundedUpToNearest(increment: Seconds): OffsetTime</code></p> <p>Returns this time, rounded up to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun Time.roundedUpToNearest(increment: Milliseconds): Time</code></p> <p><code>fun OffsetTime.roundedUpToNearest(increment: Milliseconds): OffsetTime</code></p> <p>Returns this time, rounded up to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Time.roundedUpToNearest(increment: Microseconds): Time</code></p> <p><code>fun OffsetTime.roundedUpToNearest(increment: Microseconds): OffsetTime</code></p> <p>Returns this time, rounded up to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Time.roundedUpToNearest(increment: Nanoseconds): Time</code></p> <p><code>fun OffsetTime.roundedUpToNearest(increment: Nanoseconds): OffsetTime</code></p> <p>Returns this time, rounded up to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedUpToNearest(increment: Hours): DateTime</code></p> <p><code>fun OffsetDateTime.roundedUpToNearest(increment: Hours): OffsetDateTime</code></p> <p>Returns this date-time, rounded up to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun DateTime.roundedUpToNearest(increment: Minutes): DateTime</code></p> <p><code>fun OffsetDateTime.roundedUpToNearest(increment: Minutes): OffsetDateTime</code></p> <p>Returns this date-time, rounded up to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun DateTime.roundedUpToNearest(increment: Seconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedUpToNearest(increment: Seconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded up to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun DateTime.roundedUpToNearest(increment: Milliseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedUpToNearest(increment: Milliseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded up to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedUpToNearest(increment: Microseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedUpToNearest(increment: Microseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded up to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun DateTime.roundedUpToNearest(increment: Nanoseconds): DateTime</code></p> <p><code>fun OffsetDateTime.roundedUpToNearest(increment: Nanoseconds): OffsetDateTime</code></p> <p>Returns this date-time, rounded up to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedUpToNearest(increment: Hours): ZonedDateTime</code></p> <p>Returns this date-time, rounded up to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedUpToNearest(increment: Minutes): ZonedDateTime</code></p> <p>Returns this date-time, rounded up to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedUpToNearest(increment: Seconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded up to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedUpToNearest(increment: Milliseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded up to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedUpToNearest(increment: Microseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded up to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedUpToNearest(increment: Nanoseconds): ZonedDateTime</code></p> <p>Returns this date-time, rounded up to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun Instant.roundedUpToNearest(increment: Hours): Instant</code></p> <p>Returns this instant, rounded up to the nearest hour that satisfies the increment.</p> <p>The increment must multiply evenly into a 24-hour day.</p> <p>common</p> <p><code>fun Instant.roundedUpToNearest(increment: Minutes): Instant</code></p> <p>Returns this instant, rounded up to the nearest minute that satisfies the increment.</p> <p>The increment must multiply evenly into an hour.</p> <p>common</p> <p><code>fun Instant.roundedUpToNearest(increment: Seconds): Instant</code></p> <p>Returns this instant, rounded up to the nearest second that satisfies the increment.</p> <p>The increment must multiply evenly into a minute.</p> <p>common</p> <p><code>fun Instant.roundedUpToNearest(increment: Milliseconds): Instant</code></p> <p>Returns this instant, rounded up to the nearest millisecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Instant.roundedUpToNearest(increment: Microseconds): Instant</code></p> <p>Returns this instant, rounded up to the nearest microsecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p> <p>common</p> <p><code>fun Instant.roundedUpToNearest(increment: Nanoseconds): Instant</code></p> <p>Returns this instant, rounded up to the nearest nanosecond that satisfies the increment.</p> <p>The increment must multiply evenly into a second.</p>"},{"location":"api/core/core/io.islandtime/rounded-up-to/","title":"roundedUpTo","text":"<p>//core/io.islandtime/roundedUpTo</p>"},{"location":"api/core/core/io.islandtime/rounded-up-to/#roundedupto","title":"roundedUpTo","text":"<p>common</p> <p><code>fun Time.roundedUpTo(unit: TimeUnit): Time</code></p> <p><code>fun OffsetTime.roundedUpTo(unit: TimeUnit): OffsetTime</code></p> <p>Returns this time, rounded up to match the precision of a given unit.</p> <p>common</p> <p><code>fun DateTime.roundedUpTo(unit: TimeUnit): DateTime</code></p> <p><code>fun OffsetDateTime.roundedUpTo(unit: TimeUnit): OffsetDateTime</code></p> <p>Returns this date-time, rounded up to match the precision of a given unit.</p> <p>The start of the next day will be returned when the resulting time is after midnight.</p> <p>common</p> <p><code>fun ZonedDateTime.roundedUpTo(unit: TimeUnit): ZonedDateTime</code></p> <p>Returns this date-time, rounded up to match the precision of a given unit.</p> <p>The start of the next day will be returned when the resulting time is after midnight.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the new local time falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the offset will be retained if possible. Otherwise, the earlier offset will be used.</p> <p>common</p> <p><code>fun Instant.roundedUpTo(unit: TimeUnit): Instant</code></p> <p>Returns this instant, rounded up to match the precision of a given unit.</p>"},{"location":"api/core/core/io.islandtime/start-of-day-at/","title":"startOfDayAt","text":"<p>//core/io.islandtime/startOfDayAt</p>"},{"location":"api/core/core/io.islandtime/start-of-day-at/#startofdayat","title":"startOfDayAt","text":"<p>common</p> <p><code>fun Date.startOfDayAt(zone: TimeZone): ZonedDateTime</code></p> <p>The ZonedDateTime at the start of the day in zone, taking into account any daylight savings transitions.</p>"},{"location":"api/core/core/io.islandtime/start-of-day/","title":"startOfDay","text":"<p>//core/io.islandtime/startOfDay</p>"},{"location":"api/core/core/io.islandtime/start-of-day/#startofday","title":"startOfDay","text":"<p>common</p> <p><code>val Date.startOfDay: DateTime</code></p> <p>The DateTime at the start of the day. Daylight savings transitions are not taken into account, so the returned date-time may not necessarily exist in all time zones.</p>"},{"location":"api/core/core/io.islandtime/start-of-day/#see-also","title":"See also","text":"startOfDayAt"},{"location":"api/core/core/io.islandtime/start-of-month/","title":"startOfMonth","text":"<p>//core/io.islandtime/startOfMonth</p>"},{"location":"api/core/core/io.islandtime/start-of-month/#startofmonth","title":"startOfMonth","text":"<p>common</p> <p><code>val Date.startOfMonth: Date</code></p> <p>The date at the start of the month that this date falls in.</p> <p>common</p> <p><code>val DateTime.startOfMonth: DateTime</code></p> <p><code>val OffsetDateTime.startOfMonth: OffsetDateTime</code></p> <p><code>val ZonedDateTime.startOfMonth: ZonedDateTime</code></p> <p>The date-time at the first instant of the month that this date-time falls in.</p>"},{"location":"api/core/core/io.islandtime/start-of-week/","title":"startOfWeek","text":"<p>//core/io.islandtime/startOfWeek</p>"},{"location":"api/core/core/io.islandtime/start-of-week/#startofweek","title":"startOfWeek","text":"<p>common</p> <p><code>fun Date.startOfWeek(settings: WeekSettings): Date</code></p> <p>The date at the start of the week that this date falls in. The first day of the week will be determined by settings.</p> <p>common</p> <p><code>fun Date.startOfWeek(locale: Locale): Date</code></p> <p>The date at the start of the week that this date falls in. The first day of the week will be determined by locale.</p> <p>common</p> <p><code>fun DateTime.startOfWeek(settings: WeekSettings): DateTime</code></p> <p>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.</p> <p>common</p> <p><code>fun DateTime.startOfWeek(locale: Locale): DateTime</code></p> <p><code>fun OffsetDateTime.startOfWeek(locale: Locale): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.startOfWeek(locale: Locale): ZonedDateTime</code></p> <p>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale.</p> <p>common</p> <p><code>fun OffsetDateTime.startOfWeek(settings: WeekSettings): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.startOfWeek(settings: WeekSettings): ZonedDateTime</code></p> <p>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.</p> <p>common</p> <p><code>val Date.startOfWeek: Date</code></p> <p>The date at the start of the ISO week that this date falls in.</p> <p>The ISO week starts on Monday and ends on Sunday.</p> <p>common</p> <p><code>val DateTime.startOfWeek: DateTime</code></p> <p><code>val OffsetDateTime.startOfWeek: OffsetDateTime</code></p> <p><code>val ZonedDateTime.startOfWeek: ZonedDateTime</code></p> <p>The date-time at the first instant of the ISO week that this date-time falls in.</p> <p>The ISO week starts on Monday and ends on Sunday.</p>"},{"location":"api/core/core/io.islandtime/start-of-year/","title":"startOfYear","text":"<p>//core/io.islandtime/startOfYear</p>"},{"location":"api/core/core/io.islandtime/start-of-year/#startofyear","title":"startOfYear","text":"<p>common</p> <p><code>val Date.startOfYear: Date</code></p> <p>The date at the start of the year that this date falls in.</p> <p>common</p> <p><code>val DateTime.startOfYear: DateTime</code></p> <p><code>val OffsetDateTime.startOfYear: OffsetDateTime</code></p> <p><code>val ZonedDateTime.startOfYear: ZonedDateTime</code></p> <p>The date-time at the first instant of the year that this date-time falls in.</p>"},{"location":"api/core/core/io.islandtime/to-date-at/","title":"toDateAt","text":"<p>//core/io.islandtime/toDateAt</p>"},{"location":"api/core/core/io.islandtime/to-date-at/#todateat","title":"toDateAt","text":"<p>common</p> <p><code>fun Instant.toDateAt(offset: UtcOffset): Date</code></p> <p>Converts this instant to the corresponding Date at offset.</p> <p>common</p> <p><code>fun Instant.toDateAt(zone: TimeZone): Date</code></p> <p>Converts this instant to the corresponding Date in zone.</p>"},{"location":"api/core/core/io.islandtime/to-date-time-at/","title":"toDateTimeAt","text":"<p>//core/io.islandtime/toDateTimeAt</p>"},{"location":"api/core/core/io.islandtime/to-date-time-at/#todatetimeat","title":"toDateTimeAt","text":"<p>common</p> <p><code>fun Instant.toDateTimeAt(offset: UtcOffset): DateTime</code></p> <p>Converts this instant to the corresponding DateTime at offset.</p> <p>common</p> <p><code>fun Instant.toDateTimeAt(zone: TimeZone): DateTime</code></p> <p>Converts this instant to the corresponding DateTime in zone.</p>"},{"location":"api/core/core/io.islandtime/to-date-time/","title":"toDateTime","text":"<p>//core/io.islandtime/toDateTime</p>"},{"location":"api/core/core/io.islandtime/to-date-time/#todatetime","title":"toDateTime","text":"<p>common</p> <p><code>fun String.toDateTime(): DateTime</code></p> <p>Convert a string to a DateTime.</p> <p>The string is assumed to be an ISO-8601 date-time representation in extended format. For example, <code>2019-08-22T18:00</code> or <code>2019-08-22 18:00:30.123456789</code>. The output of DateTime.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-date-time/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date-time is invalid <p>common</p> <p><code>fun String.toDateTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTime</code></p> <p>Converts a string to a DateTime using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p> <p>Any custom parser must be capable of supplying the fields necessary to resolve both a Date and Time.</p>"},{"location":"api/core/core/io.islandtime/to-date-time/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date-time is invalid"},{"location":"api/core/core/io.islandtime/to-date/","title":"toDate","text":"<p>//core/io.islandtime/toDate</p>"},{"location":"api/core/core/io.islandtime/to-date/#todate","title":"toDate","text":"<p>common</p> <p><code>fun String.toDate(): Date</code></p> <p>Converts a string to a Date.</p> <p>The string is assumed to be an ISO-8601 calendar date in extended format. For example, <code>2010-10-05</code>. The output of Date.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-date/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date is invalid <p>common</p> <p><code>fun String.toDate(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Date</code></p> <p>Converts a string to a Date using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p> <p>Any custom parser must be capable of supplying one of the following field combinations:</p> <ul><li>[DateTimeField.YEAR](../io.islandtime.base/-date-time-field/-y-e-a-r/index.md), [DateTimeField.MONTH_OF_YEAR](../io.islandtime.base/-date-time-field/-m-o-n-t-h_-o-f_-y-e-a-r/index.md), [DateTimeField.DAY_OF_MONTH](../io.islandtime.base/-date-time-field/-d-a-y_-o-f_-m-o-n-t-h/index.md)</li><li>[DateTimeField.YEAR](../io.islandtime.base/-date-time-field/-y-e-a-r/index.md), [DateTimeField.DAY_OF_YEAR](../io.islandtime.base/-date-time-field/-d-a-y_-o-f_-y-e-a-r/index.md)</li></ul>"},{"location":"api/core/core/io.islandtime/to-date/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date is invalid"},{"location":"api/core/core/io.islandtime/to-day-of-week/","title":"toDayOfWeek","text":"<p>//core/io.islandtime/toDayOfWeek</p>"},{"location":"api/core/core/io.islandtime/to-day-of-week/#todayofweek","title":"toDayOfWeek","text":"<p>common</p> <p><code>fun Int.toDayOfWeek(): DayOfWeek</code></p> <p>Converts an ISO day of week number to a DayOfWeek.</p> <p>The ISO week starts on Monday (1) and ends on Sunday (7).</p> <p>common</p> <p><code>fun Int.toDayOfWeek(settings: WeekSettings): DayOfWeek</code></p> <p>Converts a day of week number (1-7) to a DayOfWeek using the week definition provided by settings.</p>"},{"location":"api/core/core/io.islandtime/to-instant-at/","title":"toInstantAt","text":"<p>//core/io.islandtime/toInstantAt</p>"},{"location":"api/core/core/io.islandtime/to-instant-at/#toinstantat","title":"toInstantAt","text":"<p>common</p> <p><code>fun DateTime.toInstantAt(offset: UtcOffset): Instant</code></p> <p>Converts this date-time to the corresponding Instant at offset.</p>"},{"location":"api/core/core/io.islandtime/to-instant-at/#parameters","title":"Parameters","text":"<p>common</p> offset the offset from UTC"},{"location":"api/core/core/io.islandtime/to-instant/","title":"toInstant","text":"<p>//core/io.islandtime/toInstant</p>"},{"location":"api/core/core/io.islandtime/to-instant/#toinstant","title":"toInstant","text":"<p>common</p> <p><code>fun OffsetDateTime.toInstant(): Instant</code></p> <p><code>fun ZonedDateTime.toInstant(): Instant</code></p> <p>Converts this date-time to an Instant representing the same time point.</p> <p>common</p> <p><code>fun String.toInstant(): Instant</code></p> <p>Converts a string to an Instant.</p> <p>The string is assumed to be an ISO-8601 UTC date-time representation in extended format. For example, <code>2010-10-05T18:30Z</code> or <code>2010-10-05T18:30:00.123456789Z</code>. The output of Instant.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-instant/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date or time is invalid <p>common</p> <p><code>fun String.toInstant(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Instant</code></p> <p>Converts a string to an Instant using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime/to-instant/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date or time is invalid"},{"location":"api/core/core/io.islandtime/to-month/","title":"toMonth","text":"<p>//core/io.islandtime/toMonth</p>"},{"location":"api/core/core/io.islandtime/to-month/#tomonth","title":"toMonth","text":"<p>common</p> <p><code>fun Int.toMonth(): Month</code></p> <p>Converts an ISO month number, from 1-12, to a Month.</p>"},{"location":"api/core/core/io.islandtime/to-offset-date-time/","title":"toOffsetDateTime","text":"<p>//core/io.islandtime/toOffsetDateTime</p>"},{"location":"api/core/core/io.islandtime/to-offset-date-time/#tooffsetdatetime","title":"toOffsetDateTime","text":"<p>common</p> <p><code>fun ZonedDateTime.toOffsetDateTime(): OffsetDateTime</code></p> <p>Returns the combined date, time, and UTC offset.</p> <p>While similar to <code>ZonedDateTime</code>, an <code>OffsetDateTime</code> representation is unaffected by time zone rule changes or database differences between systems, making it better suited for use cases involving persistence or network transfer.</p> <p>common</p> <p><code>fun String.toOffsetDateTime(): OffsetDateTime</code></p> <p>Converts a string to an OffsetDateTime.</p> <p>The string is assumed to be an ISO-8601 date-time with the UTC offset in extended format. For example, <code>2019-05-30T02:30+01:00</code>. The output of OffsetDateTime.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-offset-date-time/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date-time or offset is invalid <p>common</p> <p><code>fun String.toOffsetDateTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTime</code></p> <p>Converts a string to an OffsetDateTime using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p> <p>Any custom parser must be capable of supplying the fields necessary to resolve a Date, Time and UtcOffset.</p>"},{"location":"api/core/core/io.islandtime/to-offset-date-time/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date-time or offset is invalid"},{"location":"api/core/core/io.islandtime/to-offset-time/","title":"toOffsetTime","text":"<p>//core/io.islandtime/toOffsetTime</p>"},{"location":"api/core/core/io.islandtime/to-offset-time/#tooffsettime","title":"toOffsetTime","text":"<p>common</p> <p><code>fun OffsetDateTime.toOffsetTime(): OffsetTime</code></p> <p><code>fun ZonedDateTime.toOffsetTime(): OffsetTime</code></p> <p>Returns the combined time and UTC offset.</p> <p>common</p> <p><code>fun String.toOffsetTime(): OffsetTime</code></p> <p>Converts a string to an OffsetTime.</p> <p>The string is assumed to be an ISO-8601 time with the UTC offset in extended format. For example, <code>02:30+01:00</code> or <code>14:40:23Z</code>. The output of OffsetTime.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-offset-time/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time or offset is invalid <p>common</p> <p><code>fun String.toOffsetTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetTime</code></p> <p>Converts a string to an OffsetTime using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p> <p>Any custom parser must be capable of supplying the fields necessary to resolve both a Time and UtcOffset.</p>"},{"location":"api/core/core/io.islandtime/to-offset-time/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time or offset is invalid"},{"location":"api/core/core/io.islandtime/to-time/","title":"toTime","text":"<p>//core/io.islandtime/toTime</p>"},{"location":"api/core/core/io.islandtime/to-time/#totime","title":"toTime","text":"<p>common</p> <p><code>fun String.toTime(): Time</code></p> <p>Converts a string to a Time.</p> <p>The string is assumed to be an ISO-8601 time representation in extended format. For example, <code>05</code>, <code>05:30</code>, <code>05:30:00</code>, or <code>05:30:00.123456789</code>. The output of Time.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-time/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time is invalid <p>common</p> <p><code>fun String.toTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Time</code></p> <p>Converts a string to a Time using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime/to-time/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time is invalid"},{"location":"api/core/core/io.islandtime/to-utc-offset/","title":"toUtcOffset","text":"<p>//core/io.islandtime/toUtcOffset</p>"},{"location":"api/core/core/io.islandtime/to-utc-offset/#toutcoffset","title":"toUtcOffset","text":"<p>common</p> <p><code>fun String.toUtcOffset(): UtcOffset</code></p> <p>Converts a string to a UtcOffset.</p> <p>The string is assumed to be an ISO-8601 UTC offset representation in extended format. For example, <code>Z</code>, <code>+05</code>, or <code>-04:30</code>. The output of UtcOffset.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-utc-offset/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed UTC offset is invalid <p>common</p> <p><code>fun String.toUtcOffset(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): UtcOffset</code></p> <p>Converts a string to a UtcOffset using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime/to-utc-offset/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed UTC offset is invalid"},{"location":"api/core/core/io.islandtime/to-week-date/","title":"toWeekDate","text":"<p>//core/io.islandtime/toWeekDate</p>"},{"location":"api/core/core/io.islandtime/to-week-date/#toweekdate","title":"toWeekDate","text":"<p>common</p> <p><code>inline fun &lt;T&gt; Date.toWeekDate(action: (year: Int, week: Int, day: Int) -&gt; T): T</code></p> <p>Converts this date to an ISO week date representation.</p> <p>common</p> <p><code>inline fun &lt;T&gt; Date.toWeekDate(settings: WeekSettings, action: (year: Int, week: Int, day: Int) -&gt; T): T</code></p> <p>Converts this date to a week date representation using the week definition in settings.</p> <p>common</p> <p><code>inline fun &lt;T&gt; Date.toWeekDate(locale: Locale, action: (year: Int, week: Int, day: Int) -&gt; T): T</code></p> <p>Converts this date to a week date representation using the week definition associated with the provided locale.</p> <p>Keep in mind that the system's calendar settings may differ from that of the default locale on some platforms. To respect the system calendar settings, use WeekSettings.systemDefault instead.</p>"},{"location":"api/core/core/io.islandtime/to-year-month/","title":"toYearMonth","text":"<p>//core/io.islandtime/toYearMonth</p>"},{"location":"api/core/core/io.islandtime/to-year-month/#toyearmonth","title":"toYearMonth","text":"<p>common</p> <p><code>fun Date.toYearMonth(): YearMonth</code></p> <p>Returns this date with the precision reduced to the month.</p> <p>common</p> <p><code>fun DateTime.toYearMonth(): YearMonth</code></p> <p><code>fun OffsetDateTime.toYearMonth(): YearMonth</code></p> <p><code>fun ZonedDateTime.toYearMonth(): YearMonth</code></p> <p>Returns this date-time with the precision reduced to the month.</p> <p>common</p> <p><code>fun String.toYearMonth(): YearMonth</code></p> <p>Converts a string to a YearMonth.</p> <p>The string is assumed to be an ISO-8601 year-month. For example, <code>2010-05</code> or <code>1960-12</code>. The output of YearMonth.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-year-month/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed year-month is invalid <p>common</p> <p><code>fun String.toYearMonth(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): YearMonth</code></p> <p>Converts a string to a YearMonth using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p> <p>The parser must be capable of supplying DateTimeField.YEAR and DateTimeField.MONTH_OF_YEAR.</p>"},{"location":"api/core/core/io.islandtime/to-year-month/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed year-month is invalid"},{"location":"api/core/core/io.islandtime/to-year/","title":"toYear","text":"<p>//core/io.islandtime/toYear</p>"},{"location":"api/core/core/io.islandtime/to-year/#toyear","title":"toYear","text":"<p>common</p> <p><code>fun YearMonth.toYear(): Year</code></p> <p>Returns this year-month with the precision reduced to the year.</p> <p>common</p> <p><code>fun Date.toYear(): Year</code></p> <p>Returns this date with the precision reduced to the year.</p> <p>common</p> <p><code>fun DateTime.toYear(): Year</code></p> <p><code>fun OffsetDateTime.toYear(): Year</code></p> <p><code>fun ZonedDateTime.toYear(): Year</code></p> <p>Returns this date-time with the precision reduced to the year.</p> <p>common</p> <p><code>fun String.toYear(): Year</code></p> <p>Converts a string to a Year.</p> <p>The string is assumed to be an ISO-8601 year. For example, <code>2010</code>, <code>+002010</code>, or <code>Y12345</code>. The output of Year.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-year/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed year is invalid <p>common</p> <p><code>fun String.toYear(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Year</code></p> <p>Converts a string to a Year using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p> <p>The parser must be capable of supplying DateTimeField.YEAR.</p>"},{"location":"api/core/core/io.islandtime/to-year/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed year is invalid"},{"location":"api/core/core/io.islandtime/to-zoned-date-time/","title":"toZonedDateTime","text":"<p>//core/io.islandtime/toZonedDateTime</p>"},{"location":"api/core/core/io.islandtime/to-zoned-date-time/#tozoneddatetime","title":"toZonedDateTime","text":"<p>common</p> <p><code>fun OffsetDateTime.toZonedDateTime(zone: TimeZone, strategy: OffsetConversionStrategy): ZonedDateTime</code></p> <p>Converts this OffsetDateTime to a ZonedDateTime using the specified strategy to adjust it to a valid date, time, and offset in zone.</p> <ul><li>[OffsetConversionStrategy.PRESERVE_INSTANT](-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-i-n-s-t-a-n-t/index.md) - Preserve the instant captured by the date, time, and offset, ignoring the local time.</li><li>[OffsetConversionStrategy.PRESERVE_LOCAL_TIME](-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-l-o-c-a-l_-t-i-m-e/index.md) - Preserve the local date and time in the new time zone, adjusting the offset if needed.</li></ul> <p>Alternatively, you can use asZonedDateTime to convert to a ZonedDateTime with an equivalent fixed-offset zone. However, this comes with the caveat that a fixed-offset zone lacks knowledge of any region and will not respond to daylight savings time changes.</p>"},{"location":"api/core/core/io.islandtime/to-zoned-date-time/#see-also","title":"See also","text":"asZonedDateTime <p>common</p> <p><code>fun String.toZonedDateTime(): ZonedDateTime</code></p> <p>Converts a string to a ZonedDateTime.</p> <p>The string is assumed to be a complete ISO-8601 date and time representation in extended format, optionally including a non-standard region ID. For example, <code>2005-05-06T23:30+01</code> or <code>2005-05-06T23:30-04:00[America/New_York]</code>.</p> <p>The output of ZonedDateTime.toString can be safely parsed using this method.</p>"},{"location":"api/core/core/io.islandtime/to-zoned-date-time/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date-time is invalid <p>common</p> <p><code>fun String.toZonedDateTime(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTime</code></p> <p>Converts a string to a ZonedDateTime using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime/to-zoned-date-time/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed date-time is invalid"},{"location":"api/core/core/io.islandtime/truncated-to/","title":"truncatedTo","text":"<p>//core/io.islandtime/truncatedTo</p>"},{"location":"api/core/core/io.islandtime/truncated-to/#truncatedto","title":"truncatedTo","text":"<p>common</p> <p><code>fun Time.truncatedTo(unit: TimeUnit): Time</code></p> <p><code>fun OffsetTime.truncatedTo(unit: TimeUnit): OffsetTime</code></p> <p>Returns this time, rounded down to match the precision of a given unit.</p> <p>This is equivalent to roundedDownTo.</p> <p>common</p> <p><code>fun DateTime.truncatedTo(unit: TimeUnit): DateTime</code></p> <p><code>fun OffsetDateTime.truncatedTo(unit: TimeUnit): OffsetDateTime</code></p> <p><code>fun ZonedDateTime.truncatedTo(unit: TimeUnit): ZonedDateTime</code></p> <p>Returns this date-time, rounded down to match the precision of a given unit.</p> <p>This is equivalent to roundedDownTo.</p> <p>common</p> <p><code>fun Instant.truncatedTo(unit: TimeUnit): Instant</code></p> <p>Returns this instant, rounded down to match the precision of a given unit.</p> <p>This is equivalent to roundedDownTo.</p>"},{"location":"api/core/core/io.islandtime/week-based-year/","title":"weekBasedYear","text":"<p>//core/io.islandtime/weekBasedYear</p>"},{"location":"api/core/core/io.islandtime/week-based-year/#weekbasedyear","title":"weekBasedYear","text":"<p>common</p> <p><code>fun Date.weekBasedYear(settings: WeekSettings): Int</code></p> <p><code>fun DateTime.weekBasedYear(settings: WeekSettings): Int</code></p> <p><code>fun OffsetDateTime.weekBasedYear(settings: WeekSettings): Int</code></p> <p><code>fun ZonedDateTime.weekBasedYear(settings: WeekSettings): Int</code></p> <p>The week-based year, calculated using the week definition in settings. This value differs from the regular ISO year when the week number falls in the preceding or following year.</p>"},{"location":"api/core/core/io.islandtime/week-based-year/#see-also","title":"See also","text":"weekOfWeekBasedYear <p>common</p> <p><code>fun Date.weekBasedYear(locale: Locale): Int</code></p> <p><code>fun DateTime.weekBasedYear(locale: Locale): Int</code></p> <p><code>fun OffsetDateTime.weekBasedYear(locale: Locale): Int</code></p> <p><code>fun ZonedDateTime.weekBasedYear(locale: Locale): Int</code></p> <p>The week-based year, calculated using the week definition associated with the provided locale. This value differs from the regular ISO year when the week number falls in the preceding or following year.</p> <p>Keep in mind that the system's calendar settings may differ from that of the default locale on some platforms. To respect the system calendar settings, use WeekSettings.systemDefault instead.</p>"},{"location":"api/core/core/io.islandtime/week-based-year/#see-also_1","title":"See also","text":"weekOfWeekBasedYear <p>common</p> <p><code>val Date.weekBasedYear: Int</code></p> <p><code>val DateTime.weekBasedYear: Int</code></p> <p><code>val OffsetDateTime.weekBasedYear: Int</code></p> <p><code>val ZonedDateTime.weekBasedYear: Int</code></p> <p>The week-based year used in the ISO week date system. This value differs from the regular ISO year when the week number falls in the preceding or following year.</p>"},{"location":"api/core/core/io.islandtime/week-based-year/#see-also_2","title":"See also","text":"weekOfWeekBasedYear"},{"location":"api/core/core/io.islandtime/week-of-month/","title":"weekOfMonth","text":"<p>//core/io.islandtime/weekOfMonth</p>"},{"location":"api/core/core/io.islandtime/week-of-month/#weekofmonth","title":"weekOfMonth","text":"<p>common</p> <p><code>fun Date.weekOfMonth(settings: WeekSettings): Int</code></p> <p><code>fun DateTime.weekOfMonth(settings: WeekSettings): Int</code></p> <p><code>fun OffsetDateTime.weekOfMonth(settings: WeekSettings): Int</code></p> <p><code>fun ZonedDateTime.weekOfMonth(settings: WeekSettings): Int</code></p> <p>The week of the month, from 0-6, calculated using the week definition in settings.</p> <p>common</p> <p><code>fun Date.weekOfMonth(locale: Locale): Int</code></p> <p><code>fun DateTime.weekOfMonth(locale: Locale): Int</code></p> <p><code>fun OffsetDateTime.weekOfMonth(locale: Locale): Int</code></p> <p><code>fun ZonedDateTime.weekOfMonth(locale: Locale): Int</code></p> <p>The week of the month, from 0-6, calculated using the default week definition associated with the provided locale.</p> <p>Keep in mind that the system's calendar settings may differ from that of the default locale on some platforms. To respect the system calendar settings, use WeekSettings.systemDefault instead.</p> <p>common</p> <p><code>val Date.weekOfMonth: Int</code></p> <p><code>val DateTime.weekOfMonth: Int</code></p> <p><code>val OffsetDateTime.weekOfMonth: Int</code></p> <p><code>val ZonedDateTime.weekOfMonth: Int</code></p> <p>The week of the month, from 0-6, calculated using the ISO week definition.</p>"},{"location":"api/core/core/io.islandtime/week-of-week-based-year/","title":"weekOfWeekBasedYear","text":"<p>//core/io.islandtime/weekOfWeekBasedYear</p>"},{"location":"api/core/core/io.islandtime/week-of-week-based-year/#weekofweekbasedyear","title":"weekOfWeekBasedYear","text":"<p>common</p> <p><code>fun Date.weekOfWeekBasedYear(settings: WeekSettings): Int</code></p> <p><code>fun DateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code></p> <p><code>fun OffsetDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code></p> <p><code>fun ZonedDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code></p> <p>The week number of the week-based year, calculated using the week definition in settings.</p>"},{"location":"api/core/core/io.islandtime/week-of-week-based-year/#see-also","title":"See also","text":"weekBasedYear <p>common</p> <p><code>fun Date.weekOfWeekBasedYear(locale: Locale): Int</code></p> <p><code>fun DateTime.weekOfWeekBasedYear(locale: Locale): Int</code></p> <p><code>fun OffsetDateTime.weekOfWeekBasedYear(locale: Locale): Int</code></p> <p><code>fun ZonedDateTime.weekOfWeekBasedYear(locale: Locale): Int</code></p> <p>The week number of the week-based year, calculated using the week definition associated with the provided locale.</p> <p>Keep in mind that the system's calendar settings may differ from that of the default locale on some platforms. To respect the system calendar settings, use WeekSettings.systemDefault instead.</p>"},{"location":"api/core/core/io.islandtime/week-of-week-based-year/#see-also_1","title":"See also","text":"weekBasedYear <p>common</p> <p><code>val Date.weekOfWeekBasedYear: Int</code></p> <p><code>val DateTime.weekOfWeekBasedYear: Int</code></p> <p><code>val OffsetDateTime.weekOfWeekBasedYear: Int</code></p> <p><code>val ZonedDateTime.weekOfWeekBasedYear: Int</code></p> <p>The week number used in the ISO week date system.</p>"},{"location":"api/core/core/io.islandtime/week-of-week-based-year/#see-also_2","title":"See also","text":"weekBasedYear"},{"location":"api/core/core/io.islandtime/week-of-year/","title":"weekOfYear","text":"<p>//core/io.islandtime/weekOfYear</p>"},{"location":"api/core/core/io.islandtime/week-of-year/#weekofyear","title":"weekOfYear","text":"<p>common</p> <p><code>fun Date.weekOfYear(settings: WeekSettings): Int</code></p> <p><code>fun DateTime.weekOfYear(settings: WeekSettings): Int</code></p> <p><code>fun OffsetDateTime.weekOfYear(settings: WeekSettings): Int</code></p> <p><code>fun ZonedDateTime.weekOfYear(settings: WeekSettings): Int</code></p> <p>The week of the year, calculated using the week definition in settings. If the week number is associated with the preceding year, <code>0</code> will be returned.</p> <p>To obtain the week number of the week-based year, use weekOfWeekBasedYear instead.</p>"},{"location":"api/core/core/io.islandtime/week-of-year/#see-also","title":"See also","text":"weekOfWeekBasedYear <p>common</p> <p><code>fun Date.weekOfYear(locale: Locale): Int</code></p> <p><code>fun DateTime.weekOfYear(locale: Locale): Int</code></p> <p><code>fun OffsetDateTime.weekOfYear(locale: Locale): Int</code></p> <p><code>fun ZonedDateTime.weekOfYear(locale: Locale): Int</code></p> <p>The week of the year, calculated using the week definition associated with the provided locale. If the week number is associated with the preceding year, <code>0</code> will be returned.</p> <p>To obtain the week number of the week-based year, use weekOfWeekBasedYear instead.</p> <p>Keep in mind that the system's calendar settings may differ from that of the default locale on some platforms. To respect the system calendar settings, use WeekSettings.systemDefault instead.</p>"},{"location":"api/core/core/io.islandtime/week-of-year/#see-also_1","title":"See also","text":"weekOfWeekBasedYear <p>common</p> <p><code>val Date.weekOfYear: Int</code></p> <p><code>val DateTime.weekOfYear: Int</code></p> <p><code>val OffsetDateTime.weekOfYear: Int</code></p> <p><code>val ZonedDateTime.weekOfYear: Int</code></p> <p>The week of the year, calculated using the ISO week definition. If the week number is associated with the preceding year, <code>0</code> will be returned.</p> <p>To obtain the week number used in the ISO week date system, use weekOfWeekBasedYear instead.</p>"},{"location":"api/core/core/io.islandtime/week-of-year/#see-also_2","title":"See also","text":"weekOfWeekBasedYear"},{"location":"api/core/core/io.islandtime/week/","title":"week","text":"<p>//core/io.islandtime/week</p>"},{"location":"api/core/core/io.islandtime/week/#week","title":"week","text":"<p>common</p> <p><code>fun Date.week(settings: WeekSettings): DateRange</code></p> <p>The range defining the week that this date falls within. The first day of the week will be determined by the provided settings.</p> <p>common</p> <p><code>fun Date.week(locale: Locale): DateRange</code></p> <p>The range defining the week that this date falls within. The first day of the week will be the default associated with the provided locale.</p> <p>Keep in mind that the system's calendar settings may differ from that of the default locale on some platforms. To respect the system calendar settings, use WeekSettings.systemDefault instead.</p> <p>common</p> <p><code>fun DateTime.week(settings: WeekSettings): DateTimeInterval</code></p> <p><code>fun OffsetDateTime.week(settings: WeekSettings): OffsetDateTimeInterval</code></p> <p><code>fun ZonedDateTime.week(settings: WeekSettings): ZonedDateTimeInterval</code></p> <p>The interval defining the week that this date-time falls within. The first day of the week will be determined by the provided settings.</p> <p>common</p> <p><code>fun DateTime.week(locale: Locale): DateTimeInterval</code></p> <p><code>fun OffsetDateTime.week(locale: Locale): OffsetDateTimeInterval</code></p> <p><code>fun ZonedDateTime.week(locale: Locale): ZonedDateTimeInterval</code></p> <p>The interval defining the week that this date-time falls within. The first day of the week will be the default associated with the provided locale.</p> <p>Keep in mind that the system's calendar settings may differ from that of the default locale on some platforms. To respect the system calendar settings, use WeekSettings.systemDefault instead.</p> <p>common</p> <p><code>val Date.week: DateRange</code></p> <p>The range defining the ISO week that this date falls within.</p> <p>The ISO week starts on Monday and ends on Sunday.</p> <p>common</p> <p><code>val DateTime.week: DateTimeInterval</code></p> <p><code>val OffsetDateTime.week: OffsetDateTimeInterval</code></p> <p><code>val ZonedDateTime.week: ZonedDateTimeInterval</code></p> <p>The interval defining the ISO week that this date-time falls within.</p> <p>The ISO week starts on Monday and ends on Sunday.</p>"},{"location":"api/core/core/io.islandtime/-date/","title":"Date","text":"<p>//core/io.islandtime/Date</p>"},{"location":"api/core/core/io.islandtime/-date/#date","title":"Date","text":"<p><code>@Serializable(with = DateIsoSerializer::class) <p>class Date(val year: Int, val month: Month, day: Int) : Comparable&lt;Date&gt; </p> <p>A date in an ambiguous region.</p>"},{"location":"api/core/core/io.islandtime/-date/#parameters","title":"Parameters","text":"<p>common</p> year the year month the month day the day of the month"},{"location":"api/core/core/io.islandtime/-date/#throws","title":"Throws","text":"DateTimeException if the year or day is invalid"},{"location":"api/core/core/io.islandtime/-date/#constructors","title":"Constructors","text":"Date <p>common</p><code>constructor(year: Int, monthNumber: Int, day: Int)</code>Creates a Date from a year, ISO month number, and day of month.<code>constructor(year: Int, month: Month, day: Int)</code>Creates a Date from a year, month, and day of month."},{"location":"api/core/core/io.islandtime/-date/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-date/#properties","title":"Properties","text":"Name Summary dayOfMonth <p>common</p><code>val dayOfMonth: Int</code>The day of the month. dayOfUnixEpoch <p>common</p><code>val dayOfUnixEpoch: Long</code>The day of the Unix epoch. dayOfWeek <p>common</p><code>val dayOfWeek: DayOfWeek</code>The day of the week. dayOfYear <p>common</p><code>val dayOfYear: Int</code>The day of the year. daysSinceUnixEpoch <p>common</p><code>val daysSinceUnixEpoch: Days</code>The number of days away from the Unix epoch (<code>1970-01-01T00:00Z</code>) that this date falls. endOfDay <p>common</p><code>val Date.endOfDay: DateTime</code>The DateTime at the last representable instant of the day. Daylight savings transitions are not taken into account, so the returned date-time may not necessarily exist in all time zones. endOfMonth <p>common</p><code>val Date.endOfMonth: Date</code>The date at the end of the month that this date falls in. endOfWeek <p>common</p><code>val Date.endOfWeek: Date</code>The date at the end of the ISO week that this date falls in. endOfYear <p>common</p><code>val Date.endOfYear: Date</code>The date at the end of the year that this date falls in. isInLeapYear <p>common</p><code>val Date.isInLeapYear: Boolean</code>Checks if this date falls within a leap year. isLeapDay <p>common</p><code>val Date.isLeapDay: Boolean</code>Checks if this date is February 29. lengthOfMonth <p>common</p><code>val Date.lengthOfMonth: Days</code>The length of this date's month in days. lengthOfWeekBasedYear <p>common</p><code>val Date.lengthOfWeekBasedYear: Weeks</code>The length of the ISO week-based year that this date falls in, either 52 or 53 weeks. lengthOfYear <p>common</p><code>val Date.lengthOfYear: Days</code>The length of this date's year in days. month <p>common</p><code>val month: Month</code>The month of the year. monthNumber <p>common</p><code>val monthNumber: Int</code>The ISO month number, from 1-12. startOfDay <p>common</p><code>val Date.startOfDay: DateTime</code>The DateTime at the start of the day. Daylight savings transitions are not taken into account, so the returned date-time may not necessarily exist in all time zones. startOfMonth <p>common</p><code>val Date.startOfMonth: Date</code>The date at the start of the month that this date falls in. startOfWeek <p>common</p><code>val Date.startOfWeek: Date</code>The date at the start of the ISO week that this date falls in. startOfYear <p>common</p><code>val Date.startOfYear: Date</code>The date at the start of the year that this date falls in. week <p>common</p><code>val Date.week: DateRange</code>The range defining the ISO week that this date falls within. weekBasedYear <p>common</p><code>val Date.weekBasedYear: Int</code>The week-based year used in the ISO week date system. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>val Date.weekOfMonth: Int</code>The week of the month, from 0-6, calculated using the ISO week definition. weekOfWeekBasedYear <p>common</p><code>val Date.weekOfWeekBasedYear: Int</code>The week number used in the ISO week date system. weekOfYear <p>common</p><code>val Date.weekOfYear: Int</code>The week of the year, calculated using the ISO week definition. If the week number is associated with the preceding year, <code>0</code> will be returned. year <p>common</p><code>val year: Int</code>The year."},{"location":"api/core/core/io.islandtime/-date/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun Date.at(offsetTime: OffsetTime): OffsetDateTime</code>Combines a local date with a time and UTC offset to create an OffsetDateTime.<p>common</p><code>infix fun Date.at(time: Time): DateTime</code>Combines a Date with a Time to create a DateTime. atTime <p>common</p><code>fun Date.atTime(hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0): DateTime</code>Combines a Date with a time to create a DateTime. compareTo <p>common</p><code>open operator override fun compareTo(other: Date): Int</code> component1 <p>common</p><code>operator fun component1(): Int</code> component2 <p>common</p><code>operator fun component2(): Month</code> component3 <p>common</p><code>operator fun component3(): Int</code> copy <p>common</p><code>fun copy(year: Int = this.year, dayOfYear: Int): Date</code><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.day): Date</code><code>fun copy(year: Int = this.year, monthNumber: Int, dayOfMonth: Int = this.day): Date</code>Returns a copy of this date with the values of any individual components replaced by the new values specified. downTo <p>common</p><code>infix fun Date.downTo(to: Date): DateDayProgression</code>Creates a progression of dates in descending order. endOfDayAt <p>common</p><code>fun Date.endOfDayAt(zone: TimeZone): ZonedDateTime</code>The ZonedDateTime at the last representable instant of the day in zone, taking into account any daylight savings transitions. endOfWeek <p>common</p><code>fun Date.endOfWeek(settings: WeekSettings): Date</code>The date at the end of the week that this date falls in. The first day of the week will be determined by settings. The first day of the week will be determined by the system settings. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.<p>common</p><code>fun Date.endOfWeek(locale: Locale): Date</code>The date at the end of the week that this date falls in. The first day of the week will be determined by locale. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> minus <p>common</p><code>operator fun minus(centuries: Centuries): Date</code>Returns this date with centuries subtracted from it.<p>common</p><code>operator fun minus(days: Days): Date</code>Returns this date with days subtracted from it.<p>common</p><code>operator fun minus(decades: Decades): Date</code>Returns this date with decades subtracted from it.<p>common</p><code>operator fun minus(months: Months): Date</code>Returns this date with months subtracted from it.<p>common</p><code>operator fun minus(period: Period): Date</code>Returns this date with period subtracted from it.<p>common</p><code>operator fun minus(weeks: Weeks): Date</code>Returns this date with weeks subtracted from it.<p>common</p><code>operator fun minus(years: Years): Date</code>Returns this date with years subtracted from it. next <p>common</p><code>fun Date.next(dayOfWeek: DayOfWeek): Date</code>The next date after this one that falls on dayOfWeek. nextOrSame <p>common</p><code>fun Date.nextOrSame(dayOfWeek: DayOfWeek): Date</code>The next date that falls on dayOfWeek, or this date if it falls on the same day. plus <p>common</p><code>operator fun plus(centuries: Centuries): Date</code>Returns this date with centuries added to it.<p>common</p><code>operator fun plus(days: Days): Date</code>Returns this date with days added to it.<p>common</p><code>operator fun plus(decades: Decades): Date</code>Returns this date with decades added to it.<p>common</p><code>operator fun plus(months: Months): Date</code>Returns this date with months added to it.<p>common</p><code>operator fun plus(period: Period): Date</code>Returns this date with period added to it.<p>common</p><code>operator fun plus(weeks: Weeks): Date</code>Returns this date with weeks added to it.<p>common</p><code>operator fun plus(years: Years): Date</code>Returns this date with years added to it. previous <p>common</p><code>fun Date.previous(dayOfWeek: DayOfWeek): Date</code>The last date before this one that falls on dayOfWeek. previousOrSame <p>common</p><code>fun Date.previousOrSame(dayOfWeek: DayOfWeek): Date</code>The previous date that falls on dayOfWeek, or this date if it falls on the same day. rangeTo <p>common</p><code>operator fun rangeTo(other: Date): DateRange</code> startOfDayAt <p>common</p><code>fun Date.startOfDayAt(zone: TimeZone): ZonedDateTime</code>The ZonedDateTime at the start of the day in zone, taking into account any daylight savings transitions. startOfWeek <p>common</p><code>fun Date.startOfWeek(settings: WeekSettings): Date</code>The date at the start of the week that this date falls in. The first day of the week will be determined by settings.<p>common</p><code>fun Date.startOfWeek(locale: Locale): Date</code>The date at the start of the week that this date falls in. The first day of the week will be determined by locale. toJavaLocalDate <p>jvm</p><code>fun Date.toJavaLocalDate(): LocalDate</code>Converts this date to an equivalent Java <code>LocalDate</code>. toNSDateComponents <p>darwin</p><code>fun Date.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this date to an equivalent <code>NSDateComponents</code> object. toString <p>common</p><code>open override fun toString(): String</code>Converts this date to a string in ISO-8601 extended format using the \"calendar date\" form. For example, <code>2012-04-15</code>. toWeekDate <p>common</p><code>inline fun &lt;T&gt; Date.toWeekDate(action: (year: Int, week: Int, day: Int) -&gt; T): T</code>Converts this date to an ISO week date representation.<p>common</p><code>inline fun &lt;T&gt; Date.toWeekDate(settings: WeekSettings, action: (year: Int, week: Int, day: Int) -&gt; T): T</code>Converts this date to a week date representation using the week definition in settings.<p>common</p><code>inline fun &lt;T&gt; Date.toWeekDate(locale: Locale, action: (year: Int, week: Int, day: Int) -&gt; T): T</code>Converts this date to a week date representation using the week definition associated with the provided locale. toYear <p>common</p><code>fun Date.toYear(): Year</code>Returns this date with the precision reduced to the year. toYearMonth <p>common</p><code>fun Date.toYearMonth(): YearMonth</code>Returns this date with the precision reduced to the month. until <p>common</p><code>infix fun Date.until(to: Date): DateRange</code>Creates a DateRange containing all the days from this date up to, but not including to. week <p>common</p><code>fun Date.week(settings: WeekSettings): DateRange</code>The range defining the week that this date falls within. The first day of the week will be determined by the provided settings.<p>common</p><code>fun Date.week(locale: Locale): DateRange</code>The range defining the week that this date falls within. The first day of the week will be the default associated with the provided locale. weekBasedYear <p>common</p><code>fun Date.weekBasedYear(settings: WeekSettings): Int</code>The week-based year, calculated using the week definition in settings. This value differs from the regular ISO year when the week number falls in the preceding or following year.<p>common</p><code>fun Date.weekBasedYear(locale: Locale): Int</code>The week-based year, calculated using the week definition associated with the provided locale. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>fun Date.weekOfMonth(settings: WeekSettings): Int</code>The week of the month, from 0-6, calculated using the week definition in settings.<p>common</p><code>fun Date.weekOfMonth(locale: Locale): Int</code>The week of the month, from 0-6, calculated using the default week definition associated with the provided locale. weekOfWeekBasedYear <p>common</p><code>fun Date.weekOfWeekBasedYear(settings: WeekSettings): Int</code>The week number of the week-based year, calculated using the week definition in settings.<p>common</p><code>fun Date.weekOfWeekBasedYear(locale: Locale): Int</code>The week number of the week-based year, calculated using the week definition associated with the provided locale. weekOfYear <p>common</p><code>fun Date.weekOfYear(settings: WeekSettings): Int</code>The week of the year, calculated using the week definition in settings. If the week number is associated with the preceding year, <code>0</code> will be returned.<p>common</p><code>fun Date.weekOfYear(locale: Locale): Int</code>The week of the year, calculated using the week definition associated with the provided locale. If the week number is associated with the preceding year, <code>0</code> will be returned."},{"location":"api/core/core/io.islandtime/-date/-date/","title":"Date","text":"<p>//core/io.islandtime/Date/Date</p>"},{"location":"api/core/core/io.islandtime/-date/-date/#date","title":"Date","text":"<p>common</p> <p><code>constructor(year: Int, monthNumber: Int, day: Int)</code></p> <p>Creates a Date from a year, ISO month number, and day of month.</p>"},{"location":"api/core/core/io.islandtime/-date/-date/#parameters","title":"Parameters","text":"<p>common</p> year the year monthNumber the ISO month number, from 1-12 day the day of the month"},{"location":"api/core/core/io.islandtime/-date/-date/#throws","title":"Throws","text":"DateTimeException if the year, month, or day is invalid <p>common</p> <p><code>constructor(year: Int, month: Month, day: Int)</code></p> <p>Creates a Date from a year, month, and day of month.</p>"},{"location":"api/core/core/io.islandtime/-date/-date/#parameters_1","title":"Parameters","text":"<p>common</p> year the year month the month day the day of the month"},{"location":"api/core/core/io.islandtime/-date/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/Date/compareTo</p>"},{"location":"api/core/core/io.islandtime/-date/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Date): Int</code></p>"},{"location":"api/core/core/io.islandtime/-date/component1/","title":"component1","text":"<p>//core/io.islandtime/Date/component1</p>"},{"location":"api/core/core/io.islandtime/-date/component1/#component1","title":"component1","text":"<p>common</p> <p><code>operator fun component1(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-date/component2/","title":"component2","text":"<p>//core/io.islandtime/Date/component2</p>"},{"location":"api/core/core/io.islandtime/-date/component2/#component2","title":"component2","text":"<p>common</p> <p><code>operator fun component2(): Month</code></p>"},{"location":"api/core/core/io.islandtime/-date/component3/","title":"component3","text":"<p>//core/io.islandtime/Date/component3</p>"},{"location":"api/core/core/io.islandtime/-date/component3/#component3","title":"component3","text":"<p>common</p> <p><code>operator fun component3(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-date/copy/","title":"copy","text":"<p>//core/io.islandtime/Date/copy</p>"},{"location":"api/core/core/io.islandtime/-date/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.day): Date</code></p> <p><code>fun copy(year: Int = this.year, monthNumber: Int, dayOfMonth: Int = this.day): Date</code></p> <p><code>fun copy(year: Int = this.year, dayOfYear: Int): Date</code></p> <p>Returns a copy of this date with the values of any individual components replaced by the new values specified.</p>"},{"location":"api/core/core/io.islandtime/-date/copy/#throws","title":"Throws","text":"DateTimeException if the resulting date is invalid"},{"location":"api/core/core/io.islandtime/-date/day-of-month/","title":"dayOfMonth","text":"<p>//core/io.islandtime/Date/dayOfMonth</p>"},{"location":"api/core/core/io.islandtime/-date/day-of-month/#dayofmonth","title":"dayOfMonth","text":"<p>common</p> <p><code>val dayOfMonth: Int</code></p> <p>The day of the month.</p>"},{"location":"api/core/core/io.islandtime/-date/day-of-unix-epoch/","title":"dayOfUnixEpoch","text":"<p>//core/io.islandtime/Date/dayOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date/day-of-unix-epoch/#dayofunixepoch","title":"dayOfUnixEpoch","text":"<p>common</p> <p><code>val dayOfUnixEpoch: Long</code></p> <p>The day of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-date/day-of-week/","title":"dayOfWeek","text":"<p>//core/io.islandtime/Date/dayOfWeek</p>"},{"location":"api/core/core/io.islandtime/-date/day-of-week/#dayofweek","title":"dayOfWeek","text":"<p>common</p> <p><code>val dayOfWeek: DayOfWeek</code></p> <p>The day of the week.</p>"},{"location":"api/core/core/io.islandtime/-date/day-of-year/","title":"dayOfYear","text":"<p>//core/io.islandtime/Date/dayOfYear</p>"},{"location":"api/core/core/io.islandtime/-date/day-of-year/#dayofyear","title":"dayOfYear","text":"<p>common</p> <p><code>val dayOfYear: Int</code></p> <p>The day of the year.</p>"},{"location":"api/core/core/io.islandtime/-date/days-since-unix-epoch/","title":"daysSinceUnixEpoch","text":"<p>//core/io.islandtime/Date/daysSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date/days-since-unix-epoch/#dayssinceunixepoch","title":"daysSinceUnixEpoch","text":"<p>common</p> <p><code>val daysSinceUnixEpoch: Days</code></p> <p>The number of days away from the Unix epoch (<code>1970-01-01T00:00Z</code>) that this date falls.</p>"},{"location":"api/core/core/io.islandtime/-date/equals/","title":"equals","text":"<p>//core/io.islandtime/Date/equals</p>"},{"location":"api/core/core/io.islandtime/-date/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-date/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/Date/hashCode</p>"},{"location":"api/core/core/io.islandtime/-date/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-date/minus/","title":"minus","text":"<p>//core/io.islandtime/Date/minus</p>"},{"location":"api/core/core/io.islandtime/-date/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(period: Period): Date</code></p> <p>Returns this date with period subtracted from it.</p> <p>Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun minus(centuries: Centuries): Date</code></p> <p>Returns this date with centuries subtracted from it.</p> <p>common</p> <p><code>operator fun minus(decades: Decades): Date</code></p> <p>Returns this date with decades subtracted from it.</p> <p>common</p> <p><code>operator fun minus(years: Years): Date</code></p> <p>Returns this date with years subtracted from it.</p> <p>common</p> <p><code>operator fun minus(months: Months): Date</code></p> <p>Returns this date with months subtracted from it.</p> <p>common</p> <p><code>operator fun minus(weeks: Weeks): Date</code></p> <p>Returns this date with weeks subtracted from it.</p> <p>common</p> <p><code>operator fun minus(days: Days): Date</code></p> <p>Returns this date with days subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-date/month-number/","title":"monthNumber","text":"<p>//core/io.islandtime/Date/monthNumber</p>"},{"location":"api/core/core/io.islandtime/-date/month-number/#monthnumber","title":"monthNumber","text":"<p>common</p> <p><code>val monthNumber: Int</code></p> <p>The ISO month number, from 1-12.</p>"},{"location":"api/core/core/io.islandtime/-date/month/","title":"month","text":"<p>//core/io.islandtime/Date/month</p>"},{"location":"api/core/core/io.islandtime/-date/month/#month","title":"month","text":"<p>common</p> <p><code>val month: Month</code></p> <p>The month of the year.</p>"},{"location":"api/core/core/io.islandtime/-date/plus/","title":"plus","text":"<p>//core/io.islandtime/Date/plus</p>"},{"location":"api/core/core/io.islandtime/-date/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(period: Period): Date</code></p> <p>Returns this date with period added to it.</p> <p>Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun plus(centuries: Centuries): Date</code></p> <p>Returns this date with centuries added to it.</p> <p>common</p> <p><code>operator fun plus(decades: Decades): Date</code></p> <p>Returns this date with decades added to it.</p> <p>common</p> <p><code>operator fun plus(years: Years): Date</code></p> <p>Returns this date with years added to it.</p> <p>common</p> <p><code>operator fun plus(months: Months): Date</code></p> <p>Returns this date with months added to it.</p> <p>common</p> <p><code>operator fun plus(weeks: Weeks): Date</code></p> <p>Returns this date with weeks added to it.</p> <p>common</p> <p><code>operator fun plus(days: Days): Date</code></p> <p>Returns this date with days added to it.</p>"},{"location":"api/core/core/io.islandtime/-date/range-to/","title":"rangeTo","text":"<p>//core/io.islandtime/Date/rangeTo</p>"},{"location":"api/core/core/io.islandtime/-date/range-to/#rangeto","title":"rangeTo","text":"<p>common</p> <p><code>operator fun rangeTo(other: Date): DateRange</code></p>"},{"location":"api/core/core/io.islandtime/-date/to-string/","title":"toString","text":"<p>//core/io.islandtime/Date/toString</p>"},{"location":"api/core/core/io.islandtime/-date/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this date to a string in ISO-8601 extended format using the \"calendar date\" form. For example, <code>2012-04-15</code>.</p>"},{"location":"api/core/core/io.islandtime/-date/year/","title":"year","text":"<p>//core/io.islandtime/Date/year</p>"},{"location":"api/core/core/io.islandtime/-date/year/#year","title":"year","text":"<p>common</p> <p><code>val year: Int</code></p> <p>The year.</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/","title":"Companion","text":"<p>//core/io.islandtime/Date/Companion</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-date/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Date</code>The latest supported Date, which can be used as a \"far future\" sentinel. MIN <p>common</p><code>val MIN: Date</code>The earliest supported Date, which can be used as a \"far past\" sentinel."},{"location":"api/core/core/io.islandtime/-date/-companion/#functions","title":"Functions","text":"Name Summary fromDayOfUnixEpoch <p>common</p><code>fun fromDayOfUnixEpoch(day: Long): Date</code>Creates a Date from the day of the Unix epoch. fromDaysSinceUnixEpoch <p>common</p><code>fun fromDaysSinceUnixEpoch(days: Days): Date</code>Creates a Date from a duration of days relative to the Unix epoch of 1970-01-01. fromWeekDate <p>common</p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int): Date</code>Creates a Date from an ISO week date.<p>common</p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int, settings: WeekSettings): Date</code>Creates a Date from a week date representation using the week definition in settings.<p>common</p><code>fun Date.Companion.fromWeekDate(year: Int, week: Int, day: Int, locale: Locale): Date</code>Creates a Date from a week date representation using the week definition associated with the provided locale. now <p>common</p><code>fun Date.Companion.now(): Date</code>Gets the current Date from the system clock.<p>common</p><code>fun Date.Companion.now(clock: Clock): Date</code>Gets the current Date from the provided clock.<p>jvm</p><code>fun Date.Companion.now(clock: Clock): Date</code>Gets the current Date from the provided clock."},{"location":"api/core/core/io.islandtime/-date/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/Date/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Date</code></p> <p>The latest supported Date, which can be used as a \"far future\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/Date/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Date</code></p> <p>The earliest supported Date, which can be used as a \"far past\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/from-day-of-unix-epoch/","title":"fromDayOfUnixEpoch","text":"<p>//core/io.islandtime/Date/Companion/fromDayOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/from-day-of-unix-epoch/#fromdayofunixepoch","title":"fromDayOfUnixEpoch","text":"<p>common</p> <p><code>fun fromDayOfUnixEpoch(day: Long): Date</code></p> <p>Creates a Date from the day of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/from-day-of-unix-epoch/#parameters","title":"Parameters","text":"<p>common</p> day the day of the Unix epoch"},{"location":"api/core/core/io.islandtime/-date/-companion/from-day-of-unix-epoch/#throws","title":"Throws","text":"DateTimeException if outside the supported date range"},{"location":"api/core/core/io.islandtime/-date/-companion/from-days-since-unix-epoch/","title":"fromDaysSinceUnixEpoch","text":"<p>//core/io.islandtime/Date/Companion/fromDaysSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/from-days-since-unix-epoch/#fromdayssinceunixepoch","title":"fromDaysSinceUnixEpoch","text":"<p>common</p> <p><code>fun fromDaysSinceUnixEpoch(days: Days): Date</code></p> <p>Creates a Date from a duration of days relative to the Unix epoch of 1970-01-01.</p>"},{"location":"api/core/core/io.islandtime/-date/-companion/from-days-since-unix-epoch/#parameters","title":"Parameters","text":"<p>common</p> days the number of days relative to the Unix epoch"},{"location":"api/core/core/io.islandtime/-date/-companion/from-days-since-unix-epoch/#throws","title":"Throws","text":"DateTimeException if outside the supported date range"},{"location":"api/core/core/io.islandtime/-date-time/","title":"DateTime","text":"<p>//core/io.islandtime/DateTime</p>"},{"location":"api/core/core/io.islandtime/-date-time/#datetime","title":"DateTime","text":"<p><code>@Serializable(with = DateTimeIsoSerializer::class) <p>class DateTime(val date: Date, val time: Time) : Comparable&lt;DateTime&gt; </p> <p>A date and time of day in an ambiguous region.</p>"},{"location":"api/core/core/io.islandtime/-date-time/#parameters","title":"Parameters","text":"<p>common</p> date the date time the time"},{"location":"api/core/core/io.islandtime/-date-time/#constructors","title":"Constructors","text":"DateTime <p>common</p><code>constructor(year: Int, month: Month, day: Int, hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0)</code>Creates a DateTime.<code>constructor(year: Int, monthNumber: Int, day: Int, hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0)</code>Creates a DateTime.<code>constructor(year: Int, dayOfYear: Int, hour: Int, minute: Int, second: Int, nanosecond: Int)</code>Creates a DateTime.<code>constructor(date: Date, time: Time)</code>Creates a DateTime by combining a Date and Time."},{"location":"api/core/core/io.islandtime/-date-time/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-date-time/#properties","title":"Properties","text":"Name Summary additionalNanosecondsSinceUnixEpoch <p>common</p><code>val additionalNanosecondsSinceUnixEpoch: Nanoseconds</code>The number of additional nanoseconds that should be applied on top of the number of seconds since the Unix epoch returned by secondsSinceUnixEpochAt. date <p>common</p><code>val date: Date</code>The date. dayOfMonth <p>common</p><code>val dayOfMonth: Int</code>The day of the month. dayOfWeek <p>common</p><code>val dayOfWeek: DayOfWeek</code>The day of the week. dayOfYear <p>common</p><code>val dayOfYear: Int</code>The day of the year. endOfMonth <p>common</p><code>val DateTime.endOfMonth: DateTime</code>The date-time at the last representable instant of the month that this date-time falls in. endOfWeek <p>common</p><code>val DateTime.endOfWeek: DateTime</code>The date-time at the last representable instant of the ISO week that this date-time falls in. endOfYear <p>common</p><code>val DateTime.endOfYear: DateTime</code>The date-time at the last representable instant of the year that this date-time falls in. hour <p>common</p><code>val hour: Int</code>The hour of the day. isInLeapDay <p>common</p><code>val DateTime.isInLeapDay: Boolean</code>Checks if this date-time falls within February 29. isInLeapYear <p>common</p><code>val DateTime.isInLeapYear: Boolean</code>Checks if this date-time falls within a leap year. lengthOfMonth <p>common</p><code>val DateTime.lengthOfMonth: Days</code>The length of this date-time's month in days. lengthOfWeekBasedYear <p>common</p><code>val DateTime.lengthOfWeekBasedYear: Weeks</code>The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks. lengthOfYear <p>common</p><code>val DateTime.lengthOfYear: Days</code>The length of this date-time's year in days. minute <p>common</p><code>val minute: Int</code>The minute of the hour. month <p>common</p><code>val month: Month</code>The month of the year. monthNumber <p>common</p><code>val monthNumber: Int</code>The ISO month number, from 1-12. nanosecond <p>common</p><code>val nanosecond: Int</code>The nanosecond of the second. second <p>common</p><code>val second: Int</code>The second of the minute. startOfMonth <p>common</p><code>val DateTime.startOfMonth: DateTime</code>The date-time at the first instant of the month that this date-time falls in. startOfWeek <p>common</p><code>val DateTime.startOfWeek: DateTime</code>The date-time at the first instant of the ISO week that this date-time falls in. startOfYear <p>common</p><code>val DateTime.startOfYear: DateTime</code>The date-time at the first instant of the year that this date-time falls in. time <p>common</p><code>val time: Time</code>The time of day. week <p>common</p><code>val DateTime.week: DateTimeInterval</code>The interval defining the ISO week that this date-time falls within. weekBasedYear <p>common</p><code>val DateTime.weekBasedYear: Int</code>The week-based year used in the ISO week date system. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>val DateTime.weekOfMonth: Int</code>The week of the month, from 0-6, calculated using the ISO week definition. weekOfWeekBasedYear <p>common</p><code>val DateTime.weekOfWeekBasedYear: Int</code>The week number used in the ISO week date system. weekOfYear <p>common</p><code>val DateTime.weekOfYear: Int</code>The week of the year, calculated using the ISO week definition. If the week number is associated with the preceding year, <code>0</code> will be returned. year <p>common</p><code>val year: Int</code>The year."},{"location":"api/core/core/io.islandtime/-date-time/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun DateTime.at(zone: TimeZone): ZonedDateTime</code>Combines a local date and time with a time zone to create a ZonedDateTime.<p>common</p><code>infix fun DateTime.at(offset: UtcOffset): OffsetDateTime</code>Combines a local date and time with a UTC offset to create an OffsetDateTime. compareTo <p>common</p><code>open operator override fun compareTo(other: DateTime): Int</code> component1 <p>common</p><code>operator fun component1(): Date</code> component2 <p>common</p><code>operator fun component2(): Time</code> copy <p>common</p><code>fun copy(date: Date = this.date, time: Time = this.time): DateTime</code><code>fun copy(year: Int = this.year, dayOfYear: Int, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime</code><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime</code><code>fun copy(year: Int = this.year, monthNumber: Int, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime</code>Returns a copy of this date-time with the values of any individual components replaced by the new values specified. endOfWeek <p>common</p><code>fun DateTime.endOfWeek(settings: WeekSettings): DateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.<p>common</p><code>fun DateTime.endOfWeek(locale: Locale): DateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> millisecondOfUnixEpochAt <p>common</p><code>fun millisecondOfUnixEpochAt(offset: UtcOffset): Long</code>The millisecond of the Unix epoch. millisecondsSinceUnixEpochAt <p>common</p><code>fun millisecondsSinceUnixEpochAt(offset: UtcOffset): Milliseconds</code>The number of milliseconds relative to the Unix epoch of <code>1970-01-01T00:00Z</code> at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 millisecond. minus <p>common</p><code>operator fun minus(centuries: Centuries): DateTime</code>Returns this date-time with centuries subtracted from it.<p>common</p><code>operator fun minus(days: Days): DateTime</code>Returns this date-time with days subtracted from it.<p>common</p><code>operator fun minus(decades: Decades): DateTime</code>Returns this date-time with decades subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): DateTime</code><p>common</p><code>operator fun minus(hours: Hours): DateTime</code>Returns this date-time with hours subtracted from it.<p>common</p><code>operator fun minus(microseconds: Microseconds): DateTime</code>Returns this date-time with microseconds subtracted from it.<p>common</p><code>operator fun minus(milliseconds: Milliseconds): DateTime</code>Returns this date-time with milliseconds subtracted from it.<p>common</p><code>operator fun minus(minutes: Minutes): DateTime</code>Returns this date-time with minutes subtracted from it.<p>common</p><code>operator fun minus(months: Months): DateTime</code>Returns this date-time with months subtracted from it.<p>common</p><code>operator fun minus(nanoseconds: Nanoseconds): DateTime</code>Returns this date-time with nanoseconds subtracted from it.<p>common</p><code>operator fun minus(period: Period): DateTime</code>Returns this date-time with period subtracted from it.<p>common</p><code>operator fun minus(seconds: Seconds): DateTime</code>Returns this date-time with seconds subtracted from it.<p>common</p><code>operator fun minus(weeks: Weeks): DateTime</code>Returns this date-time with weeks subtracted from it.<p>common</p><code>operator fun minus(years: Years): DateTime</code>Returns this date-time with years subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): DateTime</code>Returns this date-time with duration subtracted from it. next <p>common</p><code>fun DateTime.next(dayOfWeek: DayOfWeek): DateTime</code>The next date-time after this one that falls on dayOfWeek. nextOrSame <p>common</p><code>fun DateTime.nextOrSame(dayOfWeek: DayOfWeek): DateTime</code>The next date-time that falls on dayOfWeek, or this date-time if it falls on the same day. plus <p>common</p><code>operator fun plus(centuries: Centuries): DateTime</code>Returns this date-tme with centuries added to it.<p>common</p><code>operator fun plus(days: Days): DateTime</code>Returns this date-time with days added to it.<p>common</p><code>operator fun plus(decades: Decades): DateTime</code>Returns this date-time with decades added to it.<p>common</p><code>operator fun plus(duration: Duration): DateTime</code><p>common</p><code>operator fun plus(hours: Hours): DateTime</code>Returns this date-time with hours added to it.<p>common</p><code>operator fun plus(microseconds: Microseconds): DateTime</code>Returns this date-time with microseconds added to it.<p>common</p><code>operator fun plus(milliseconds: Milliseconds): DateTime</code>Returns this date-time with milliseconds added to it.<p>common</p><code>operator fun plus(minutes: Minutes): DateTime</code>Returns this date-time with minutes added to it.<p>common</p><code>operator fun plus(months: Months): DateTime</code>Returns this date-time with months added to it.<p>common</p><code>operator fun plus(nanoseconds: Nanoseconds): DateTime</code>Returns this date-time with nanoseconds added to it.<p>common</p><code>operator fun plus(period: Period): DateTime</code>Returns this date-time with period added to it.<p>common</p><code>operator fun plus(seconds: Seconds): DateTime</code>Returns this date-time with seconds added to it.<p>common</p><code>operator fun plus(weeks: Weeks): DateTime</code>Returns this date-time with weeks added to it.<p>common</p><code>operator fun plus(years: Years): DateTime</code>Returns this date-time with years added to it.<p>common</p><code>operator fun plus(duration: Duration): DateTime</code>Returns this date-time with duration added to it. previous <p>common</p><code>fun DateTime.previous(dayOfWeek: DayOfWeek): DateTime</code>The last date-time before this one that falls on dayOfWeek. previousOrSame <p>common</p><code>fun DateTime.previousOrSame(dayOfWeek: DayOfWeek): DateTime</code>The previous date-time that falls on dayOfWeek, or this date-time if it falls on the same day. rangeTo <p>common</p><code>operator fun rangeTo(other: DateTime): DateTimeInterval</code> roundedDownTo <p>common</p><code>fun DateTime.roundedDownTo(unit: TimeUnit): DateTime</code>Returns this date-time, rounded down to match the precision of a given unit. roundedDownToNearest <p>common</p><code>fun DateTime.roundedDownToNearest(increment: Hours): DateTime</code>Returns this date-time, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Microseconds): DateTime</code>Returns this date-time, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Milliseconds): DateTime</code>Returns this date-time, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Minutes): DateTime</code>Returns this date-time, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Nanoseconds): DateTime</code>Returns this date-time, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedDownToNearest(increment: Seconds): DateTime</code>Returns this date-time, rounded down to the nearest second that satisfies the increment. roundedTo <p>common</p><code>fun DateTime.roundedTo(unit: TimeUnit): DateTime</code>Returns this date-time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up. roundedToNearest <p>common</p><code>fun DateTime.roundedToNearest(increment: Hours): DateTime</code>Returns this date-time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Microseconds): DateTime</code>Returns this date-time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Milliseconds): DateTime</code>Returns this date-time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Minutes): DateTime</code>Returns this date-time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Nanoseconds): DateTime</code>Returns this date-time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun DateTime.roundedToNearest(increment: Seconds): DateTime</code>Returns this date-time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up. roundedUpTo <p>common</p><code>fun DateTime.roundedUpTo(unit: TimeUnit): DateTime</code>Returns this date-time, rounded up to match the precision of a given unit. roundedUpToNearest <p>common</p><code>fun DateTime.roundedUpToNearest(increment: Hours): DateTime</code>Returns this date-time, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Microseconds): DateTime</code>Returns this date-time, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Milliseconds): DateTime</code>Returns this date-time, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Minutes): DateTime</code>Returns this date-time, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Nanoseconds): DateTime</code>Returns this date-time, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun DateTime.roundedUpToNearest(increment: Seconds): DateTime</code>Returns this date-time, rounded up to the nearest second that satisfies the increment. secondOfUnixEpochAt <p>common</p><code>fun secondOfUnixEpochAt(offset: UtcOffset): Long</code>The second of the Unix epoch. secondsSinceUnixEpochAt <p>common</p><code>fun secondsSinceUnixEpochAt(offset: UtcOffset): Seconds</code>The number of seconds relative to the Unix epoch of <code>1970-01-01T00:00Z</code> at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 second. startOfWeek <p>common</p><code>fun DateTime.startOfWeek(settings: WeekSettings): DateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the system settings. This may differ from the first day of the week associated with the default locale on platforms that allow this to be customized.<p>common</p><code>fun DateTime.startOfWeek(locale: Locale): DateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale. toInstantAt <p>common</p><code>fun DateTime.toInstantAt(offset: UtcOffset): Instant</code>Converts this date-time to the corresponding Instant at offset. toJavaLocalDateTime <p>jvm</p><code>fun DateTime.toJavaLocalDateTime(): LocalDateTime</code>Converts this date-time to an equivalent Java <code>LocalDateTime</code>. toNSDateComponents <p>darwin</p><code>fun DateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this date-time to an equivalent <code>NSDateComponents</code> object. toString <p>common</p><code>open override fun toString(): String</code>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04-15T17:31:45.923452091</code> or <code>2020-02-13T02:30</code>. toYear <p>common</p><code>fun DateTime.toYear(): Year</code>Returns this date-time with the precision reduced to the year. toYearMonth <p>common</p><code>fun DateTime.toYearMonth(): YearMonth</code>Returns this date-time with the precision reduced to the month. truncatedTo <p>common</p><code>fun DateTime.truncatedTo(unit: TimeUnit): DateTime</code>Returns this date-time, rounded down to match the precision of a given unit. until <p>common</p><code>infix fun DateTime.until(to: DateTime): DateTimeInterval</code>Creates a DateTimeInterval from this date-time up to, but not including the nanosecond represented by to. week <p>common</p><code>fun DateTime.week(settings: WeekSettings): DateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be determined by the provided settings.<p>common</p><code>fun DateTime.week(locale: Locale): DateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be the default associated with the provided locale. weekBasedYear <p>common</p><code>fun DateTime.weekBasedYear(settings: WeekSettings): Int</code>The week-based year, calculated using the week definition in settings. This value differs from the regular ISO year when the week number falls in the preceding or following year.<p>common</p><code>fun DateTime.weekBasedYear(locale: Locale): Int</code>The week-based year, calculated using the week definition associated with the provided locale. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>fun DateTime.weekOfMonth(settings: WeekSettings): Int</code>The week of the month, from 0-6, calculated using the week definition in settings.<p>common</p><code>fun DateTime.weekOfMonth(locale: Locale): Int</code>The week of the month, from 0-6, calculated using the default week definition associated with the provided locale. weekOfWeekBasedYear <p>common</p><code>fun DateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code>The week number of the week-based year, calculated using the week definition in settings.<p>common</p><code>fun DateTime.weekOfWeekBasedYear(locale: Locale): Int</code>The week number of the week-based year, calculated using the week definition associated with the provided locale. weekOfYear <p>common</p><code>fun DateTime.weekOfYear(settings: WeekSettings): Int</code>The week of the year, calculated using the week definition in settings. If the week number is associated with the preceding year, <code>0</code> will be returned.<p>common</p><code>fun DateTime.weekOfYear(locale: Locale): Int</code>The week of the year, calculated using the week definition associated with the provided locale. If the week number is associated with the preceding year, <code>0</code> will be returned."},{"location":"api/core/core/io.islandtime/-date-time/-date-time/","title":"DateTime","text":"<p>//core/io.islandtime/DateTime/DateTime</p>"},{"location":"api/core/core/io.islandtime/-date-time/-date-time/#datetime","title":"DateTime","text":"<p>common</p> <p><code>constructor(year: Int, month: Month, day: Int, hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0)</code></p> <p><code>constructor(year: Int, monthNumber: Int, day: Int, hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0)</code></p> <p><code>constructor(year: Int, dayOfYear: Int, hour: Int, minute: Int, second: Int, nanosecond: Int)</code></p> <p>Creates a DateTime.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-date-time/#throws","title":"Throws","text":"DateTimeException if the date-time is invalid <p>common</p> <p><code>constructor(date: Date, time: Time)</code></p> <p>Creates a DateTime by combining a Date and Time.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-date-time/#parameters","title":"Parameters","text":"<p>common</p> date the date time the time"},{"location":"api/core/core/io.islandtime/-date-time/additional-nanoseconds-since-unix-epoch/","title":"additionalNanosecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/DateTime/additionalNanosecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date-time/additional-nanoseconds-since-unix-epoch/#additionalnanosecondssinceunixepoch","title":"additionalNanosecondsSinceUnixEpoch","text":"<p>common</p> <p><code>val additionalNanosecondsSinceUnixEpoch: Nanoseconds</code></p> <p>The number of additional nanoseconds that should be applied on top of the number of seconds since the Unix epoch returned by secondsSinceUnixEpochAt.</p>"},{"location":"api/core/core/io.islandtime/-date-time/additional-nanoseconds-since-unix-epoch/#see-also","title":"See also","text":"DateTime.secondsSinceUnixEpochAt"},{"location":"api/core/core/io.islandtime/-date-time/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/DateTime/compareTo</p>"},{"location":"api/core/core/io.islandtime/-date-time/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: DateTime): Int</code></p>"},{"location":"api/core/core/io.islandtime/-date-time/component1/","title":"component1","text":"<p>//core/io.islandtime/DateTime/component1</p>"},{"location":"api/core/core/io.islandtime/-date-time/component1/#component1","title":"component1","text":"<p>common</p> <p><code>operator fun component1(): Date</code></p>"},{"location":"api/core/core/io.islandtime/-date-time/component2/","title":"component2","text":"<p>//core/io.islandtime/DateTime/component2</p>"},{"location":"api/core/core/io.islandtime/-date-time/component2/#component2","title":"component2","text":"<p>common</p> <p><code>operator fun component2(): Time</code></p>"},{"location":"api/core/core/io.islandtime/-date-time/copy/","title":"copy","text":"<p>//core/io.islandtime/DateTime/copy</p>"},{"location":"api/core/core/io.islandtime/-date-time/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(date: Date = this.date, time: Time = this.time): DateTime</code></p> <p><code>fun copy(year: Int = this.year, dayOfYear: Int, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime</code></p> <p><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime</code></p> <p><code>fun copy(year: Int = this.year, monthNumber: Int, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): DateTime</code></p> <p>Returns a copy of this date-time with the values of any individual components replaced by the new values specified.</p>"},{"location":"api/core/core/io.islandtime/-date-time/copy/#throws","title":"Throws","text":"DateTimeException if the resulting date-time is invalid"},{"location":"api/core/core/io.islandtime/-date-time/date/","title":"date","text":"<p>//core/io.islandtime/DateTime/date</p>"},{"location":"api/core/core/io.islandtime/-date-time/date/#date","title":"date","text":"<p>common</p> <p><code>val date: Date</code></p> <p>The date.</p>"},{"location":"api/core/core/io.islandtime/-date-time/day-of-month/","title":"dayOfMonth","text":"<p>//core/io.islandtime/DateTime/dayOfMonth</p>"},{"location":"api/core/core/io.islandtime/-date-time/day-of-month/#dayofmonth","title":"dayOfMonth","text":"<p>common</p> <p><code>val dayOfMonth: Int</code></p> <p>The day of the month.</p>"},{"location":"api/core/core/io.islandtime/-date-time/day-of-week/","title":"dayOfWeek","text":"<p>//core/io.islandtime/DateTime/dayOfWeek</p>"},{"location":"api/core/core/io.islandtime/-date-time/day-of-week/#dayofweek","title":"dayOfWeek","text":"<p>common</p> <p><code>val dayOfWeek: DayOfWeek</code></p> <p>The day of the week.</p>"},{"location":"api/core/core/io.islandtime/-date-time/day-of-year/","title":"dayOfYear","text":"<p>//core/io.islandtime/DateTime/dayOfYear</p>"},{"location":"api/core/core/io.islandtime/-date-time/day-of-year/#dayofyear","title":"dayOfYear","text":"<p>common</p> <p><code>val dayOfYear: Int</code></p> <p>The day of the year.</p>"},{"location":"api/core/core/io.islandtime/-date-time/equals/","title":"equals","text":"<p>//core/io.islandtime/DateTime/equals</p>"},{"location":"api/core/core/io.islandtime/-date-time/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-date-time/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/DateTime/hashCode</p>"},{"location":"api/core/core/io.islandtime/-date-time/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-date-time/hour/","title":"hour","text":"<p>//core/io.islandtime/DateTime/hour</p>"},{"location":"api/core/core/io.islandtime/-date-time/hour/#hour","title":"hour","text":"<p>common</p> <p><code>val hour: Int</code></p> <p>The hour of the day.</p>"},{"location":"api/core/core/io.islandtime/-date-time/millisecond-of-unix-epoch-at/","title":"millisecondOfUnixEpochAt","text":"<p>//core/io.islandtime/DateTime/millisecondOfUnixEpochAt</p>"},{"location":"api/core/core/io.islandtime/-date-time/millisecond-of-unix-epoch-at/#millisecondofunixepochat","title":"millisecondOfUnixEpochAt","text":"<p>common</p> <p><code>fun millisecondOfUnixEpochAt(offset: UtcOffset): Long</code></p> <p>The millisecond of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-date-time/millisecond-of-unix-epoch-at/#parameters","title":"Parameters","text":"<p>common</p> offset the offset from UTC"},{"location":"api/core/core/io.islandtime/-date-time/milliseconds-since-unix-epoch-at/","title":"millisecondsSinceUnixEpochAt","text":"<p>//core/io.islandtime/DateTime/millisecondsSinceUnixEpochAt</p>"},{"location":"api/core/core/io.islandtime/-date-time/milliseconds-since-unix-epoch-at/#millisecondssinceunixepochat","title":"millisecondsSinceUnixEpochAt","text":"<p>common</p> <p><code>fun millisecondsSinceUnixEpochAt(offset: UtcOffset): Milliseconds</code></p> <p>The number of milliseconds relative to the Unix epoch of <code>1970-01-01T00:00Z</code> at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 millisecond.</p>"},{"location":"api/core/core/io.islandtime/-date-time/milliseconds-since-unix-epoch-at/#parameters","title":"Parameters","text":"<p>common</p> offset the offset from UTC"},{"location":"api/core/core/io.islandtime/-date-time/minus/","title":"minus","text":"<p>//core/io.islandtime/DateTime/minus</p>"},{"location":"api/core/core/io.islandtime/-date-time/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(period: Period): DateTime</code></p> <p>Returns this date-time with period subtracted from it.</p> <p>Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun minus(duration: Duration): DateTime</code></p> <p>common</p> <p><code>operator fun minus(duration: Duration): DateTime</code></p> <p>Returns this date-time with duration subtracted from it.</p> <p>common</p> <p><code>operator fun minus(centuries: Centuries): DateTime</code></p> <p>Returns this date-time with centuries subtracted from it.</p> <p>common</p> <p><code>operator fun minus(decades: Decades): DateTime</code></p> <p>Returns this date-time with decades subtracted from it.</p> <p>common</p> <p><code>operator fun minus(years: Years): DateTime</code></p> <p>Returns this date-time with years subtracted from it.</p> <p>common</p> <p><code>operator fun minus(months: Months): DateTime</code></p> <p>Returns this date-time with months subtracted from it.</p> <p>common</p> <p><code>operator fun minus(weeks: Weeks): DateTime</code></p> <p>Returns this date-time with weeks subtracted from it.</p> <p>common</p> <p><code>operator fun minus(days: Days): DateTime</code></p> <p>Returns this date-time with days subtracted from it.</p> <p>common</p> <p><code>operator fun minus(hours: Hours): DateTime</code></p> <p>Returns this date-time with hours subtracted from it.</p> <p>common</p> <p><code>operator fun minus(minutes: Minutes): DateTime</code></p> <p>Returns this date-time with minutes subtracted from it.</p> <p>common</p> <p><code>operator fun minus(seconds: Seconds): DateTime</code></p> <p>Returns this date-time with seconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(milliseconds: Milliseconds): DateTime</code></p> <p>Returns this date-time with milliseconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(microseconds: Microseconds): DateTime</code></p> <p>Returns this date-time with microseconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): DateTime</code></p> <p>Returns this date-time with nanoseconds subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-date-time/minute/","title":"minute","text":"<p>//core/io.islandtime/DateTime/minute</p>"},{"location":"api/core/core/io.islandtime/-date-time/minute/#minute","title":"minute","text":"<p>common</p> <p><code>val minute: Int</code></p> <p>The minute of the hour.</p>"},{"location":"api/core/core/io.islandtime/-date-time/month-number/","title":"monthNumber","text":"<p>//core/io.islandtime/DateTime/monthNumber</p>"},{"location":"api/core/core/io.islandtime/-date-time/month-number/#monthnumber","title":"monthNumber","text":"<p>common</p> <p><code>val monthNumber: Int</code></p> <p>The ISO month number, from 1-12.</p>"},{"location":"api/core/core/io.islandtime/-date-time/month/","title":"month","text":"<p>//core/io.islandtime/DateTime/month</p>"},{"location":"api/core/core/io.islandtime/-date-time/month/#month","title":"month","text":"<p>common</p> <p><code>val month: Month</code></p> <p>The month of the year.</p>"},{"location":"api/core/core/io.islandtime/-date-time/nanosecond/","title":"nanosecond","text":"<p>//core/io.islandtime/DateTime/nanosecond</p>"},{"location":"api/core/core/io.islandtime/-date-time/nanosecond/#nanosecond","title":"nanosecond","text":"<p>common</p> <p><code>val nanosecond: Int</code></p> <p>The nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-date-time/plus/","title":"plus","text":"<p>//core/io.islandtime/DateTime/plus</p>"},{"location":"api/core/core/io.islandtime/-date-time/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(period: Period): DateTime</code></p> <p>Returns this date-time with period added to it.</p> <p>Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun plus(duration: Duration): DateTime</code></p> <p>common</p> <p><code>operator fun plus(duration: Duration): DateTime</code></p> <p>Returns this date-time with duration added to it.</p> <p>common</p> <p><code>operator fun plus(centuries: Centuries): DateTime</code></p> <p>Returns this date-tme with centuries added to it.</p> <p>common</p> <p><code>operator fun plus(decades: Decades): DateTime</code></p> <p>Returns this date-time with decades added to it.</p> <p>common</p> <p><code>operator fun plus(years: Years): DateTime</code></p> <p>Returns this date-time with years added to it.</p> <p>common</p> <p><code>operator fun plus(months: Months): DateTime</code></p> <p>Returns this date-time with months added to it.</p> <p>common</p> <p><code>operator fun plus(weeks: Weeks): DateTime</code></p> <p>Returns this date-time with weeks added to it.</p> <p>common</p> <p><code>operator fun plus(days: Days): DateTime</code></p> <p>Returns this date-time with days added to it.</p> <p>common</p> <p><code>operator fun plus(hours: Hours): DateTime</code></p> <p>Returns this date-time with hours added to it.</p> <p>common</p> <p><code>operator fun plus(minutes: Minutes): DateTime</code></p> <p>Returns this date-time with minutes added to it.</p> <p>common</p> <p><code>operator fun plus(seconds: Seconds): DateTime</code></p> <p>Returns this date-time with seconds added to it.</p> <p>common</p> <p><code>operator fun plus(milliseconds: Milliseconds): DateTime</code></p> <p>Returns this date-time with milliseconds added to it.</p> <p>common</p> <p><code>operator fun plus(microseconds: Microseconds): DateTime</code></p> <p>Returns this date-time with microseconds added to it.</p> <p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): DateTime</code></p> <p>Returns this date-time with nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-date-time/range-to/","title":"rangeTo","text":"<p>//core/io.islandtime/DateTime/rangeTo</p>"},{"location":"api/core/core/io.islandtime/-date-time/range-to/#rangeto","title":"rangeTo","text":"<p>common</p> <p><code>operator fun rangeTo(other: DateTime): DateTimeInterval</code></p>"},{"location":"api/core/core/io.islandtime/-date-time/second-of-unix-epoch-at/","title":"secondOfUnixEpochAt","text":"<p>//core/io.islandtime/DateTime/secondOfUnixEpochAt</p>"},{"location":"api/core/core/io.islandtime/-date-time/second-of-unix-epoch-at/#secondofunixepochat","title":"secondOfUnixEpochAt","text":"<p>common</p> <p><code>fun secondOfUnixEpochAt(offset: UtcOffset): Long</code></p> <p>The second of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-date-time/second-of-unix-epoch-at/#parameters","title":"Parameters","text":"<p>common</p> offset the offset from UTC"},{"location":"api/core/core/io.islandtime/-date-time/second-of-unix-epoch-at/#see-also","title":"See also","text":"DateTime.nanosecond"},{"location":"api/core/core/io.islandtime/-date-time/second/","title":"second","text":"<p>//core/io.islandtime/DateTime/second</p>"},{"location":"api/core/core/io.islandtime/-date-time/second/#second","title":"second","text":"<p>common</p> <p><code>val second: Int</code></p> <p>The second of the minute.</p>"},{"location":"api/core/core/io.islandtime/-date-time/seconds-since-unix-epoch-at/","title":"secondsSinceUnixEpochAt","text":"<p>//core/io.islandtime/DateTime/secondsSinceUnixEpochAt</p>"},{"location":"api/core/core/io.islandtime/-date-time/seconds-since-unix-epoch-at/#secondssinceunixepochat","title":"secondsSinceUnixEpochAt","text":"<p>common</p> <p><code>fun secondsSinceUnixEpochAt(offset: UtcOffset): Seconds</code></p> <p>The number of seconds relative to the Unix epoch of <code>1970-01-01T00:00Z</code> at a particular offset. This is a \"floor\" value, so 1 nanosecond before the Unix epoch will be at a distance of 1 second.</p>"},{"location":"api/core/core/io.islandtime/-date-time/seconds-since-unix-epoch-at/#parameters","title":"Parameters","text":"<p>common</p> offset the offset from UTC"},{"location":"api/core/core/io.islandtime/-date-time/seconds-since-unix-epoch-at/#see-also","title":"See also","text":"DateTime.additionalNanosecondsSinceUnixEpoch"},{"location":"api/core/core/io.islandtime/-date-time/time/","title":"time","text":"<p>//core/io.islandtime/DateTime/time</p>"},{"location":"api/core/core/io.islandtime/-date-time/time/#time","title":"time","text":"<p>common</p> <p><code>val time: Time</code></p> <p>The time of day.</p>"},{"location":"api/core/core/io.islandtime/-date-time/to-string/","title":"toString","text":"<p>//core/io.islandtime/DateTime/toString</p>"},{"location":"api/core/core/io.islandtime/-date-time/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04-15T17:31:45.923452091</code> or <code>2020-02-13T02:30</code>.</p>"},{"location":"api/core/core/io.islandtime/-date-time/year/","title":"year","text":"<p>//core/io.islandtime/DateTime/year</p>"},{"location":"api/core/core/io.islandtime/-date-time/year/#year","title":"year","text":"<p>common</p> <p><code>val year: Int</code></p> <p>The year.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/","title":"Companion","text":"<p>//core/io.islandtime/DateTime/Companion</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: DateTime</code>The latest supported DateTime, which can be used as a \"far future\" sentinel. MIN <p>common</p><code>val MIN: DateTime</code>The earliest supported DateTime, which can be used as a \"far past\" sentinel."},{"location":"api/core/core/io.islandtime/-date-time/-companion/#functions","title":"Functions","text":"Name Summary fromMillisecondOfUnixEpoch <p>common</p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long, offset: UtcOffset): DateTime</code>Creates a DateTime from the millisecond of the Unix epoch at offset. fromMillisecondsSinceUnixEpoch <p>common</p><code>fun fromMillisecondsSinceUnixEpoch(millisecondsSinceUnixEpoch: Milliseconds, offset: UtcOffset): DateTime</code>Creates a DateTime from a duration of milliseconds relative to the Unix epoch at offset. fromSecondOfUnixEpoch <p>common</p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int = 0, offset: UtcOffset): DateTime</code>Creates a DateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second. fromSecondsSinceUnixEpoch <p>common</p><code>fun fromSecondsSinceUnixEpoch(secondsSinceUnixEpoch: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds, offset: UtcOffset): DateTime</code>Creates a DateTime from a duration of seconds relative to the Unix epoch at offset, optionally, with some number of additional nanoseconds added to it. now <p>common</p><code>fun DateTime.Companion.now(): DateTime</code>Gets the current DateTime from the system clock.<p>common</p><code>fun DateTime.Companion.now(clock: Clock): DateTime</code>Gets the current DateTime from the provided clock.<p>jvm</p><code>fun DateTime.Companion.now(clock: Clock): DateTime</code>Gets the current DateTime from the provided clock."},{"location":"api/core/core/io.islandtime/-date-time/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/DateTime/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: DateTime</code></p> <p>The latest supported DateTime, which can be used as a \"far future\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/DateTime/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: DateTime</code></p> <p>The earliest supported DateTime, which can be used as a \"far past\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-millisecond-of-unix-epoch/","title":"fromMillisecondOfUnixEpoch","text":"<p>//core/io.islandtime/DateTime/Companion/fromMillisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","title":"fromMillisecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long, offset: UtcOffset): DateTime</code></p> <p>Creates a DateTime from the millisecond of the Unix epoch at offset.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-milliseconds-since-unix-epoch/","title":"fromMillisecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/DateTime/Companion/fromMillisecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-milliseconds-since-unix-epoch/#frommillisecondssinceunixepoch","title":"fromMillisecondsSinceUnixEpoch","text":"<p>common</p> <p><code>fun fromMillisecondsSinceUnixEpoch(millisecondsSinceUnixEpoch: Milliseconds, offset: UtcOffset): DateTime</code></p> <p>Creates a DateTime from a duration of milliseconds relative to the Unix epoch at offset.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-second-of-unix-epoch/","title":"fromSecondOfUnixEpoch","text":"<p>//core/io.islandtime/DateTime/Companion/fromSecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-second-of-unix-epoch/#fromsecondofunixepoch","title":"fromSecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int = 0, offset: UtcOffset): DateTime</code></p> <p>Creates a DateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-seconds-since-unix-epoch/","title":"fromSecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/DateTime/Companion/fromSecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-date-time/-companion/from-seconds-since-unix-epoch/#fromsecondssinceunixepoch","title":"fromSecondsSinceUnixEpoch","text":"<p>common</p> <p><code>fun fromSecondsSinceUnixEpoch(secondsSinceUnixEpoch: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds, offset: UtcOffset): DateTime</code></p> <p>Creates a DateTime from a duration of seconds relative to the Unix epoch at offset, optionally, with some number of additional nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-date-time-exception/","title":"DateTimeException","text":"<p>//core/io.islandtime/DateTimeException</p>"},{"location":"api/core/core/io.islandtime/-date-time-exception/#datetimeexception","title":"DateTimeException","text":"<p><code>open class DateTimeException(message: String? = null, cause: Throwable? = null) : Exception</code></p>"},{"location":"api/core/core/io.islandtime/-date-time-exception/#inheritors","title":"Inheritors","text":"DateTimeParseException TimeZoneRulesException"},{"location":"api/core/core/io.islandtime/-date-time-exception/#constructors","title":"Constructors","text":"DateTimeException <p>common</p><code>constructor(message: String? = null, cause: Throwable? = null)</code>"},{"location":"api/core/core/io.islandtime/-date-time-exception/#properties","title":"Properties","text":"Name Summary cause <p>common</p><code>open val cause: Throwable?</code> message <p>common</p><code>open val message: String?</code>"},{"location":"api/core/core/io.islandtime/-date-time-exception/-date-time-exception/","title":"DateTimeException","text":"<p>//core/io.islandtime/DateTimeException/DateTimeException</p>"},{"location":"api/core/core/io.islandtime/-date-time-exception/-date-time-exception/#datetimeexception","title":"DateTimeException","text":"<p>common</p> <p><code>constructor(message: String? = null, cause: Throwable? = null)</code></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/","title":"DayOfWeek","text":"<p>//core/io.islandtime/DayOfWeek</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/#dayofweek","title":"DayOfWeek","text":"<p>common</p> <p><code>enum DayOfWeek : Enum&lt;DayOfWeek&gt; </code></p> <p>A day of the week.</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/#entries","title":"Entries","text":"MONDAY <p>common</p><code>MONDAY</code> TUESDAY <p>common</p><code>TUESDAY</code> WEDNESDAY <p>common</p><code>WEDNESDAY</code> THURSDAY <p>common</p><code>THURSDAY</code> FRIDAY <p>common</p><code>FRIDAY</code> SATURDAY <p>common</p><code>SATURDAY</code> SUNDAY <p>common</p><code>SUNDAY</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;DayOfWeek&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached. valueOf <p>common</p><code>fun valueOf(value: String): DayOfWeek</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;DayOfWeek&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime/-day-of-week/display-name/","title":"displayName","text":"<p>//core/io.islandtime/DayOfWeek/displayName</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/display-name/#displayname","title":"displayName","text":"<p>common</p> <p><code>fun displayName(style: TextStyle, locale: Locale): String</code></p> <p>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead.</p> <p>The result depends on the configured DateTimeTextProvider and may differ between platforms.</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/display-name/#return","title":"Return","text":"<p>the localized name or number if unavailable for the specified locale</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/display-name/#parameters","title":"Parameters","text":"<p>common</p> style the style of text locale the locale"},{"location":"api/core/core/io.islandtime/-day-of-week/display-name/#see-also","title":"See also","text":"DayOfWeek.localizedName"},{"location":"api/core/core/io.islandtime/-day-of-week/entries/","title":"entries","text":"<p>//core/io.islandtime/DayOfWeek/entries</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;DayOfWeek&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/localized-name/","title":"localizedName","text":"<p>//core/io.islandtime/DayOfWeek/localizedName</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/localized-name/#localizedname","title":"localizedName","text":"<p>common</p> <p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code></p> <p>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/localized-name/#return","title":"Return","text":"<p>the localized name or <code>null</code> if unavailable for the specified locale</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/localized-name/#parameters","title":"Parameters","text":"<p>common</p> style the style of text locale the locale"},{"location":"api/core/core/io.islandtime/-day-of-week/localized-name/#see-also","title":"See also","text":"DayOfWeek.displayName"},{"location":"api/core/core/io.islandtime/-day-of-week/minus/","title":"minus","text":"<p>//core/io.islandtime/DayOfWeek/minus</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(days: Days): DayOfWeek</code></p> <p>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached.</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/number/","title":"number","text":"<p>//core/io.islandtime/DayOfWeek/number</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/number/#number","title":"number","text":"<p>common</p> <p><code>fun number(settings: WeekSettings): Int</code></p> <p>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.</p> <p>common</p> <p><code>fun number(locale: Locale): Int</code></p> <p>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms.</p> <p>common</p> <p><code>val number: Int</code></p> <p>The ISO day of week number.</p> <p>The ISO week starts on Monday (1) and ends on Sunday (7).</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/plus/","title":"plus","text":"<p>//core/io.islandtime/DayOfWeek/plus</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(days: Days): DayOfWeek</code></p> <p>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached.</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/value-of/","title":"valueOf","text":"<p>//core/io.islandtime/DayOfWeek/valueOf</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): DayOfWeek</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime/-day-of-week/values/","title":"values","text":"<p>//core/io.islandtime/DayOfWeek/values</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;DayOfWeek&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-companion/","title":"Companion","text":"<p>//core/io.islandtime/DayOfWeek/Companion</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: DayOfWeek</code> MIN <p>common</p><code>val MIN: DayOfWeek</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/DayOfWeek/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: DayOfWeek</code></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/DayOfWeek/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: DayOfWeek</code></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-f-r-i-d-a-y/","title":"FRIDAY","text":"<p>//core/io.islandtime/DayOfWeek/FRIDAY</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-f-r-i-d-a-y/#friday","title":"FRIDAY","text":"<p>common</p> <p><code>FRIDAY <p></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-f-r-i-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-f-r-i-d-a-y/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached."},{"location":"api/core/core/io.islandtime/-day-of-week/-m-o-n-d-a-y/","title":"MONDAY","text":"<p>//core/io.islandtime/DayOfWeek/MONDAY</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-m-o-n-d-a-y/#monday","title":"MONDAY","text":"<p>common</p> <p><code>MONDAY <p></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-m-o-n-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-m-o-n-d-a-y/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached."},{"location":"api/core/core/io.islandtime/-day-of-week/-s-a-t-u-r-d-a-y/","title":"SATURDAY","text":"<p>//core/io.islandtime/DayOfWeek/SATURDAY</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-s-a-t-u-r-d-a-y/#saturday","title":"SATURDAY","text":"<p>common</p> <p><code>SATURDAY <p></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-s-a-t-u-r-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-s-a-t-u-r-d-a-y/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached."},{"location":"api/core/core/io.islandtime/-day-of-week/-s-u-n-d-a-y/","title":"SUNDAY","text":"<p>//core/io.islandtime/DayOfWeek/SUNDAY</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-s-u-n-d-a-y/#sunday","title":"SUNDAY","text":"<p>common</p> <p><code>SUNDAY <p></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-s-u-n-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-s-u-n-d-a-y/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached."},{"location":"api/core/core/io.islandtime/-day-of-week/-t-h-u-r-s-d-a-y/","title":"THURSDAY","text":"<p>//core/io.islandtime/DayOfWeek/THURSDAY</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-t-h-u-r-s-d-a-y/#thursday","title":"THURSDAY","text":"<p>common</p> <p><code>THURSDAY <p></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-t-h-u-r-s-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-t-h-u-r-s-d-a-y/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached."},{"location":"api/core/core/io.islandtime/-day-of-week/-t-u-e-s-d-a-y/","title":"TUESDAY","text":"<p>//core/io.islandtime/DayOfWeek/TUESDAY</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-t-u-e-s-d-a-y/#tuesday","title":"TUESDAY","text":"<p>common</p> <p><code>TUESDAY <p></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-t-u-e-s-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-t-u-e-s-d-a-y/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached."},{"location":"api/core/core/io.islandtime/-day-of-week/-w-e-d-n-e-s-d-a-y/","title":"WEDNESDAY","text":"<p>//core/io.islandtime/DayOfWeek/WEDNESDAY</p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-w-e-d-n-e-s-d-a-y/#wednesday","title":"WEDNESDAY","text":"<p>common</p> <p><code>WEDNESDAY <p></p>"},{"location":"api/core/core/io.islandtime/-day-of-week/-w-e-d-n-e-s-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO day of week number. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-day-of-week/-w-e-d-n-e-s-d-a-y/#functions","title":"Functions","text":"Name Summary displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the day, suitable for display purposes. The localized name will be returned, if available. If not, the ISO day of week number will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the day, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(days: Days): DayOfWeek</code>Returns this day of the week with days subtracted from it, wrapping when the beginning or end of the week is reached. number <p>common</p><code>fun number(settings: WeekSettings): Int</code>The day of week number (1-7) according to the provided settings. Typically, the week will start on either Monday, Sunday, or Saturday.<p>common</p><code>fun number(locale: Locale): Int</code>The day of week number (1-7) according to the specified locale. Typically, the week will start on either Monday, Sunday, or Saturday. The number returned may differ between platforms. plus <p>common</p><code>operator fun plus(days: Days): DayOfWeek</code>Returns this day of the week with days added to it, wrapping when the beginning or end of the week is reached."},{"location":"api/core/core/io.islandtime/-instant/","title":"Instant","text":"<p>//core/io.islandtime/Instant</p>"},{"location":"api/core/core/io.islandtime/-instant/#instant","title":"Instant","text":"<p>common</p> <p><code>@Serializable(with = InstantIsoSerializer::class) <p>class Instant : TimePoint&lt;Instant&gt; , Comparable&lt;Instant&gt; </p> <p>An instant in time with nanosecond-precision.</p>"},{"location":"api/core/core/io.islandtime/-instant/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-instant/#properties","title":"Properties","text":"Name Summary additionalNanosecondsSinceUnixEpoch <p>common</p><code>open val additionalNanosecondsSinceUnixEpoch: Nanoseconds</code>The number of additional nanoseconds on top of secondsSinceUnixEpoch. millisecondOfUnixEpoch <p>common</p><code>open override val millisecondOfUnixEpoch: Long</code>The millisecond of the Unix epoch. millisecondsSinceUnixEpoch <p>common</p><code>open override val millisecondsSinceUnixEpoch: Milliseconds</code>The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. nanosecond <p>common</p><code>open override val nanosecond: Int</code>The nanosecond of the second. secondOfUnixEpoch <p>common</p><code>open override val secondOfUnixEpoch: Long</code>The second of the Unix epoch. secondsSinceUnixEpoch <p>common</p><code>open val secondsSinceUnixEpoch: Seconds</code>The number of seconds since the Unix epoch of 1970-01-01T00:00Z."},{"location":"api/core/core/io.islandtime/-instant/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun Instant.at(zone: TimeZone): ZonedDateTime</code>Combines an instant with a time zone to create a ZonedDateTime.<p>common</p><code>infix fun Instant.at(offset: UtcOffset): OffsetDateTime</code>Combines an instant with a UTC offset to create an OffsetDateTime. compareTo <p>common</p><code>open operator override fun compareTo(other: Instant): Int</code><p>common</p><code>open operator fun compareTo(other: TimePoint&lt;*&gt;): Int</code>Compares this time point with another time point. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isSameInstantAs <p>common</p><code>open fun isSameInstantAs(other: TimePoint&lt;*&gt;): Boolean</code>Checks if this time point represents the same instant as other. Unlike the equals operator, equality is determined solely by timeline order. minus <p>common</p><code>operator fun minus(days: Days): Instant</code>Returns this instant with a number of 24-hour days subtracted from it.<p>common</p><code>operator fun minus(other: Duration): Instant</code><p>common</p><code>open operator override fun minus(hours: Hours): Instant</code>Returns this instant with hours subtracted from it.<p>common</p><code>open operator override fun minus(microseconds: Microseconds): Instant</code>Returns this instant with microseconds subtracted from it.<p>common</p><code>open operator override fun minus(milliseconds: Milliseconds): Instant</code>Returns this instant with milliseconds subtracted from it.<p>common</p><code>open operator override fun minus(minutes: Minutes): Instant</code>Returns this instant with minutes subtracted from it.<p>common</p><code>open operator override fun minus(nanoseconds: Nanoseconds): Instant</code>Returns this instant with nanoseconds subtracted from it.<p>common</p><code>open operator override fun minus(seconds: Seconds): Instant</code>Returns this instant with seconds subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): Instant</code>Returns this instant with duration subtracted from it. plus <p>common</p><code>operator fun plus(days: Days): Instant</code>Returns this instant with a number of 24-hour days added to it.<p>common</p><code>operator fun plus(other: Duration): Instant</code><p>common</p><code>open operator override fun plus(hours: Hours): Instant</code>Returns this instant with hours added to it.<p>common</p><code>open operator override fun plus(microseconds: Microseconds): Instant</code>Returns this instant with microseconds added to it.<p>common</p><code>open operator override fun plus(milliseconds: Milliseconds): Instant</code>Returns this instant with milliseconds added to it.<p>common</p><code>open operator override fun plus(minutes: Minutes): Instant</code>Returns this instant with minutes added to it.<p>common</p><code>open operator override fun plus(nanoseconds: Nanoseconds): Instant</code>Returns this instant with nanoseconds added to it.<p>common</p><code>open operator override fun plus(seconds: Seconds): Instant</code>Returns this instant with seconds added to it.<p>common</p><code>operator fun plus(duration: Duration): Instant</code>Returns this instant with duration added to it. rangeTo <p>common</p><code>operator fun rangeTo(other: Instant): InstantInterval</code> roundedDownTo <p>common</p><code>fun Instant.roundedDownTo(unit: TimeUnit): Instant</code>Returns this instant, rounded down to match the precision of a given unit. roundedDownToNearest <p>common</p><code>fun Instant.roundedDownToNearest(increment: Hours): Instant</code>Returns this instant, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Microseconds): Instant</code>Returns this instant, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Milliseconds): Instant</code>Returns this instant, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Minutes): Instant</code>Returns this instant, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Nanoseconds): Instant</code>Returns this instant, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun Instant.roundedDownToNearest(increment: Seconds): Instant</code>Returns this instant, rounded down to the nearest second that satisfies the increment. roundedTo <p>common</p><code>fun Instant.roundedTo(unit: TimeUnit): Instant</code>Returns this instant, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up. roundedToNearest <p>common</p><code>fun Instant.roundedToNearest(increment: Hours): Instant</code>Returns this instant, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Microseconds): Instant</code>Returns this instant, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Milliseconds): Instant</code>Returns this instant, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Minutes): Instant</code>Returns this instant, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Nanoseconds): Instant</code>Returns this instant, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Instant.roundedToNearest(increment: Seconds): Instant</code>Returns this instant, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up. roundedUpTo <p>common</p><code>fun Instant.roundedUpTo(unit: TimeUnit): Instant</code>Returns this instant, rounded up to match the precision of a given unit. roundedUpToNearest <p>common</p><code>fun Instant.roundedUpToNearest(increment: Hours): Instant</code>Returns this instant, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Microseconds): Instant</code>Returns this instant, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Milliseconds): Instant</code>Returns this instant, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Minutes): Instant</code>Returns this instant, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Nanoseconds): Instant</code>Returns this instant, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun Instant.roundedUpToNearest(increment: Seconds): Instant</code>Returns this instant, rounded up to the nearest second that satisfies the increment. toDateAt <p>common</p><code>fun Instant.toDateAt(zone: TimeZone): Date</code>Converts this instant to the corresponding Date in zone.<p>common</p><code>fun Instant.toDateAt(offset: UtcOffset): Date</code>Converts this instant to the corresponding Date at offset. toDateTimeAt <p>common</p><code>fun Instant.toDateTimeAt(zone: TimeZone): DateTime</code>Converts this instant to the corresponding DateTime in zone.<p>common</p><code>fun Instant.toDateTimeAt(offset: UtcOffset): DateTime</code>Converts this instant to the corresponding DateTime at offset. toJavaInstant <p>jvm</p><code>fun Instant.toJavaInstant(): Instant</code>Converts this instant to an equivalent Java <code>Instant</code>. toNSDate <p>darwin</p><code>fun &lt;T&gt; TimePoint&lt;T&gt;.toNSDate(): &lt;Error class: unknown class&gt;</code>Converts this time point to an <code>NSDate</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this instant to a string in ISO-8601 extended format. For example, <code>2020-02-13T02:30:05.367Z</code>. truncatedTo <p>common</p><code>fun Instant.truncatedTo(unit: TimeUnit): Instant</code>Returns this instant, rounded down to match the precision of a given unit. until <p>common</p><code>infix fun Instant.until(to: Instant): InstantInterval</code>Creates an InstantInterval from this instant up to, but not including to."},{"location":"api/core/core/io.islandtime/-instant/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/Instant/compareTo</p>"},{"location":"api/core/core/io.islandtime/-instant/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Instant): Int</code></p>"},{"location":"api/core/core/io.islandtime/-instant/equals/","title":"equals","text":"<p>//core/io.islandtime/Instant/equals</p>"},{"location":"api/core/core/io.islandtime/-instant/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-instant/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/Instant/hashCode</p>"},{"location":"api/core/core/io.islandtime/-instant/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-instant/millisecond-of-unix-epoch/","title":"millisecondOfUnixEpoch","text":"<p>//core/io.islandtime/Instant/millisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-instant/millisecond-of-unix-epoch/#millisecondofunixepoch","title":"millisecondOfUnixEpoch","text":"<p>common</p> <p><code>open override val millisecondOfUnixEpoch: Long</code></p> <p>The millisecond of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-instant/milliseconds-since-unix-epoch/","title":"millisecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/Instant/millisecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-instant/milliseconds-since-unix-epoch/#millisecondssinceunixepoch","title":"millisecondsSinceUnixEpoch","text":"<p>common</p> <p><code>open override val millisecondsSinceUnixEpoch: Milliseconds</code></p> <p>The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.</p>"},{"location":"api/core/core/io.islandtime/-instant/minus/","title":"minus","text":"<p>//core/io.islandtime/Instant/minus</p>"},{"location":"api/core/core/io.islandtime/-instant/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(other: Duration): Instant</code></p> <p>common</p> <p><code>operator fun minus(duration: Duration): Instant</code></p> <p>Returns this instant with duration subtracted from it.</p> <p>common</p> <p><code>operator fun minus(days: Days): Instant</code></p> <p>Returns this instant with a number of 24-hour days subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(hours: Hours): Instant</code></p> <p>Returns this instant with hours subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(minutes: Minutes): Instant</code></p> <p>Returns this instant with minutes subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(seconds: Seconds): Instant</code></p> <p>Returns this instant with seconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(milliseconds: Milliseconds): Instant</code></p> <p>Returns this instant with milliseconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(microseconds: Microseconds): Instant</code></p> <p>Returns this instant with microseconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(nanoseconds: Nanoseconds): Instant</code></p> <p>Returns this instant with nanoseconds subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-instant/nanosecond/","title":"nanosecond","text":"<p>//core/io.islandtime/Instant/nanosecond</p>"},{"location":"api/core/core/io.islandtime/-instant/nanosecond/#nanosecond","title":"nanosecond","text":"<p>common</p> <p><code>open override val nanosecond: Int</code></p> <p>The nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-instant/plus/","title":"plus","text":"<p>//core/io.islandtime/Instant/plus</p>"},{"location":"api/core/core/io.islandtime/-instant/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(other: Duration): Instant</code></p> <p>common</p> <p><code>operator fun plus(duration: Duration): Instant</code></p> <p>Returns this instant with duration added to it.</p> <p>common</p> <p><code>operator fun plus(days: Days): Instant</code></p> <p>Returns this instant with a number of 24-hour days added to it.</p> <p>common</p> <p><code>open operator override fun plus(hours: Hours): Instant</code></p> <p>Returns this instant with hours added to it.</p> <p>common</p> <p><code>open operator override fun plus(minutes: Minutes): Instant</code></p> <p>Returns this instant with minutes added to it.</p> <p>common</p> <p><code>open operator override fun plus(seconds: Seconds): Instant</code></p> <p>Returns this instant with seconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(milliseconds: Milliseconds): Instant</code></p> <p>Returns this instant with milliseconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(microseconds: Microseconds): Instant</code></p> <p>Returns this instant with microseconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(nanoseconds: Nanoseconds): Instant</code></p> <p>Returns this instant with nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-instant/range-to/","title":"rangeTo","text":"<p>//core/io.islandtime/Instant/rangeTo</p>"},{"location":"api/core/core/io.islandtime/-instant/range-to/#rangeto","title":"rangeTo","text":"<p>common</p> <p><code>operator fun rangeTo(other: Instant): InstantInterval</code></p>"},{"location":"api/core/core/io.islandtime/-instant/second-of-unix-epoch/","title":"secondOfUnixEpoch","text":"<p>//core/io.islandtime/Instant/secondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-instant/second-of-unix-epoch/#secondofunixepoch","title":"secondOfUnixEpoch","text":"<p>common</p> <p><code>open override val secondOfUnixEpoch: Long</code></p> <p>The second of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-instant/to-string/","title":"toString","text":"<p>//core/io.islandtime/Instant/toString</p>"},{"location":"api/core/core/io.islandtime/-instant/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this instant to a string in ISO-8601 extended format. For example, <code>2020-02-13T02:30:05.367Z</code>.</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/","title":"Companion","text":"<p>//core/io.islandtime/Instant/Companion</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Instant</code>The latest supported Instant, which can be used as a \"far future\" sentinel. MIN <p>common</p><code>val MIN: Instant</code>The earliest supported Instant, which can be used as a \"far past\" sentinel. UNIX_EPOCH <p>common</p><code>val UNIX_EPOCH: Instant</code>The Instant representing the Unix epoch of 1970-01-01T00:00Z."},{"location":"api/core/core/io.islandtime/-instant/-companion/#functions","title":"Functions","text":"Name Summary fromMillisecondOfUnixEpoch <p>common</p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long): Instant</code>Creates an Instant from the millisecond of the Unix epoch. fromSecondOfUnixEpoch <p>common</p><code>fun fromSecondOfUnixEpoch(second: Long): Instant</code><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int): Instant</code><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Long): Instant</code>Creates an Instant from the second of the Unix epoch. now <p>common</p><code>fun Instant.Companion.now(): Instant</code>Gets the current Instant from the system clock.<p>common</p><code>fun Instant.Companion.now(clock: Clock): Instant</code>Gets the current Instant from the provided clock.<p>jvm</p><code>fun Instant.Companion.now(clock: Clock): Instant</code>Gets the current Instant from the provided clock."},{"location":"api/core/core/io.islandtime/-instant/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/Instant/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Instant</code></p> <p>The latest supported Instant, which can be used as a \"far future\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/Instant/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Instant</code></p> <p>The earliest supported Instant, which can be used as a \"far past\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/-u-n-i-x_-e-p-o-c-h/","title":"UNIX_EPOCH","text":"<p>//core/io.islandtime/Instant/Companion/UNIX_EPOCH</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/-u-n-i-x_-e-p-o-c-h/#unix_epoch","title":"UNIX_EPOCH","text":"<p>common</p> <p><code>val UNIX_EPOCH: Instant</code></p> <p>The Instant representing the Unix epoch of 1970-01-01T00:00Z.</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/from-millisecond-of-unix-epoch/","title":"fromMillisecondOfUnixEpoch","text":"<p>//core/io.islandtime/Instant/Companion/fromMillisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","title":"fromMillisecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long): Instant</code></p> <p>Creates an Instant from the millisecond of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/from-second-of-unix-epoch/","title":"fromSecondOfUnixEpoch","text":"<p>//core/io.islandtime/Instant/Companion/fromSecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-instant/-companion/from-second-of-unix-epoch/#fromsecondofunixepoch","title":"fromSecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromSecondOfUnixEpoch(second: Long): Instant</code></p> <p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int): Instant</code></p> <p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Long): Instant</code></p> <p>Creates an Instant from the second of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-island-time/","title":"IslandTime","text":"<p>//core/io.islandtime/IslandTime</p>"},{"location":"api/core/core/io.islandtime/-island-time/#islandtime","title":"IslandTime","text":"<p>common</p> <p><code>object IslandTime</code></p> <p>Global configuration for Island Time.</p>"},{"location":"api/core/core/io.islandtime/-island-time/#types","title":"Types","text":"Name Summary Initializer <p>common</p><code>interface Initializer</code>Controls the settings that Island Time is initialized with."},{"location":"api/core/core/io.islandtime/-island-time/#functions","title":"Functions","text":"Name Summary initialize <p>common</p><code>fun initialize(block: IslandTime.Initializer.() -&gt; Unit)</code>Initializes Island Time. initializeWith <p>common</p><code>fun initializeWith(provider: TimeZoneRulesProvider)</code>Initializes Island Time with a specific time zone rules provider, leaving all other settings in their default state. reset <p>common</p><code>fun reset()</code>Resets Island Time to an uninitialized state."},{"location":"api/core/core/io.islandtime/-island-time/initialize-with/","title":"initializeWith","text":"<p>//core/io.islandtime/IslandTime/initializeWith</p>"},{"location":"api/core/core/io.islandtime/-island-time/initialize-with/#initializewith","title":"initializeWith","text":"<p>common</p> <p><code>fun initializeWith(provider: TimeZoneRulesProvider)</code></p> <p>Initializes Island Time with a specific time zone rules provider, leaving all other settings in their default state.</p> <p>This method should be called prior to any of use of the library, usually during an application's initialization process. If Island Time is not explicitly initialized, the PlatformTimeZoneRulesProvider and all other default settings will be used.</p>"},{"location":"api/core/core/io.islandtime/-island-time/initialize-with/#see-also","title":"See also","text":"IslandTime.initialize"},{"location":"api/core/core/io.islandtime/-island-time/initialize-with/#throws","title":"Throws","text":"IllegalStateException if Island Time has already been initialized"},{"location":"api/core/core/io.islandtime/-island-time/initialize/","title":"initialize","text":"<p>//core/io.islandtime/IslandTime/initialize</p>"},{"location":"api/core/core/io.islandtime/-island-time/initialize/#initialize","title":"initialize","text":"<p>common</p> <p><code>fun initialize(block: IslandTime.Initializer.() -&gt; Unit)</code></p> <p>Initializes Island Time.</p> <p>This method should be called prior to any of use of the library, usually during an application's initialization process. If Island Time is not explicitly initialized, the PlatformTimeZoneRulesProvider and all other default settings will be used.</p>"},{"location":"api/core/core/io.islandtime/-island-time/initialize/#throws","title":"Throws","text":"IllegalStateException if Island Time has already been initialized"},{"location":"api/core/core/io.islandtime/-island-time/reset/","title":"reset","text":"<p>//core/io.islandtime/IslandTime/reset</p>"},{"location":"api/core/core/io.islandtime/-island-time/reset/#reset","title":"reset","text":"<p>common</p> <p><code>fun reset()</code></p> <p>Resets Island Time to an uninitialized state.</p> <p>This method is intended to be used to clean up custom providers in tests. It shouldn't be necessary to call this in production.</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/","title":"Initializer","text":"<p>//core/io.islandtime/IslandTime/Initializer</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/#initializer","title":"Initializer","text":"<p>common</p> <p><code>interface Initializer</code></p> <p>Controls the settings that Island Time is initialized with.</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/#properties","title":"Properties","text":"Name Summary dateTimeTextProvider <p>common</p><code>abstract var dateTimeTextProvider: DateTimeTextProvider</code>The date-time text provider to use. timeZoneRulesProvider <p>common</p><code>abstract var timeZoneRulesProvider: TimeZoneRulesProvider</code>The time zone rules provider to use. timeZoneTextProvider <p>common</p><code>abstract var timeZoneTextProvider: TimeZoneTextProvider</code>The time zone text provider to use."},{"location":"api/core/core/io.islandtime/-island-time/-initializer/date-time-text-provider/","title":"dateTimeTextProvider","text":"<p>//core/io.islandtime/IslandTime/Initializer/dateTimeTextProvider</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/date-time-text-provider/#datetimetextprovider","title":"dateTimeTextProvider","text":"<p>common</p> <p><code>abstract var dateTimeTextProvider: DateTimeTextProvider</code></p> <p>The date-time text provider to use.</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/time-zone-rules-provider/","title":"timeZoneRulesProvider","text":"<p>//core/io.islandtime/IslandTime/Initializer/timeZoneRulesProvider</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/time-zone-rules-provider/#timezonerulesprovider","title":"timeZoneRulesProvider","text":"<p>common</p> <p><code>abstract var timeZoneRulesProvider: TimeZoneRulesProvider</code></p> <p>The time zone rules provider to use.</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/time-zone-text-provider/","title":"timeZoneTextProvider","text":"<p>//core/io.islandtime/IslandTime/Initializer/timeZoneTextProvider</p>"},{"location":"api/core/core/io.islandtime/-island-time/-initializer/time-zone-text-provider/#timezonetextprovider","title":"timeZoneTextProvider","text":"<p>common</p> <p><code>abstract var timeZoneTextProvider: TimeZoneTextProvider</code></p> <p>The time zone text provider to use.</p>"},{"location":"api/core/core/io.islandtime/-month/","title":"Month","text":"<p>//core/io.islandtime/Month</p>"},{"location":"api/core/core/io.islandtime/-month/#month","title":"Month","text":"<p>common</p> <p><code>enum Month : Enum&lt;Month&gt; </code></p> <p>A month of the year.</p>"},{"location":"api/core/core/io.islandtime/-month/#entries","title":"Entries","text":"JANUARY <p>common</p><code>JANUARY</code> FEBRUARY <p>common</p><code>FEBRUARY</code> MARCH <p>common</p><code>MARCH</code> APRIL <p>common</p><code>APRIL</code> MAY <p>common</p><code>MAY</code> JUNE <p>common</p><code>JUNE</code> JULY <p>common</p><code>JULY</code> AUGUST <p>common</p><code>AUGUST</code> SEPTEMBER <p>common</p><code>SEPTEMBER</code> OCTOBER <p>common</p><code>OCTOBER</code> NOVEMBER <p>common</p><code>NOVEMBER</code> DECEMBER <p>common</p><code>DECEMBER</code>"},{"location":"api/core/core/io.islandtime/-month/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-month/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;Month&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached. valueOf <p>common</p><code>fun valueOf(value: String): Month</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;Month&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime/-month/day-range-in/","title":"dayRangeIn","text":"<p>//core/io.islandtime/Month/dayRangeIn</p>"},{"location":"api/core/core/io.islandtime/-month/day-range-in/#dayrangein","title":"dayRangeIn","text":"<p>common</p> <p><code>fun dayRangeIn(year: Int): IntRange</code></p> <p>Returns the range of valid days for this month within a given year</p>"},{"location":"api/core/core/io.islandtime/-month/day-range-in/#return","title":"Return","text":"<p>the range of valid days</p>"},{"location":"api/core/core/io.islandtime/-month/day-range-in/#parameters","title":"Parameters","text":"<p>common</p> year retrieve the day range within this year"},{"location":"api/core/core/io.islandtime/-month/display-name/","title":"displayName","text":"<p>//core/io.islandtime/Month/displayName</p>"},{"location":"api/core/core/io.islandtime/-month/display-name/#displayname","title":"displayName","text":"<p>common</p> <p><code>fun displayName(style: TextStyle, locale: Locale): String</code></p> <p>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead.</p> <p>The result depends on the configured DateTimeTextProvider and may differ between platforms.</p>"},{"location":"api/core/core/io.islandtime/-month/display-name/#return","title":"Return","text":"<p>the localized name or number if unavailable for the specified locale</p>"},{"location":"api/core/core/io.islandtime/-month/display-name/#parameters","title":"Parameters","text":"<p>common</p> style the style of text locale the locale"},{"location":"api/core/core/io.islandtime/-month/display-name/#see-also","title":"See also","text":"Month.localizedName"},{"location":"api/core/core/io.islandtime/-month/entries/","title":"entries","text":"<p>//core/io.islandtime/Month/entries</p>"},{"location":"api/core/core/io.islandtime/-month/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;Month&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in-common-year/","title":"firstDayOfYearInCommonYear","text":"<p>//core/io.islandtime/Month/firstDayOfYearInCommonYear</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in-common-year/#firstdayofyearincommonyear","title":"firstDayOfYearInCommonYear","text":"<p>common</p> <p><code>val firstDayOfYearInCommonYear: Int</code></p> <p>The day of the year corresponding to the month's first day in a common year.</p> <p>For example, the first day of MARCH is the 60th day of a common year.</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in-leap-year/","title":"firstDayOfYearInLeapYear","text":"<p>//core/io.islandtime/Month/firstDayOfYearInLeapYear</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in-leap-year/#firstdayofyearinleapyear","title":"firstDayOfYearInLeapYear","text":"<p>common</p> <p><code>val firstDayOfYearInLeapYear: Int</code></p> <p>The day of the year corresponding to the month's first day in a leap year.</p> <p>For example, the first day of MARCH is the 61st day of a leap year.</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in/","title":"firstDayOfYearIn","text":"<p>//core/io.islandtime/Month/firstDayOfYearIn</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in/#firstdayofyearin","title":"firstDayOfYearIn","text":"<p>common</p> <p><code>fun firstDayOfYearIn(year: Int): Int</code></p> <p>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year.</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in/#return","title":"Return","text":"<p>the first day of year number</p>"},{"location":"api/core/core/io.islandtime/-month/first-day-of-year-in/#parameters","title":"Parameters","text":"<p>common</p> year retrieve the day of year number within this year"},{"location":"api/core/core/io.islandtime/-month/last-day-in-common-year/","title":"lastDayInCommonYear","text":"<p>//core/io.islandtime/Month/lastDayInCommonYear</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-in-common-year/#lastdayincommonyear","title":"lastDayInCommonYear","text":"<p>common</p> <p><code>val lastDayInCommonYear: Int</code></p> <p>The last day of the month in a common year.</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-in-leap-year/","title":"lastDayInLeapYear","text":"<p>//core/io.islandtime/Month/lastDayInLeapYear</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-in-leap-year/#lastdayinleapyear","title":"lastDayInLeapYear","text":"<p>common</p> <p><code>val lastDayInLeapYear: Int</code></p> <p>The last day of the month in a leap year.</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-in/","title":"lastDayIn","text":"<p>//core/io.islandtime/Month/lastDayIn</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-in/#lastdayin","title":"lastDayIn","text":"<p>common</p> <p><code>fun lastDayIn(year: Int): Int</code></p> <p>Returns the last day of the month in year.</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-of-year-in/","title":"lastDayOfYearIn","text":"<p>//core/io.islandtime/Month/lastDayOfYearIn</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-of-year-in/#lastdayofyearin","title":"lastDayOfYearIn","text":"<p>common</p> <p><code>fun lastDayOfYearIn(year: Int): Int</code></p> <p>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year.</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-of-year-in/#return","title":"Return","text":"<p>the last day of year number</p>"},{"location":"api/core/core/io.islandtime/-month/last-day-of-year-in/#parameters","title":"Parameters","text":"<p>common</p> year retrieve the day of year number within this year"},{"location":"api/core/core/io.islandtime/-month/length-in-common-year/","title":"lengthInCommonYear","text":"<p>//core/io.islandtime/Month/lengthInCommonYear</p>"},{"location":"api/core/core/io.islandtime/-month/length-in-common-year/#lengthincommonyear","title":"lengthInCommonYear","text":"<p>common</p> <p><code>val lengthInCommonYear: Days</code></p> <p>The number of days in the month in a common year.</p>"},{"location":"api/core/core/io.islandtime/-month/length-in-leap-year/","title":"lengthInLeapYear","text":"<p>//core/io.islandtime/Month/lengthInLeapYear</p>"},{"location":"api/core/core/io.islandtime/-month/length-in-leap-year/#lengthinleapyear","title":"lengthInLeapYear","text":"<p>common</p> <p><code>val lengthInLeapYear: Days</code></p> <p>The number of days in the month in a leap year.</p>"},{"location":"api/core/core/io.islandtime/-month/length-in/","title":"lengthIn","text":"<p>//core/io.islandtime/Month/lengthIn</p>"},{"location":"api/core/core/io.islandtime/-month/length-in/#lengthin","title":"lengthIn","text":"<p>common</p> <p><code>fun lengthIn(year: Int): Days</code></p> <p>Returns the number of days in the month in year.</p>"},{"location":"api/core/core/io.islandtime/-month/length-in/#return","title":"Return","text":"<p>the number of days in the month</p>"},{"location":"api/core/core/io.islandtime/-month/length-in/#parameters","title":"Parameters","text":"<p>common</p> year retrieve the length of the month within this year"},{"location":"api/core/core/io.islandtime/-month/localized-name/","title":"localizedName","text":"<p>//core/io.islandtime/Month/localizedName</p>"},{"location":"api/core/core/io.islandtime/-month/localized-name/#localizedname","title":"localizedName","text":"<p>common</p> <p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code></p> <p>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms.</p>"},{"location":"api/core/core/io.islandtime/-month/localized-name/#return","title":"Return","text":"<p>the localized name or <code>null</code> if unavailable for the specified locale</p>"},{"location":"api/core/core/io.islandtime/-month/localized-name/#parameters","title":"Parameters","text":"<p>common</p> style the style of text locale the locale"},{"location":"api/core/core/io.islandtime/-month/localized-name/#see-also","title":"See also","text":"Month.displayName"},{"location":"api/core/core/io.islandtime/-month/minus/","title":"minus","text":"<p>//core/io.islandtime/Month/minus</p>"},{"location":"api/core/core/io.islandtime/-month/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(months: Months): Month</code></p> <p>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached.</p>"},{"location":"api/core/core/io.islandtime/-month/number/","title":"number","text":"<p>//core/io.islandtime/Month/number</p>"},{"location":"api/core/core/io.islandtime/-month/number/#number","title":"number","text":"<p>common</p> <p><code>val number: Int</code></p> <p>The ISO month number, from 1-12.</p>"},{"location":"api/core/core/io.islandtime/-month/plus/","title":"plus","text":"<p>//core/io.islandtime/Month/plus</p>"},{"location":"api/core/core/io.islandtime/-month/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(months: Months): Month</code></p> <p>Returns this month with months added to it, wrapping when the beginning or end of the year is reached.</p>"},{"location":"api/core/core/io.islandtime/-month/value-of/","title":"valueOf","text":"<p>//core/io.islandtime/Month/valueOf</p>"},{"location":"api/core/core/io.islandtime/-month/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): Month</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime/-month/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime/-month/values/","title":"values","text":"<p>//core/io.islandtime/Month/values</p>"},{"location":"api/core/core/io.islandtime/-month/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;Month&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime/-month/-a-p-r-i-l/","title":"APRIL","text":"<p>//core/io.islandtime/Month/APRIL</p>"},{"location":"api/core/core/io.islandtime/-month/-a-p-r-i-l/#april","title":"APRIL","text":"<p>common</p> <p><code>APRIL <p></p>"},{"location":"api/core/core/io.islandtime/-month/-a-p-r-i-l/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-a-p-r-i-l/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-a-u-g-u-s-t/","title":"AUGUST","text":"<p>//core/io.islandtime/Month/AUGUST</p>"},{"location":"api/core/core/io.islandtime/-month/-a-u-g-u-s-t/#august","title":"AUGUST","text":"<p>common</p> <p><code>AUGUST <p></p>"},{"location":"api/core/core/io.islandtime/-month/-a-u-g-u-s-t/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-a-u-g-u-s-t/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-companion/","title":"Companion","text":"<p>//core/io.islandtime/Month/Companion</p>"},{"location":"api/core/core/io.islandtime/-month/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-month/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Month</code> MIN <p>common</p><code>val MIN: Month</code>"},{"location":"api/core/core/io.islandtime/-month/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/Month/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-month/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Month</code></p>"},{"location":"api/core/core/io.islandtime/-month/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/Month/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-month/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Month</code></p>"},{"location":"api/core/core/io.islandtime/-month/-d-e-c-e-m-b-e-r/","title":"DECEMBER","text":"<p>//core/io.islandtime/Month/DECEMBER</p>"},{"location":"api/core/core/io.islandtime/-month/-d-e-c-e-m-b-e-r/#december","title":"DECEMBER","text":"<p>common</p> <p><code>DECEMBER <p></p>"},{"location":"api/core/core/io.islandtime/-month/-d-e-c-e-m-b-e-r/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-d-e-c-e-m-b-e-r/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-f-e-b-r-u-a-r-y/","title":"FEBRUARY","text":"<p>//core/io.islandtime/Month/FEBRUARY</p>"},{"location":"api/core/core/io.islandtime/-month/-f-e-b-r-u-a-r-y/#february","title":"FEBRUARY","text":"<p>common</p> <p><code>FEBRUARY <p></p>"},{"location":"api/core/core/io.islandtime/-month/-f-e-b-r-u-a-r-y/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-f-e-b-r-u-a-r-y/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-j-a-n-u-a-r-y/","title":"JANUARY","text":"<p>//core/io.islandtime/Month/JANUARY</p>"},{"location":"api/core/core/io.islandtime/-month/-j-a-n-u-a-r-y/#january","title":"JANUARY","text":"<p>common</p> <p><code>JANUARY <p></p>"},{"location":"api/core/core/io.islandtime/-month/-j-a-n-u-a-r-y/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-j-a-n-u-a-r-y/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-j-u-l-y/","title":"JULY","text":"<p>//core/io.islandtime/Month/JULY</p>"},{"location":"api/core/core/io.islandtime/-month/-j-u-l-y/#july","title":"JULY","text":"<p>common</p> <p><code>JULY <p></p>"},{"location":"api/core/core/io.islandtime/-month/-j-u-l-y/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-j-u-l-y/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-j-u-n-e/","title":"JUNE","text":"<p>//core/io.islandtime/Month/JUNE</p>"},{"location":"api/core/core/io.islandtime/-month/-j-u-n-e/#june","title":"JUNE","text":"<p>common</p> <p><code>JUNE <p></p>"},{"location":"api/core/core/io.islandtime/-month/-j-u-n-e/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-j-u-n-e/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-m-a-r-c-h/","title":"MARCH","text":"<p>//core/io.islandtime/Month/MARCH</p>"},{"location":"api/core/core/io.islandtime/-month/-m-a-r-c-h/#march","title":"MARCH","text":"<p>common</p> <p><code>MARCH <p></p>"},{"location":"api/core/core/io.islandtime/-month/-m-a-r-c-h/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-m-a-r-c-h/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-m-a-y/","title":"MAY","text":"<p>//core/io.islandtime/Month/MAY</p>"},{"location":"api/core/core/io.islandtime/-month/-m-a-y/#may","title":"MAY","text":"<p>common</p> <p><code>MAY <p></p>"},{"location":"api/core/core/io.islandtime/-month/-m-a-y/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-m-a-y/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-n-o-v-e-m-b-e-r/","title":"NOVEMBER","text":"<p>//core/io.islandtime/Month/NOVEMBER</p>"},{"location":"api/core/core/io.islandtime/-month/-n-o-v-e-m-b-e-r/#november","title":"NOVEMBER","text":"<p>common</p> <p><code>NOVEMBER <p></p>"},{"location":"api/core/core/io.islandtime/-month/-n-o-v-e-m-b-e-r/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-n-o-v-e-m-b-e-r/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-o-c-t-o-b-e-r/","title":"OCTOBER","text":"<p>//core/io.islandtime/Month/OCTOBER</p>"},{"location":"api/core/core/io.islandtime/-month/-o-c-t-o-b-e-r/#october","title":"OCTOBER","text":"<p>common</p> <p><code>OCTOBER <p></p>"},{"location":"api/core/core/io.islandtime/-month/-o-c-t-o-b-e-r/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-o-c-t-o-b-e-r/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-month/-s-e-p-t-e-m-b-e-r/","title":"SEPTEMBER","text":"<p>//core/io.islandtime/Month/SEPTEMBER</p>"},{"location":"api/core/core/io.islandtime/-month/-s-e-p-t-e-m-b-e-r/#september","title":"SEPTEMBER","text":"<p>common</p> <p><code>SEPTEMBER <p></p>"},{"location":"api/core/core/io.islandtime/-month/-s-e-p-t-e-m-b-e-r/#properties","title":"Properties","text":"Name Summary firstDayOfYearInCommonYear <p>common</p><code>val firstDayOfYearInCommonYear: Int</code>The day of the year corresponding to the month's first day in a common year. firstDayOfYearInLeapYear <p>common</p><code>val firstDayOfYearInLeapYear: Int</code>The day of the year corresponding to the month's first day in a leap year. lastDayInCommonYear <p>common</p><code>val lastDayInCommonYear: Int</code>The last day of the month in a common year. lastDayInLeapYear <p>common</p><code>val lastDayInLeapYear: Int</code>The last day of the month in a leap year. lengthInCommonYear <p>common</p><code>val lengthInCommonYear: Days</code>The number of days in the month in a common year. lengthInLeapYear <p>common</p><code>val lengthInLeapYear: Days</code>The number of days in the month in a leap year. name <p>common</p><code>val name: String</code> number <p>common</p><code>val number: Int</code>The ISO month number, from 1-12. ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-month/-s-e-p-t-e-m-b-e-r/#functions","title":"Functions","text":"Name Summary dayRangeIn <p>common</p><code>fun dayRangeIn(year: Int): IntRange</code>Returns the range of valid days for this month within a given year displayName <p>common</p><code>fun displayName(style: TextStyle, locale: Locale): String</code>A textual representation of the month, suitable for display purposes. The localized name will be returned, if available. If not, the ISO month number (1-12) will be returned instead. firstDayOfYearIn <p>common</p><code>fun firstDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's first days falls on. This may vary depending on whether the year is a leap year. For example, the first day of MARCH will be either 60th or 61st day of the year. lastDayIn <p>common</p><code>fun lastDayIn(year: Int): Int</code>Returns the last day of the month in year. lastDayOfYearIn <p>common</p><code>fun lastDayOfYearIn(year: Int): Int</code>Returns the day of the year that this month's last day falls on. This may vary depending on whether the year is a leap year. For example, the last of FEBRUARY will be either 59th or 60th day of the year. lengthIn <p>common</p><code>fun lengthIn(year: Int): Days</code>Returns the number of days in the month in year. localizedName <p>common</p><code>fun localizedName(style: TextStyle, locale: Locale): String?</code>The localized name of the month, if available for the locale in the specified style. The result depends on the configured DateTimeTextProvider and may differ between platforms. minus <p>common</p><code>operator fun minus(months: Months): Month</code>Returns this month with months subtracted from it, wrapping when the beginning or end of the year is reached. plus <p>common</p><code>operator fun plus(months: Months): Month</code>Returns this month with months added to it, wrapping when the beginning or end of the year is reached."},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/","title":"OffsetConversionStrategy","text":"<p>//core/io.islandtime/OffsetConversionStrategy</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/#offsetconversionstrategy","title":"OffsetConversionStrategy","text":"<p>common</p> <p><code>enum OffsetConversionStrategy : Enum&lt;OffsetConversionStrategy&gt; </code></p> <p>Strategy to use when converting a local date-time accompanied by a UtcOffset to a date and time that are valid according to the rules of a TimeZone.</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/#entries","title":"Entries","text":"PRESERVE_INSTANT <p>common</p><code>PRESERVE_INSTANT</code>Preserve the instant on the timeline, ignoring the local time. PRESERVE_LOCAL_TIME <p>common</p><code>PRESERVE_LOCAL_TIME</code>Preserve the local date and time in the new time zone (if possible), adjusting the offset if needed."},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;OffsetConversionStrategy&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/#functions","title":"Functions","text":"Name Summary valueOf <p>common</p><code>fun valueOf(value: String): OffsetConversionStrategy</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;OffsetConversionStrategy&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/entries/","title":"entries","text":"<p>//core/io.islandtime/OffsetConversionStrategy/entries</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;OffsetConversionStrategy&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/value-of/","title":"valueOf","text":"<p>//core/io.islandtime/OffsetConversionStrategy/valueOf</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): OffsetConversionStrategy</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/values/","title":"values","text":"<p>//core/io.islandtime/OffsetConversionStrategy/values</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;OffsetConversionStrategy&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-i-n-s-t-a-n-t/","title":"PRESERVE_INSTANT","text":"<p>//core/io.islandtime/OffsetConversionStrategy/PRESERVE_INSTANT</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-i-n-s-t-a-n-t/#preserve_instant","title":"PRESERVE_INSTANT","text":"<p>common</p> <p><code>PRESERVE_INSTANT <p></p> <p>Preserve the instant on the timeline, ignoring the local time.</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-i-n-s-t-a-n-t/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-l-o-c-a-l_-t-i-m-e/","title":"PRESERVE_LOCAL_TIME","text":"<p>//core/io.islandtime/OffsetConversionStrategy/PRESERVE_LOCAL_TIME</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-l-o-c-a-l_-t-i-m-e/#preserve_local_time","title":"PRESERVE_LOCAL_TIME","text":"<p>common</p> <p><code>PRESERVE_LOCAL_TIME <p></p> <p>Preserve the local date and time in the new time zone (if possible), adjusting the offset if needed.</p>"},{"location":"api/core/core/io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-l-o-c-a-l_-t-i-m-e/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime/-offset-date-time/","title":"OffsetDateTime","text":"<p>//core/io.islandtime/OffsetDateTime</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/#offsetdatetime","title":"OffsetDateTime","text":"<p><code>@Serializable(with = OffsetDateTimeIsoSerializer::class) <p>class OffsetDateTime(val dateTime: DateTime, val offset: UtcOffset) : TimePoint&lt;OffsetDateTime&gt; </p> <p>A date and time of day with an offset from UTC.</p> <p><code>OffsetDateTime</code> is intended to be used primarily for use cases involving persistence or network transfer where the application of time zone rules may be undesirable. For most applications, ZonedDateTime is a better choice since it takes time zone rules into account when performing calendrical calculations.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/#parameters","title":"Parameters","text":"<p>common</p> dateTime the local date and time of day offset the offset from UTC"},{"location":"api/core/core/io.islandtime/-offset-date-time/#throws","title":"Throws","text":"DateTimeException if the offset is invalid"},{"location":"api/core/core/io.islandtime/-offset-date-time/#constructors","title":"Constructors","text":"OffsetDateTime <p>common</p><code>constructor(date: Date, time: Time, offset: UtcOffset)</code>Creates an OffsetDateTime.<code>constructor(year: Int, month: Month, dayOfMonth: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, offset: UtcOffset)</code>Creates an OffsetDateTime.<code>constructor(year: Int, monthNumber: Int, dayOfMonth: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, offset: UtcOffset)</code>Creates an OffsetDateTime.<code>constructor(year: Int, dayOfYear: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, offset: UtcOffset)</code>Creates an OffsetDateTime.<code>constructor(dateTime: DateTime, offset: UtcOffset)</code>Creates an OffsetDateTime by combining a DateTime and UtcOffset."},{"location":"api/core/core/io.islandtime/-offset-date-time/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-offset-date-time/#properties","title":"Properties","text":"Name Summary additionalNanosecondsSinceUnixEpoch <p>common</p><code>open val additionalNanosecondsSinceUnixEpoch: Nanoseconds</code>The number of additional nanoseconds on top of secondsSinceUnixEpoch. date <p>common</p><code>val date: Date</code>The local date. dateTime <p>common</p><code>val dateTime: DateTime</code>The local date and time of day. dayOfMonth <p>common</p><code>val dayOfMonth: Int</code>The day of the month. dayOfWeek <p>common</p><code>val dayOfWeek: DayOfWeek</code>The day of the week. dayOfYear <p>common</p><code>val dayOfYear: Int</code>The day of the year. endOfMonth <p>common</p><code>val OffsetDateTime.endOfMonth: OffsetDateTime</code>The date-time at the last representable instant of the month that this date-time falls in. endOfWeek <p>common</p><code>val OffsetDateTime.endOfWeek: OffsetDateTime</code>The date-time at the last representable instant of the ISO week that this date-time falls in. endOfYear <p>common</p><code>val OffsetDateTime.endOfYear: OffsetDateTime</code>The date-time at the last representable instant of the year that this date-time falls in. hour <p>common</p><code>val hour: Int</code>The hour of the day. isInLeapDay <p>common</p><code>val OffsetDateTime.isInLeapDay: Boolean</code>Checks if this date-time falls within February 29. isInLeapYear <p>common</p><code>val OffsetDateTime.isInLeapYear: Boolean</code>Checks if this date-time falls within a leap year. lengthOfMonth <p>common</p><code>val OffsetDateTime.lengthOfMonth: Days</code>The length of this date-time's month in days. lengthOfWeekBasedYear <p>common</p><code>val OffsetDateTime.lengthOfWeekBasedYear: Weeks</code>The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks. lengthOfYear <p>common</p><code>val OffsetDateTime.lengthOfYear: Days</code>The length of this date-time's year in days. millisecondOfUnixEpoch <p>common</p><code>open override val millisecondOfUnixEpoch: Long</code>The millisecond of the Unix epoch. millisecondsSinceUnixEpoch <p>common</p><code>open val millisecondsSinceUnixEpoch: Milliseconds</code>The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. minute <p>common</p><code>val minute: Int</code>The minute of the hour. month <p>common</p><code>val month: Month</code>The month of the year. monthNumber <p>common</p><code>val monthNumber: Int</code>The ISO month number, from 1-12. nanosecond <p>common</p><code>open override val nanosecond: Int</code>The nanosecond of the second. offset <p>common</p><code>val offset: UtcOffset</code>The offset from UTC. second <p>common</p><code>val second: Int</code>The second of the minute. secondOfUnixEpoch <p>common</p><code>open override val secondOfUnixEpoch: Long</code>The second of the Unix epoch. secondsSinceUnixEpoch <p>common</p><code>open val secondsSinceUnixEpoch: Seconds</code>The number of seconds since the Unix epoch of 1970-01-01T00:00Z. startOfMonth <p>common</p><code>val OffsetDateTime.startOfMonth: OffsetDateTime</code>The date-time at the first instant of the month that this date-time falls in. startOfWeek <p>common</p><code>val OffsetDateTime.startOfWeek: OffsetDateTime</code>The date-time at the first instant of the ISO week that this date-time falls in. startOfYear <p>common</p><code>val OffsetDateTime.startOfYear: OffsetDateTime</code>The date-time at the first instant of the year that this date-time falls in. time <p>common</p><code>val time: Time</code>The local time of day. week <p>common</p><code>val OffsetDateTime.week: OffsetDateTimeInterval</code>The interval defining the ISO week that this date-time falls within. weekBasedYear <p>common</p><code>val OffsetDateTime.weekBasedYear: Int</code>The week-based year used in the ISO week date system. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>val OffsetDateTime.weekOfMonth: Int</code>The week of the month, from 0-6, calculated using the ISO week definition. weekOfWeekBasedYear <p>common</p><code>val OffsetDateTime.weekOfWeekBasedYear: Int</code>The week number used in the ISO week date system. weekOfYear <p>common</p><code>val OffsetDateTime.weekOfYear: Int</code>The week of the year, calculated using the ISO week definition. If the week number is associated with the preceding year, <code>0</code> will be returned. year <p>common</p><code>val year: Int</code>The year."},{"location":"api/core/core/io.islandtime/-offset-date-time/#functions","title":"Functions","text":"Name Summary adjustedTo <p>common</p><code>fun adjustedTo(newOffset: UtcOffset): OffsetDateTime</code>Returns this date-time with a new UTC offset, adjusting the date and time components such that the instant represented by it remains the same. asZonedDateTime <p>common</p><code>fun OffsetDateTime.asZonedDateTime(): ZonedDateTime</code>Converts this OffsetDateTime to an equivalent ZonedDateTime using a fixed-offset time zone. compareTo <p>common</p><code>open operator fun compareTo(other: TimePoint&lt;*&gt;): Int</code>Compares this time point with another time point. copy <p>common</p><code>fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset): OffsetDateTime</code><code>fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset): OffsetDateTime</code><code>fun copy(year: Int = this.year, dayOfYear: Int, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime</code><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime</code>Returns a copy of this date-time with the values of any individual components replaced by the new values specified. endOfWeek <p>common</p><code>fun OffsetDateTime.endOfWeek(settings: WeekSettings): OffsetDateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.<p>common</p><code>fun OffsetDateTime.endOfWeek(locale: Locale): OffsetDateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isSameInstantAs <p>common</p><code>open fun isSameInstantAs(other: TimePoint&lt;*&gt;): Boolean</code>Checks if this time point represents the same instant as other. Unlike the equals operator, equality is determined solely by timeline order. minus <p>common</p><code>operator fun minus(centuries: Centuries): OffsetDateTime</code>Returns this date-time with centuries subtracted from it.<p>common</p><code>operator fun minus(days: Days): OffsetDateTime</code>Returns this date-time with days subtracted from it.<p>common</p><code>operator fun minus(decades: Decades): OffsetDateTime</code>Returns this date-time with decades subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): OffsetDateTime</code><p>common</p><code>open operator override fun minus(hours: Hours): OffsetDateTime</code>Returns this date-time with hours subtracted from it.<p>common</p><code>open operator override fun minus(microseconds: Microseconds): OffsetDateTime</code>Returns this date-time with microseconds subtracted from it.<p>common</p><code>open operator override fun minus(milliseconds: Milliseconds): OffsetDateTime</code>Returns this date-time with milliseconds subtracted from it.<p>common</p><code>open operator override fun minus(minutes: Minutes): OffsetDateTime</code>Returns this date-time with minutes subtracted from it.<p>common</p><code>operator fun minus(months: Months): OffsetDateTime</code>Returns this date-time with months subtracted from it.<p>common</p><code>open operator override fun minus(nanoseconds: Nanoseconds): OffsetDateTime</code>Returns this date-time with nanoseconds subtracted from it.<p>common</p><code>operator fun minus(period: Period): OffsetDateTime</code>Returns this date-time with period subtracted from it.<p>common</p><code>open operator override fun minus(seconds: Seconds): OffsetDateTime</code>Returns this date-time with seconds subtracted from it.<p>common</p><code>operator fun minus(weeks: Weeks): OffsetDateTime</code>Returns this date-time with weeks subtracted from it.<p>common</p><code>operator fun minus(years: Years): OffsetDateTime</code>Returns this date-time with years subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): OffsetDateTime</code>Returns this date-time with duration subtracted from it. next <p>common</p><code>fun OffsetDateTime.next(dayOfWeek: DayOfWeek): OffsetDateTime</code>The next date-time after this one that falls on dayOfWeek. nextOrSame <p>common</p><code>fun OffsetDateTime.nextOrSame(dayOfWeek: DayOfWeek): OffsetDateTime</code>The next date-time that falls on dayOfWeek, or this date-time if it falls on the same day. plus <p>common</p><code>operator fun plus(centuries: Centuries): OffsetDateTime</code>Returns this date-tme with centuries added to it.<p>common</p><code>operator fun plus(days: Days): OffsetDateTime</code>Returns this date-time with days added to it.<p>common</p><code>operator fun plus(decades: Decades): OffsetDateTime</code>Returns this date-time with decades added to it.<p>common</p><code>operator fun plus(duration: Duration): OffsetDateTime</code><p>common</p><code>open operator override fun plus(hours: Hours): OffsetDateTime</code>Returns this date-time with hours added to it.<p>common</p><code>open operator override fun plus(microseconds: Microseconds): OffsetDateTime</code>Returns this date-time with microseconds added to it.<p>common</p><code>open operator override fun plus(milliseconds: Milliseconds): OffsetDateTime</code>Returns this date-time with milliseconds added to it.<p>common</p><code>open operator override fun plus(minutes: Minutes): OffsetDateTime</code>Returns this date-time with minutes added to it.<p>common</p><code>operator fun plus(months: Months): OffsetDateTime</code>Returns this date-time with months added to it.<p>common</p><code>open operator override fun plus(nanoseconds: Nanoseconds): OffsetDateTime</code>Returns this date-time with nanoseconds added to it.<p>common</p><code>operator fun plus(period: Period): OffsetDateTime</code>Returns this date-time with period added to it.<p>common</p><code>open operator override fun plus(seconds: Seconds): OffsetDateTime</code>Returns this date-time with seconds added to it.<p>common</p><code>operator fun plus(weeks: Weeks): OffsetDateTime</code>Returns this date-time with weeks added to it.<p>common</p><code>operator fun plus(years: Years): OffsetDateTime</code>Returns this date-time with years added to it.<p>common</p><code>operator fun plus(duration: Duration): OffsetDateTime</code>Returns this date-time with duration added to it. previous <p>common</p><code>fun OffsetDateTime.previous(dayOfWeek: DayOfWeek): OffsetDateTime</code>The last date-time before this one that falls on dayOfWeek. previousOrSame <p>common</p><code>fun OffsetDateTime.previousOrSame(dayOfWeek: DayOfWeek): OffsetDateTime</code>The previous date-time that falls on dayOfWeek, or this date-time if it falls on the same day. rangeTo <p>common</p><code>operator fun rangeTo(other: OffsetDateTime): OffsetDateTimeInterval</code> roundedDownTo <p>common</p><code>fun OffsetDateTime.roundedDownTo(unit: TimeUnit): OffsetDateTime</code>Returns this date-time, rounded down to match the precision of a given unit. roundedDownToNearest <p>common</p><code>fun OffsetDateTime.roundedDownToNearest(increment: Hours): OffsetDateTime</code>Returns this date-time, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedDownToNearest(increment: Microseconds): OffsetDateTime</code>Returns this date-time, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedDownToNearest(increment: Milliseconds): OffsetDateTime</code>Returns this date-time, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedDownToNearest(increment: Minutes): OffsetDateTime</code>Returns this date-time, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedDownToNearest(increment: Nanoseconds): OffsetDateTime</code>Returns this date-time, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedDownToNearest(increment: Seconds): OffsetDateTime</code>Returns this date-time, rounded down to the nearest second that satisfies the increment. roundedTo <p>common</p><code>fun OffsetDateTime.roundedTo(unit: TimeUnit): OffsetDateTime</code>Returns this date-time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up. roundedToNearest <p>common</p><code>fun OffsetDateTime.roundedToNearest(increment: Hours): OffsetDateTime</code>Returns this date-time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetDateTime.roundedToNearest(increment: Microseconds): OffsetDateTime</code>Returns this date-time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetDateTime.roundedToNearest(increment: Milliseconds): OffsetDateTime</code>Returns this date-time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetDateTime.roundedToNearest(increment: Minutes): OffsetDateTime</code>Returns this date-time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetDateTime.roundedToNearest(increment: Nanoseconds): OffsetDateTime</code>Returns this date-time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetDateTime.roundedToNearest(increment: Seconds): OffsetDateTime</code>Returns this date-time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up. roundedUpTo <p>common</p><code>fun OffsetDateTime.roundedUpTo(unit: TimeUnit): OffsetDateTime</code>Returns this date-time, rounded up to match the precision of a given unit. roundedUpToNearest <p>common</p><code>fun OffsetDateTime.roundedUpToNearest(increment: Hours): OffsetDateTime</code>Returns this date-time, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedUpToNearest(increment: Microseconds): OffsetDateTime</code>Returns this date-time, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedUpToNearest(increment: Milliseconds): OffsetDateTime</code>Returns this date-time, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedUpToNearest(increment: Minutes): OffsetDateTime</code>Returns this date-time, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedUpToNearest(increment: Nanoseconds): OffsetDateTime</code>Returns this date-time, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun OffsetDateTime.roundedUpToNearest(increment: Seconds): OffsetDateTime</code>Returns this date-time, rounded up to the nearest second that satisfies the increment. startOfWeek <p>common</p><code>fun OffsetDateTime.startOfWeek(settings: WeekSettings): OffsetDateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.<p>common</p><code>fun OffsetDateTime.startOfWeek(locale: Locale): OffsetDateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale. toInstant <p>common</p><code>fun OffsetDateTime.toInstant(): Instant</code>Converts this date-time to an Instant representing the same time point. toJavaOffsetDateTime <p>jvm</p><code>fun OffsetDateTime.toJavaOffsetDateTime(): OffsetDateTime</code>Converts this date-time to an equivalent Java <code>OffsetDateTime</code>. toNSDate <p>darwin</p><code>fun &lt;T&gt; TimePoint&lt;T&gt;.toNSDate(): &lt;Error class: unknown class&gt;</code>Converts this time point to an <code>NSDate</code>. toNSDateComponents <p>darwin</p><code>fun OffsetDateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this date-time to an equivalent <code>NSDateComponents</code> object. toOffsetTime <p>common</p><code>fun OffsetDateTime.toOffsetTime(): OffsetTime</code>Returns the combined time and UTC offset. toString <p>common</p><code>open override fun toString(): String</code>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04-15T17:31:45.923452091-04:00</code> or <code>2020-02-13T02:30Z</code>. toYear <p>common</p><code>fun OffsetDateTime.toYear(): Year</code>Returns this date-time with the precision reduced to the year. toYearMonth <p>common</p><code>fun OffsetDateTime.toYearMonth(): YearMonth</code>Returns this date-time with the precision reduced to the month. toZonedDateTime <p>common</p><code>fun OffsetDateTime.toZonedDateTime(zone: TimeZone, strategy: OffsetConversionStrategy): ZonedDateTime</code>Converts this OffsetDateTime to a ZonedDateTime using the specified strategy to adjust it to a valid date, time, and offset in zone. truncatedTo <p>common</p><code>fun OffsetDateTime.truncatedTo(unit: TimeUnit): OffsetDateTime</code>Returns this date-time, rounded down to match the precision of a given unit. until <p>common</p><code>infix fun OffsetDateTime.until(to: OffsetDateTime): OffsetDateTimeInterval</code>Creates an OffsetDateTimeInterval from this date-time up to, but not including to. week <p>common</p><code>fun OffsetDateTime.week(settings: WeekSettings): OffsetDateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be determined by the provided settings.<p>common</p><code>fun OffsetDateTime.week(locale: Locale): OffsetDateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be the default associated with the provided locale. weekBasedYear <p>common</p><code>fun OffsetDateTime.weekBasedYear(settings: WeekSettings): Int</code>The week-based year, calculated using the week definition in settings. This value differs from the regular ISO year when the week number falls in the preceding or following year.<p>common</p><code>fun OffsetDateTime.weekBasedYear(locale: Locale): Int</code>The week-based year, calculated using the week definition associated with the provided locale. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>fun OffsetDateTime.weekOfMonth(settings: WeekSettings): Int</code>The week of the month, from 0-6, calculated using the week definition in settings.<p>common</p><code>fun OffsetDateTime.weekOfMonth(locale: Locale): Int</code>The week of the month, from 0-6, calculated using the default week definition associated with the provided locale. weekOfWeekBasedYear <p>common</p><code>fun OffsetDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code>The week number of the week-based year, calculated using the week definition in settings.<p>common</p><code>fun OffsetDateTime.weekOfWeekBasedYear(locale: Locale): Int</code>The week number of the week-based year, calculated using the week definition associated with the provided locale. weekOfYear <p>common</p><code>fun OffsetDateTime.weekOfYear(settings: WeekSettings): Int</code>The week of the year, calculated using the week definition in settings. If the week number is associated with the preceding year, <code>0</code> will be returned.<p>common</p><code>fun OffsetDateTime.weekOfYear(locale: Locale): Int</code>The week of the year, calculated using the week definition associated with the provided locale. If the week number is associated with the preceding year, <code>0</code> will be returned."},{"location":"api/core/core/io.islandtime/-offset-date-time/-offset-date-time/","title":"OffsetDateTime","text":"<p>//core/io.islandtime/OffsetDateTime/OffsetDateTime</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-offset-date-time/#offsetdatetime","title":"OffsetDateTime","text":"<p>common</p> <p><code>constructor(date: Date, time: Time, offset: UtcOffset)</code></p> <p>Creates an OffsetDateTime.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-offset-date-time/#throws","title":"Throws","text":"DateTimeException if the offset is invalid <p>common</p> <p><code>constructor(year: Int, month: Month, dayOfMonth: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, offset: UtcOffset)</code></p> <p><code>constructor(year: Int, monthNumber: Int, dayOfMonth: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, offset: UtcOffset)</code></p> <p><code>constructor(year: Int, dayOfYear: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, offset: UtcOffset)</code></p> <p>Creates an OffsetDateTime.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-offset-date-time/#throws_1","title":"Throws","text":"DateTimeException if the date-time or offset is invalid <p>common</p> <p><code>constructor(dateTime: DateTime, offset: UtcOffset)</code></p> <p>Creates an OffsetDateTime by combining a DateTime and UtcOffset.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-offset-date-time/#parameters","title":"Parameters","text":"<p>common</p> dateTime the local date and time of day offset the offset from UTC"},{"location":"api/core/core/io.islandtime/-offset-date-time/adjusted-to/","title":"adjustedTo","text":"<p>//core/io.islandtime/OffsetDateTime/adjustedTo</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/adjusted-to/#adjustedto","title":"adjustedTo","text":"<p>common</p> <p><code>fun adjustedTo(newOffset: UtcOffset): OffsetDateTime</code></p> <p>Returns this date-time with a new UTC offset, adjusting the date and time components such that the instant represented by it remains the same.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/copy/","title":"copy","text":"<p>//core/io.islandtime/OffsetDateTime/copy</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset): OffsetDateTime</code></p> <p><code>fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset): OffsetDateTime</code></p> <p><code>fun copy(year: Int = this.year, dayOfYear: Int, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime</code></p> <p><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetDateTime</code></p> <p>Returns a copy of this date-time with the values of any individual components replaced by the new values specified.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/copy/#throws","title":"Throws","text":"DateTimeException if the resulting date-time is invalid"},{"location":"api/core/core/io.islandtime/-offset-date-time/date-time/","title":"dateTime","text":"<p>//core/io.islandtime/OffsetDateTime/dateTime</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/date-time/#datetime","title":"dateTime","text":"<p>common</p> <p><code>val dateTime: DateTime</code></p> <p>The local date and time of day.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/date/","title":"date","text":"<p>//core/io.islandtime/OffsetDateTime/date</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/date/#date","title":"date","text":"<p>common</p> <p><code>val date: Date</code></p> <p>The local date.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/day-of-month/","title":"dayOfMonth","text":"<p>//core/io.islandtime/OffsetDateTime/dayOfMonth</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/day-of-month/#dayofmonth","title":"dayOfMonth","text":"<p>common</p> <p><code>val dayOfMonth: Int</code></p> <p>The day of the month.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/day-of-week/","title":"dayOfWeek","text":"<p>//core/io.islandtime/OffsetDateTime/dayOfWeek</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/day-of-week/#dayofweek","title":"dayOfWeek","text":"<p>common</p> <p><code>val dayOfWeek: DayOfWeek</code></p> <p>The day of the week.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/day-of-year/","title":"dayOfYear","text":"<p>//core/io.islandtime/OffsetDateTime/dayOfYear</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/day-of-year/#dayofyear","title":"dayOfYear","text":"<p>common</p> <p><code>val dayOfYear: Int</code></p> <p>The day of the year.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/equals/","title":"equals","text":"<p>//core/io.islandtime/OffsetDateTime/equals</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/OffsetDateTime/hashCode</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/hour/","title":"hour","text":"<p>//core/io.islandtime/OffsetDateTime/hour</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/hour/#hour","title":"hour","text":"<p>common</p> <p><code>val hour: Int</code></p> <p>The hour of the day.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/millisecond-of-unix-epoch/","title":"millisecondOfUnixEpoch","text":"<p>//core/io.islandtime/OffsetDateTime/millisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/millisecond-of-unix-epoch/#millisecondofunixepoch","title":"millisecondOfUnixEpoch","text":"<p>common</p> <p><code>open override val millisecondOfUnixEpoch: Long</code></p> <p>The millisecond of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/minus/","title":"minus","text":"<p>//core/io.islandtime/OffsetDateTime/minus</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(period: Period): OffsetDateTime</code></p> <p>Returns this date-time with period subtracted from it.</p> <p>Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun minus(duration: Duration): OffsetDateTime</code></p> <p>common</p> <p><code>operator fun minus(duration: Duration): OffsetDateTime</code></p> <p>Returns this date-time with duration subtracted from it.</p> <p>common</p> <p><code>operator fun minus(centuries: Centuries): OffsetDateTime</code></p> <p>Returns this date-time with centuries subtracted from it.</p> <p>common</p> <p><code>operator fun minus(decades: Decades): OffsetDateTime</code></p> <p>Returns this date-time with decades subtracted from it.</p> <p>common</p> <p><code>operator fun minus(years: Years): OffsetDateTime</code></p> <p>Returns this date-time with years subtracted from it.</p> <p>common</p> <p><code>operator fun minus(months: Months): OffsetDateTime</code></p> <p>Returns this date-time with months subtracted from it.</p> <p>common</p> <p><code>operator fun minus(weeks: Weeks): OffsetDateTime</code></p> <p>Returns this date-time with weeks subtracted from it.</p> <p>common</p> <p><code>operator fun minus(days: Days): OffsetDateTime</code></p> <p>Returns this date-time with days subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(hours: Hours): OffsetDateTime</code></p> <p>Returns this date-time with hours subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(minutes: Minutes): OffsetDateTime</code></p> <p>Returns this date-time with minutes subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(seconds: Seconds): OffsetDateTime</code></p> <p>Returns this date-time with seconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(milliseconds: Milliseconds): OffsetDateTime</code></p> <p>Returns this date-time with milliseconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(microseconds: Microseconds): OffsetDateTime</code></p> <p>Returns this date-time with microseconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(nanoseconds: Nanoseconds): OffsetDateTime</code></p> <p>Returns this date-time with nanoseconds subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/minute/","title":"minute","text":"<p>//core/io.islandtime/OffsetDateTime/minute</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/minute/#minute","title":"minute","text":"<p>common</p> <p><code>val minute: Int</code></p> <p>The minute of the hour.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/month-number/","title":"monthNumber","text":"<p>//core/io.islandtime/OffsetDateTime/monthNumber</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/month-number/#monthnumber","title":"monthNumber","text":"<p>common</p> <p><code>val monthNumber: Int</code></p> <p>The ISO month number, from 1-12.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/month/","title":"month","text":"<p>//core/io.islandtime/OffsetDateTime/month</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/month/#month","title":"month","text":"<p>common</p> <p><code>val month: Month</code></p> <p>The month of the year.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/nanosecond/","title":"nanosecond","text":"<p>//core/io.islandtime/OffsetDateTime/nanosecond</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/nanosecond/#nanosecond","title":"nanosecond","text":"<p>common</p> <p><code>open override val nanosecond: Int</code></p> <p>The nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/offset/","title":"offset","text":"<p>//core/io.islandtime/OffsetDateTime/offset</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/offset/#offset","title":"offset","text":"<p>common</p> <p><code>val offset: UtcOffset</code></p> <p>The offset from UTC.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/plus/","title":"plus","text":"<p>//core/io.islandtime/OffsetDateTime/plus</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(period: Period): OffsetDateTime</code></p> <p>Returns this date-time with period added to it.</p> <p>Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun plus(duration: Duration): OffsetDateTime</code></p> <p>common</p> <p><code>operator fun plus(duration: Duration): OffsetDateTime</code></p> <p>Returns this date-time with duration added to it.</p> <p>common</p> <p><code>operator fun plus(centuries: Centuries): OffsetDateTime</code></p> <p>Returns this date-tme with centuries added to it.</p> <p>common</p> <p><code>operator fun plus(decades: Decades): OffsetDateTime</code></p> <p>Returns this date-time with decades added to it.</p> <p>common</p> <p><code>operator fun plus(years: Years): OffsetDateTime</code></p> <p>Returns this date-time with years added to it.</p> <p>common</p> <p><code>operator fun plus(months: Months): OffsetDateTime</code></p> <p>Returns this date-time with months added to it.</p> <p>common</p> <p><code>operator fun plus(weeks: Weeks): OffsetDateTime</code></p> <p>Returns this date-time with weeks added to it.</p> <p>common</p> <p><code>operator fun plus(days: Days): OffsetDateTime</code></p> <p>Returns this date-time with days added to it.</p> <p>common</p> <p><code>open operator override fun plus(hours: Hours): OffsetDateTime</code></p> <p>Returns this date-time with hours added to it.</p> <p>common</p> <p><code>open operator override fun plus(minutes: Minutes): OffsetDateTime</code></p> <p>Returns this date-time with minutes added to it.</p> <p>common</p> <p><code>open operator override fun plus(seconds: Seconds): OffsetDateTime</code></p> <p>Returns this date-time with seconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(milliseconds: Milliseconds): OffsetDateTime</code></p> <p>Returns this date-time with milliseconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(microseconds: Microseconds): OffsetDateTime</code></p> <p>Returns this date-time with microseconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(nanoseconds: Nanoseconds): OffsetDateTime</code></p> <p>Returns this date-time with nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/range-to/","title":"rangeTo","text":"<p>//core/io.islandtime/OffsetDateTime/rangeTo</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/range-to/#rangeto","title":"rangeTo","text":"<p>common</p> <p><code>operator fun rangeTo(other: OffsetDateTime): OffsetDateTimeInterval</code></p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/second-of-unix-epoch/","title":"secondOfUnixEpoch","text":"<p>//core/io.islandtime/OffsetDateTime/secondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/second-of-unix-epoch/#secondofunixepoch","title":"secondOfUnixEpoch","text":"<p>common</p> <p><code>open override val secondOfUnixEpoch: Long</code></p> <p>The second of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/second/","title":"second","text":"<p>//core/io.islandtime/OffsetDateTime/second</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/second/#second","title":"second","text":"<p>common</p> <p><code>val second: Int</code></p> <p>The second of the minute.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/time/","title":"time","text":"<p>//core/io.islandtime/OffsetDateTime/time</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/time/#time","title":"time","text":"<p>common</p> <p><code>val time: Time</code></p> <p>The local time of day.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/to-string/","title":"toString","text":"<p>//core/io.islandtime/OffsetDateTime/toString</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04-15T17:31:45.923452091-04:00</code> or <code>2020-02-13T02:30Z</code>.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/year/","title":"year","text":"<p>//core/io.islandtime/OffsetDateTime/year</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/year/#year","title":"year","text":"<p>common</p> <p><code>val year: Int</code></p> <p>The year.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/","title":"Companion","text":"<p>//core/io.islandtime/OffsetDateTime/Companion</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/#properties","title":"Properties","text":"Name Summary DefaultSortOrder <p>common</p><code>val DefaultSortOrder: Comparator&lt;OffsetDateTime&gt;</code>A Comparator that compares by instant, then date-time. Using this <code>Comparator</code> guarantees a deterministic order when sorting. MAX <p>common</p><code>val MAX: OffsetDateTime</code>The latest supported OffsetDateTime, which can be used as a \"far future\" sentinel. MIN <p>common</p><code>val MIN: OffsetDateTime</code>The earliest supported OffsetDateTime, which can be used as a \"far past\" sentinel. TimelineOrder <p>common</p><code>val TimelineOrder: Comparator&lt;TimePoint&lt;*&gt;&gt;</code>A Comparator that compares by timeline order only, ignoring any offset differences."},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/#functions","title":"Functions","text":"Name Summary fromMillisecondOfUnixEpoch <p>common</p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long, offset: UtcOffset): OffsetDateTime</code>Creates an OffsetDateTime from the millisecond of the Unix epoch at offset. fromMillisecondsSinceUnixEpoch <p>common</p><code>fun fromMillisecondsSinceUnixEpoch(milliseconds: Milliseconds, offset: UtcOffset): OffsetDateTime</code>Creates an OffsetDateTime from a duration of milliseconds relative to the Unix epoch at offset. fromSecondOfUnixEpoch <p>common</p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int = 0, offset: UtcOffset): OffsetDateTime</code>Creates an OffsetDateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second. fromSecondsSinceUnixEpoch <p>common</p><code>fun fromSecondsSinceUnixEpoch(seconds: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds, offset: UtcOffset): OffsetDateTime</code>Creates an OffsetDateTime from a duration of seconds relative to the Unix epoch at offset, optionally, with some number of additional nanoseconds added to it. now <p>common</p><code>fun OffsetDateTime.Companion.now(): OffsetDateTime</code>Gets the current OffsetDateTime from the system clock.<p>common</p><code>fun OffsetDateTime.Companion.now(clock: Clock): OffsetDateTime</code>Gets the current OffsetDateTime from the provided clock.<p>jvm</p><code>fun OffsetDateTime.Companion.now(clock: Clock): OffsetDateTime</code>Gets the current OffsetDateTime from the provided clock."},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-default-sort-order/","title":"DefaultSortOrder","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/DefaultSortOrder</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-default-sort-order/#defaultsortorder","title":"DefaultSortOrder","text":"<p>common</p> <p><code>val DefaultSortOrder: Comparator&lt;OffsetDateTime&gt;</code></p> <p>A Comparator that compares by instant, then date-time. Using this <code>Comparator</code> guarantees a deterministic order when sorting.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: OffsetDateTime</code></p> <p>The latest supported OffsetDateTime, which can be used as a \"far future\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: OffsetDateTime</code></p> <p>The earliest supported OffsetDateTime, which can be used as a \"far past\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-timeline-order/","title":"TimelineOrder","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/TimelineOrder</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/-timeline-order/#timelineorder","title":"TimelineOrder","text":"<p>common</p> <p><code>val TimelineOrder: Comparator&lt;TimePoint&lt;*&gt;&gt;</code></p> <p>A Comparator that compares by timeline order only, ignoring any offset differences.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-millisecond-of-unix-epoch/","title":"fromMillisecondOfUnixEpoch","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/fromMillisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","title":"fromMillisecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long, offset: UtcOffset): OffsetDateTime</code></p> <p>Creates an OffsetDateTime from the millisecond of the Unix epoch at offset.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-milliseconds-since-unix-epoch/","title":"fromMillisecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/fromMillisecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-milliseconds-since-unix-epoch/#frommillisecondssinceunixepoch","title":"fromMillisecondsSinceUnixEpoch","text":"<p>common</p> <p><code>fun fromMillisecondsSinceUnixEpoch(milliseconds: Milliseconds, offset: UtcOffset): OffsetDateTime</code></p> <p>Creates an OffsetDateTime from a duration of milliseconds relative to the Unix epoch at offset.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-second-of-unix-epoch/","title":"fromSecondOfUnixEpoch","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/fromSecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-second-of-unix-epoch/#fromsecondofunixepoch","title":"fromSecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int = 0, offset: UtcOffset): OffsetDateTime</code></p> <p>Creates an OffsetDateTime from the second of the Unix epoch at offset and optionally, the nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-seconds-since-unix-epoch/","title":"fromSecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/OffsetDateTime/Companion/fromSecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-offset-date-time/-companion/from-seconds-since-unix-epoch/#fromsecondssinceunixepoch","title":"fromSecondsSinceUnixEpoch","text":"<p>common</p> <p><code>fun fromSecondsSinceUnixEpoch(seconds: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds, offset: UtcOffset): OffsetDateTime</code></p> <p>Creates an OffsetDateTime from a duration of seconds relative to the Unix epoch at offset, optionally, with some number of additional nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/","title":"OffsetTime","text":"<p>//core/io.islandtime/OffsetTime</p>"},{"location":"api/core/core/io.islandtime/-offset-time/#offsettime","title":"OffsetTime","text":"<p><code>@Serializable(with = OffsetTimeIsoSerializer::class) <p>class OffsetTime(val time: Time, val offset: UtcOffset)</p> <p>A time of day with an offset from UTC.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/#throws","title":"Throws","text":"DateTimeException if the offset is invalid"},{"location":"api/core/core/io.islandtime/-offset-time/#constructors","title":"Constructors","text":"OffsetTime <p>common</p><code>constructor(hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0, offset: UtcOffset)</code>Creates an OffsetTime.<code>constructor(time: Time, offset: UtcOffset)</code>Creates an OffsetTime by combining a Time and UtcOffset."},{"location":"api/core/core/io.islandtime/-offset-time/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-offset-time/#properties","title":"Properties","text":"Name Summary hour <p>common</p><code>val hour: Int</code>The hour of the day. minute <p>common</p><code>val minute: Int</code>The minute of the hour. nanosecond <p>common</p><code>val nanosecond: Int</code>The nanosecond of the second. nanosecondsSinceStartOfUtcDay <p>common</p><code>val nanosecondsSinceStartOfUtcDay: Nanoseconds</code>The number of nanoseconds since the start of the day, but normalized to a UTC offset of zero, allowing OffsetTime objects with different offsets to be compared. offset <p>common</p><code>val offset: UtcOffset</code>The offset from UTC. second <p>common</p><code>val second: Int</code>The second of the minute. time <p>common</p><code>val time: Time</code>The time of day."},{"location":"api/core/core/io.islandtime/-offset-time/#functions","title":"Functions","text":"Name Summary adjustedTo <p>common</p><code>fun adjustedTo(newOffset: UtcOffset): OffsetTime</code>Changes the offset of this OffsetTime, adjusting the time component such that the instant represented by it remains the same. compareTo <p>common</p><code>operator fun compareTo(other: OffsetTime): Int</code>Compares to another OffsetTime based on timeline order, ignoring offset differences. copy <p>common</p><code>fun copy(time: Time = this.time, offset: UtcOffset = this.offset): OffsetTime</code><code>fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetTime</code>Returns a copy of this time with the values of any individual components replaced by the new values specified. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> minus <p>common</p><code>operator fun minus(duration: Duration): OffsetTime</code><p>common</p><code>operator fun minus(hours: Hours): OffsetTime</code>Returns this time with hours subtracted from it.<p>common</p><code>operator fun minus(microseconds: Microseconds): OffsetTime</code>Returns this time with microseconds subtracted from it.<p>common</p><code>operator fun minus(milliseconds: Milliseconds): OffsetTime</code>Returns this time with milliseconds subtracted from it.<p>common</p><code>operator fun minus(minutes: Minutes): OffsetTime</code>Returns this time with minutes subtracted from it.<p>common</p><code>operator fun minus(nanoseconds: Nanoseconds): OffsetTime</code>Returns this time with nanoseconds subtracted from it.<p>common</p><code>operator fun minus(seconds: Seconds): OffsetTime</code>Returns this time with seconds subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): OffsetTime</code>Returns this time with duration subtracted from it. plus <p>common</p><code>operator fun plus(duration: Duration): OffsetTime</code><p>common</p><code>operator fun plus(hours: Hours): OffsetTime</code>Returns this time with hours added to it.<p>common</p><code>operator fun plus(microseconds: Microseconds): OffsetTime</code>Returns this time with microseconds added to it.<p>common</p><code>operator fun plus(milliseconds: Milliseconds): OffsetTime</code>Returns this time with milliseconds added to it.<p>common</p><code>operator fun plus(minutes: Minutes): OffsetTime</code>Returns this time with minutes added to it.<p>common</p><code>operator fun plus(nanoseconds: Nanoseconds): OffsetTime</code>Returns this time with nanoseconds added to it.<p>common</p><code>operator fun plus(seconds: Seconds): OffsetTime</code>Returns this time with seconds added to it.<p>common</p><code>operator fun plus(duration: Duration): OffsetTime</code>Returns this time with duration added to it. roundedDownTo <p>common</p><code>fun OffsetTime.roundedDownTo(unit: TimeUnit): OffsetTime</code>Returns this time, rounded down to match the precision of a given unit. roundedDownToNearest <p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Hours): OffsetTime</code>Returns this time, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Microseconds): OffsetTime</code>Returns this time, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Milliseconds): OffsetTime</code>Returns this time, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Minutes): OffsetTime</code>Returns this time, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Nanoseconds): OffsetTime</code>Returns this time, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedDownToNearest(increment: Seconds): OffsetTime</code>Returns this time, rounded down to the nearest second that satisfies the increment. roundedTo <p>common</p><code>fun OffsetTime.roundedTo(unit: TimeUnit): OffsetTime</code>Returns this time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up. roundedToNearest <p>common</p><code>fun OffsetTime.roundedToNearest(increment: Hours): OffsetTime</code>Returns this time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Microseconds): OffsetTime</code>Returns this time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Milliseconds): OffsetTime</code>Returns this time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Minutes): OffsetTime</code>Returns this time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Nanoseconds): OffsetTime</code>Returns this time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun OffsetTime.roundedToNearest(increment: Seconds): OffsetTime</code>Returns this time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up. roundedUpTo <p>common</p><code>fun OffsetTime.roundedUpTo(unit: TimeUnit): OffsetTime</code>Returns this time, rounded up to match the precision of a given unit. roundedUpToNearest <p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Hours): OffsetTime</code>Returns this time, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Microseconds): OffsetTime</code>Returns this time, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Milliseconds): OffsetTime</code>Returns this time, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Minutes): OffsetTime</code>Returns this time, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Nanoseconds): OffsetTime</code>Returns this time, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun OffsetTime.roundedUpToNearest(increment: Seconds): OffsetTime</code>Returns this time, rounded up to the nearest second that satisfies the increment. toJavaOffsetTime <p>jvm</p><code>fun OffsetTime.toJavaOffsetTime(): OffsetTime</code>Converts this time to an equivalent Java <code>OffsetTime</code>. toNSDateComponents <p>darwin</p><code>fun OffsetTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this time to an equivalent <code>NSDateComponents</code> object. toString <p>common</p><code>open override fun toString(): String</code>Converts this time to a string in ISO-8601 extended format. For example, <code>17:31:45.923452091-04:00</code> or <code>02:30Z</code>. truncatedTo <p>common</p><code>fun OffsetTime.truncatedTo(unit: TimeUnit): OffsetTime</code>Returns this time, rounded down to match the precision of a given unit."},{"location":"api/core/core/io.islandtime/-offset-time/-offset-time/","title":"OffsetTime","text":"<p>//core/io.islandtime/OffsetTime/OffsetTime</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-offset-time/#offsettime","title":"OffsetTime","text":"<p>common</p> <p><code>constructor(hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0, offset: UtcOffset)</code></p> <p>Creates an OffsetTime.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-offset-time/#throws","title":"Throws","text":"DateTimeException if the time or offset is invalid <p>common</p> <p><code>constructor(time: Time, offset: UtcOffset)</code></p> <p>Creates an OffsetTime by combining a Time and UtcOffset.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/adjusted-to/","title":"adjustedTo","text":"<p>//core/io.islandtime/OffsetTime/adjustedTo</p>"},{"location":"api/core/core/io.islandtime/-offset-time/adjusted-to/#adjustedto","title":"adjustedTo","text":"<p>common</p> <p><code>fun adjustedTo(newOffset: UtcOffset): OffsetTime</code></p> <p>Changes the offset of this OffsetTime, adjusting the time component such that the instant represented by it remains the same.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/OffsetTime/compareTo</p>"},{"location":"api/core/core/io.islandtime/-offset-time/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>operator fun compareTo(other: OffsetTime): Int</code></p> <p>Compares to another OffsetTime based on timeline order, ignoring offset differences.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/compare-to/#see-also","title":"See also","text":"OffsetTime.Companion.DefaultSortOrder OffsetTime.Companion.TimelineOrder"},{"location":"api/core/core/io.islandtime/-offset-time/copy/","title":"copy","text":"<p>//core/io.islandtime/OffsetTime/copy</p>"},{"location":"api/core/core/io.islandtime/-offset-time/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(time: Time = this.time, offset: UtcOffset = this.offset): OffsetTime</code></p> <p><code>fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset): OffsetTime</code></p> <p>Returns a copy of this time with the values of any individual components replaced by the new values specified.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/copy/#throws","title":"Throws","text":"DateTimeException if the resulting time or offset is invalid"},{"location":"api/core/core/io.islandtime/-offset-time/equals/","title":"equals","text":"<p>//core/io.islandtime/OffsetTime/equals</p>"},{"location":"api/core/core/io.islandtime/-offset-time/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-offset-time/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/OffsetTime/hashCode</p>"},{"location":"api/core/core/io.islandtime/-offset-time/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-offset-time/hour/","title":"hour","text":"<p>//core/io.islandtime/OffsetTime/hour</p>"},{"location":"api/core/core/io.islandtime/-offset-time/hour/#hour","title":"hour","text":"<p>common</p> <p><code>val hour: Int</code></p> <p>The hour of the day.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/minus/","title":"minus","text":"<p>//core/io.islandtime/OffsetTime/minus</p>"},{"location":"api/core/core/io.islandtime/-offset-time/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(duration: Duration): OffsetTime</code></p> <p>common</p> <p><code>operator fun minus(duration: Duration): OffsetTime</code></p> <p>Returns this time with duration subtracted from it.</p> <p>common</p> <p><code>operator fun minus(hours: Hours): OffsetTime</code></p> <p>Returns this time with hours subtracted from it.</p> <p>common</p> <p><code>operator fun minus(minutes: Minutes): OffsetTime</code></p> <p>Returns this time with minutes subtracted from it.</p> <p>common</p> <p><code>operator fun minus(seconds: Seconds): OffsetTime</code></p> <p>Returns this time with seconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(milliseconds: Milliseconds): OffsetTime</code></p> <p>Returns this time with milliseconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(microseconds: Microseconds): OffsetTime</code></p> <p>Returns this time with microseconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): OffsetTime</code></p> <p>Returns this time with nanoseconds subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/minute/","title":"minute","text":"<p>//core/io.islandtime/OffsetTime/minute</p>"},{"location":"api/core/core/io.islandtime/-offset-time/minute/#minute","title":"minute","text":"<p>common</p> <p><code>val minute: Int</code></p> <p>The minute of the hour.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/nanosecond/","title":"nanosecond","text":"<p>//core/io.islandtime/OffsetTime/nanosecond</p>"},{"location":"api/core/core/io.islandtime/-offset-time/nanosecond/#nanosecond","title":"nanosecond","text":"<p>common</p> <p><code>val nanosecond: Int</code></p> <p>The nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/nanoseconds-since-start-of-utc-day/","title":"nanosecondsSinceStartOfUtcDay","text":"<p>//core/io.islandtime/OffsetTime/nanosecondsSinceStartOfUtcDay</p>"},{"location":"api/core/core/io.islandtime/-offset-time/nanoseconds-since-start-of-utc-day/#nanosecondssincestartofutcday","title":"nanosecondsSinceStartOfUtcDay","text":"<p>common</p> <p><code>val nanosecondsSinceStartOfUtcDay: Nanoseconds</code></p> <p>The number of nanoseconds since the start of the day, but normalized to a UTC offset of zero, allowing OffsetTime objects with different offsets to be compared.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/offset/","title":"offset","text":"<p>//core/io.islandtime/OffsetTime/offset</p>"},{"location":"api/core/core/io.islandtime/-offset-time/offset/#offset","title":"offset","text":"<p>common</p> <p><code>val offset: UtcOffset</code></p> <p>The offset from UTC.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/plus/","title":"plus","text":"<p>//core/io.islandtime/OffsetTime/plus</p>"},{"location":"api/core/core/io.islandtime/-offset-time/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(duration: Duration): OffsetTime</code></p> <p>common</p> <p><code>operator fun plus(duration: Duration): OffsetTime</code></p> <p>Returns this time with duration added to it.</p> <p>common</p> <p><code>operator fun plus(hours: Hours): OffsetTime</code></p> <p>Returns this time with hours added to it.</p> <p>common</p> <p><code>operator fun plus(minutes: Minutes): OffsetTime</code></p> <p>Returns this time with minutes added to it.</p> <p>common</p> <p><code>operator fun plus(seconds: Seconds): OffsetTime</code></p> <p>Returns this time with seconds added to it.</p> <p>common</p> <p><code>operator fun plus(milliseconds: Milliseconds): OffsetTime</code></p> <p>Returns this time with milliseconds added to it.</p> <p>common</p> <p><code>operator fun plus(microseconds: Microseconds): OffsetTime</code></p> <p>Returns this time with microseconds added to it.</p> <p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): OffsetTime</code></p> <p>Returns this time with nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/second/","title":"second","text":"<p>//core/io.islandtime/OffsetTime/second</p>"},{"location":"api/core/core/io.islandtime/-offset-time/second/#second","title":"second","text":"<p>common</p> <p><code>val second: Int</code></p> <p>The second of the minute.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/time/","title":"time","text":"<p>//core/io.islandtime/OffsetTime/time</p>"},{"location":"api/core/core/io.islandtime/-offset-time/time/#time","title":"time","text":"<p>common</p> <p><code>val time: Time</code></p> <p>The time of day.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/to-string/","title":"toString","text":"<p>//core/io.islandtime/OffsetTime/toString</p>"},{"location":"api/core/core/io.islandtime/-offset-time/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this time to a string in ISO-8601 extended format. For example, <code>17:31:45.923452091-04:00</code> or <code>02:30Z</code>.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/","title":"Companion","text":"<p>//core/io.islandtime/OffsetTime/Companion</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/#properties","title":"Properties","text":"Name Summary DefaultSortOrder <p>common</p><code>val DefaultSortOrder: Comparator&lt;OffsetTime&gt;</code>A Comparator that compares by UTC equivalent instant, then time. Using this <code>Comparator</code> guarantees a deterministic order when sorting. MAX <p>common</p><code>val MAX: OffsetTime</code>The largest allowed OffsetTime -- <code>23:59:59.999999999-18:00</code>. MIN <p>common</p><code>val MIN: OffsetTime</code>The smallest allowed OffsetTime -- <code>00:00+18:00</code>. TimelineOrder <p>common</p><code>val TimelineOrder: Comparator&lt;OffsetTime&gt;</code>A Comparator that compares by timeline order only, ignoring any offset differences."},{"location":"api/core/core/io.islandtime/-offset-time/-companion/#functions","title":"Functions","text":"Name Summary now <p>common</p><code>fun OffsetTime.Companion.now(): OffsetTime</code>Gets the current OffsetTime from the system clock.<p>common</p><code>fun OffsetTime.Companion.now(clock: Clock): OffsetTime</code>Gets the current OffsetTime from the provided clock.<p>jvm</p><code>fun OffsetTime.Companion.now(clock: Clock): OffsetTime</code>Gets the current OffsetTime from the provided clock."},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-default-sort-order/","title":"DefaultSortOrder","text":"<p>//core/io.islandtime/OffsetTime/Companion/DefaultSortOrder</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-default-sort-order/#defaultsortorder","title":"DefaultSortOrder","text":"<p>common</p> <p><code>val DefaultSortOrder: Comparator&lt;OffsetTime&gt;</code></p> <p>A Comparator that compares by UTC equivalent instant, then time. Using this <code>Comparator</code> guarantees a deterministic order when sorting.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/OffsetTime/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: OffsetTime</code></p> <p>The largest allowed OffsetTime -- <code>23:59:59.999999999-18:00</code>.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/OffsetTime/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: OffsetTime</code></p> <p>The smallest allowed OffsetTime -- <code>00:00+18:00</code>.</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-timeline-order/","title":"TimelineOrder","text":"<p>//core/io.islandtime/OffsetTime/Companion/TimelineOrder</p>"},{"location":"api/core/core/io.islandtime/-offset-time/-companion/-timeline-order/#timelineorder","title":"TimelineOrder","text":"<p>common</p> <p><code>val TimelineOrder: Comparator&lt;OffsetTime&gt;</code></p> <p>A Comparator that compares by timeline order only, ignoring any offset differences.</p>"},{"location":"api/core/core/io.islandtime/-platform-instant/","title":"PlatformInstant","text":"<p>//core/io.islandtime/PlatformInstant</p>"},{"location":"api/core/core/io.islandtime/-platform-instant/#platforminstant","title":"PlatformInstant","text":"<p>common</p> <p><code>expect class PlatformInstant</code></p> <p>A platform-specific representation of an instant in time.</p> <p>darwin</p> <p><code>actual typealias PlatformInstant = &lt;Error class: unknown class&gt;</code></p> <p>jvm</p> <p><code>actual typealias PlatformInstant = Instant</code></p>"},{"location":"api/core/core/io.islandtime/-time/","title":"Time","text":"<p>//core/io.islandtime/Time</p>"},{"location":"api/core/core/io.islandtime/-time/#time","title":"Time","text":"<p><code>@Serializable(with = TimeIsoSerializer::class) <p>class Time(val hour: Int, val minute: Int, val second: Int = 0, val nanosecond: Int = 0) : Comparable&lt;Time&gt; </p> <p>A time of day in an ambiguous region.</p>"},{"location":"api/core/core/io.islandtime/-time/#parameters","title":"Parameters","text":"<p>common</p> hour the hour of day minute the minute of the hour second the second of the minute nanosecond the nanosecond of the second"},{"location":"api/core/core/io.islandtime/-time/#throws","title":"Throws","text":"DateTimeException if the time is invalid"},{"location":"api/core/core/io.islandtime/-time/#constructors","title":"Constructors","text":"Time <p>common</p><code>constructor(hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0)</code>Creates a Time from its individual components."},{"location":"api/core/core/io.islandtime/-time/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-time/#properties","title":"Properties","text":"Name Summary hour <p>common</p><code>val hour: Int</code>The hour of the day. minute <p>common</p><code>val minute: Int</code>The minute of the hour. nanosecond <p>common</p><code>val nanosecond: Int = 0</code>The nanosecond of the second. nanosecondOfDay <p>common</p><code>val nanosecondOfDay: Long</code>The nanosecond of the day. nanosecondsSinceStartOfDay <p>common</p><code>val nanosecondsSinceStartOfDay: Nanoseconds</code>The number of nanoseconds since the start of the day. second <p>common</p><code>val second: Int = 0</code>The second of the minute. secondOfDay <p>common</p><code>val secondOfDay: Int</code>The second of the day. secondsSinceStartOfDay <p>common</p><code>val secondsSinceStartOfDay: Seconds</code>The number of seconds since the start of the day."},{"location":"api/core/core/io.islandtime/-time/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun Time.at(offset: UtcOffset): OffsetTime</code>Combines a local time with a UTC offset to create an OffsetTime. compareTo <p>common</p><code>open operator override fun compareTo(other: Time): Int</code> component1 <p>common</p><code>operator fun component1(): Int</code> component2 <p>common</p><code>operator fun component2(): Int</code> component3 <p>common</p><code>operator fun component3(): Int</code> component4 <p>common</p><code>operator fun component4(): Int</code> copy <p>common</p><code>fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): Time</code>Returns a copy of this time with the values of any individual components replaced by the new values specified. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> minus <p>common</p><code>operator fun minus(duration: Duration): Time</code><p>common</p><code>operator fun minus(hours: Hours): Time</code>Returns this time with hours subtracted from it.<p>common</p><code>operator fun minus(microseconds: Microseconds): Time</code>Returns this time with microseconds subtracted from it.<p>common</p><code>operator fun minus(milliseconds: Milliseconds): Time</code>Returns this time with milliseconds subtracted from it.<p>common</p><code>operator fun minus(minutes: Minutes): Time</code>Returns this time with minutes subtracted from it.<p>common</p><code>operator fun minus(nanoseconds: Nanoseconds): Time</code>Returns this time with nanoseconds subtracted from it.<p>common</p><code>operator fun minus(seconds: Seconds): Time</code>Returns this time with seconds subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): Time</code>Returns this time with duration subtracted from it. plus <p>common</p><code>operator fun plus(duration: Duration): Time</code><p>common</p><code>operator fun plus(hours: Hours): Time</code>Returns this time with hours added to it.<p>common</p><code>operator fun plus(microseconds: Microseconds): Time</code>Returns this time with microseconds added to it.<p>common</p><code>operator fun plus(milliseconds: Milliseconds): Time</code>Returns this time with milliseconds added to it.<p>common</p><code>operator fun plus(minutes: Minutes): Time</code>Returns this time with minutes added to it.<p>common</p><code>operator fun plus(nanoseconds: Nanoseconds): Time</code>Returns this time with nanoseconds added to it.<p>common</p><code>operator fun plus(seconds: Seconds): Time</code>Returns this time with seconds added to it.<p>common</p><code>operator fun plus(duration: Duration): Time</code>Returns this time with duration added to it. roundedDownTo <p>common</p><code>fun Time.roundedDownTo(unit: TimeUnit): Time</code>Returns this time, rounded down to match the precision of a given unit. roundedDownToNearest <p>common</p><code>fun Time.roundedDownToNearest(increment: Hours): Time</code>Returns this time, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun Time.roundedDownToNearest(increment: Microseconds): Time</code>Returns this time, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun Time.roundedDownToNearest(increment: Milliseconds): Time</code>Returns this time, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun Time.roundedDownToNearest(increment: Minutes): Time</code>Returns this time, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun Time.roundedDownToNearest(increment: Nanoseconds): Time</code>Returns this time, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun Time.roundedDownToNearest(increment: Seconds): Time</code>Returns this time, rounded down to the nearest second that satisfies the increment. roundedTo <p>common</p><code>fun Time.roundedTo(unit: TimeUnit): Time</code>Returns this time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up. roundedToNearest <p>common</p><code>fun Time.roundedToNearest(increment: Hours): Time</code>Returns this time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Time.roundedToNearest(increment: Microseconds): Time</code>Returns this time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Time.roundedToNearest(increment: Milliseconds): Time</code>Returns this time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Time.roundedToNearest(increment: Minutes): Time</code>Returns this time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Time.roundedToNearest(increment: Nanoseconds): Time</code>Returns this time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun Time.roundedToNearest(increment: Seconds): Time</code>Returns this time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up. roundedUpTo <p>common</p><code>fun Time.roundedUpTo(unit: TimeUnit): Time</code>Returns this time, rounded up to match the precision of a given unit. roundedUpToNearest <p>common</p><code>fun Time.roundedUpToNearest(increment: Hours): Time</code>Returns this time, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun Time.roundedUpToNearest(increment: Microseconds): Time</code>Returns this time, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun Time.roundedUpToNearest(increment: Milliseconds): Time</code>Returns this time, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun Time.roundedUpToNearest(increment: Minutes): Time</code>Returns this time, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun Time.roundedUpToNearest(increment: Nanoseconds): Time</code>Returns this time, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun Time.roundedUpToNearest(increment: Seconds): Time</code>Returns this time, rounded up to the nearest second that satisfies the increment. toJavaLocalTime <p>jvm</p><code>fun Time.toJavaLocalTime(): LocalTime</code>Converts this time to an equivalent Java <code>LocalTime</code>. toNSDateComponents <p>darwin</p><code>fun Time.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this time to an equivalent <code>NSDateComponents</code> object. toString <p>common</p><code>open override fun toString(): String</code>Converts this time to a string in ISO-8601 extended format. For example, <code>17:31:45.923452091</code> or <code>02:30</code>. truncatedTo <p>common</p><code>fun Time.truncatedTo(unit: TimeUnit): Time</code>Returns this time, rounded down to match the precision of a given unit."},{"location":"api/core/core/io.islandtime/-time/-time/","title":"Time","text":"<p>//core/io.islandtime/Time/Time</p>"},{"location":"api/core/core/io.islandtime/-time/-time/#time","title":"Time","text":"<p>common</p> <p><code>constructor(hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0)</code></p> <p>Creates a Time from its individual components.</p>"},{"location":"api/core/core/io.islandtime/-time/-time/#parameters","title":"Parameters","text":"<p>common</p> hour the hour of day minute the minute of the hour second the second of the minute nanosecond the nanosecond of the second"},{"location":"api/core/core/io.islandtime/-time/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/Time/compareTo</p>"},{"location":"api/core/core/io.islandtime/-time/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Time): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time/component1/","title":"component1","text":"<p>//core/io.islandtime/Time/component1</p>"},{"location":"api/core/core/io.islandtime/-time/component1/#component1","title":"component1","text":"<p>common</p> <p><code>operator fun component1(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time/component2/","title":"component2","text":"<p>//core/io.islandtime/Time/component2</p>"},{"location":"api/core/core/io.islandtime/-time/component2/#component2","title":"component2","text":"<p>common</p> <p><code>operator fun component2(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time/component3/","title":"component3","text":"<p>//core/io.islandtime/Time/component3</p>"},{"location":"api/core/core/io.islandtime/-time/component3/#component3","title":"component3","text":"<p>common</p> <p><code>operator fun component3(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time/component4/","title":"component4","text":"<p>//core/io.islandtime/Time/component4</p>"},{"location":"api/core/core/io.islandtime/-time/component4/#component4","title":"component4","text":"<p>common</p> <p><code>operator fun component4(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time/copy/","title":"copy","text":"<p>//core/io.islandtime/Time/copy</p>"},{"location":"api/core/core/io.islandtime/-time/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond): Time</code></p> <p>Returns a copy of this time with the values of any individual components replaced by the new values specified.</p>"},{"location":"api/core/core/io.islandtime/-time/copy/#throws","title":"Throws","text":"DateTimeException if the resulting time is invalid"},{"location":"api/core/core/io.islandtime/-time/equals/","title":"equals","text":"<p>//core/io.islandtime/Time/equals</p>"},{"location":"api/core/core/io.islandtime/-time/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-time/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/Time/hashCode</p>"},{"location":"api/core/core/io.islandtime/-time/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time/hour/","title":"hour","text":"<p>//core/io.islandtime/Time/hour</p>"},{"location":"api/core/core/io.islandtime/-time/hour/#hour","title":"hour","text":"<p>common</p> <p><code>val hour: Int</code></p> <p>The hour of the day.</p>"},{"location":"api/core/core/io.islandtime/-time/minus/","title":"minus","text":"<p>//core/io.islandtime/Time/minus</p>"},{"location":"api/core/core/io.islandtime/-time/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(duration: Duration): Time</code></p> <p>common</p> <p><code>operator fun minus(duration: Duration): Time</code></p> <p>Returns this time with duration subtracted from it.</p> <p>common</p> <p><code>operator fun minus(hours: Hours): Time</code></p> <p>Returns this time with hours subtracted from it.</p> <p>common</p> <p><code>operator fun minus(minutes: Minutes): Time</code></p> <p>Returns this time with minutes subtracted from it.</p> <p>common</p> <p><code>operator fun minus(seconds: Seconds): Time</code></p> <p>Returns this time with seconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(milliseconds: Milliseconds): Time</code></p> <p>Returns this time with milliseconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(microseconds: Microseconds): Time</code></p> <p>Returns this time with microseconds subtracted from it.</p> <p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Time</code></p> <p>Returns this time with nanoseconds subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-time/minute/","title":"minute","text":"<p>//core/io.islandtime/Time/minute</p>"},{"location":"api/core/core/io.islandtime/-time/minute/#minute","title":"minute","text":"<p>common</p> <p><code>val minute: Int</code></p> <p>The minute of the hour.</p>"},{"location":"api/core/core/io.islandtime/-time/nanosecond-of-day/","title":"nanosecondOfDay","text":"<p>//core/io.islandtime/Time/nanosecondOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/nanosecond-of-day/#nanosecondofday","title":"nanosecondOfDay","text":"<p>common</p> <p><code>val nanosecondOfDay: Long</code></p> <p>The nanosecond of the day.</p>"},{"location":"api/core/core/io.islandtime/-time/nanosecond/","title":"nanosecond","text":"<p>//core/io.islandtime/Time/nanosecond</p>"},{"location":"api/core/core/io.islandtime/-time/nanosecond/#nanosecond","title":"nanosecond","text":"<p>common</p> <p><code>val nanosecond: Int = 0</code></p> <p>The nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-time/nanoseconds-since-start-of-day/","title":"nanosecondsSinceStartOfDay","text":"<p>//core/io.islandtime/Time/nanosecondsSinceStartOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/nanoseconds-since-start-of-day/#nanosecondssincestartofday","title":"nanosecondsSinceStartOfDay","text":"<p>common</p> <p><code>val nanosecondsSinceStartOfDay: Nanoseconds</code></p> <p>The number of nanoseconds since the start of the day.</p>"},{"location":"api/core/core/io.islandtime/-time/plus/","title":"plus","text":"<p>//core/io.islandtime/Time/plus</p>"},{"location":"api/core/core/io.islandtime/-time/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(duration: Duration): Time</code></p> <p>common</p> <p><code>operator fun plus(duration: Duration): Time</code></p> <p>Returns this time with duration added to it.</p> <p>common</p> <p><code>operator fun plus(hours: Hours): Time</code></p> <p>Returns this time with hours added to it.</p> <p>common</p> <p><code>operator fun plus(minutes: Minutes): Time</code></p> <p>Returns this time with minutes added to it.</p> <p>common</p> <p><code>operator fun plus(seconds: Seconds): Time</code></p> <p>Returns this time with seconds added to it.</p> <p>common</p> <p><code>operator fun plus(milliseconds: Milliseconds): Time</code></p> <p>Returns this time with milliseconds added to it.</p> <p>common</p> <p><code>operator fun plus(microseconds: Microseconds): Time</code></p> <p>Returns this time with microseconds added to it.</p> <p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Time</code></p> <p>Returns this time with nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-time/second-of-day/","title":"secondOfDay","text":"<p>//core/io.islandtime/Time/secondOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/second-of-day/#secondofday","title":"secondOfDay","text":"<p>common</p> <p><code>val secondOfDay: Int</code></p> <p>The second of the day.</p>"},{"location":"api/core/core/io.islandtime/-time/second/","title":"second","text":"<p>//core/io.islandtime/Time/second</p>"},{"location":"api/core/core/io.islandtime/-time/second/#second","title":"second","text":"<p>common</p> <p><code>val second: Int = 0</code></p> <p>The second of the minute.</p>"},{"location":"api/core/core/io.islandtime/-time/seconds-since-start-of-day/","title":"secondsSinceStartOfDay","text":"<p>//core/io.islandtime/Time/secondsSinceStartOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/seconds-since-start-of-day/#secondssincestartofday","title":"secondsSinceStartOfDay","text":"<p>common</p> <p><code>val secondsSinceStartOfDay: Seconds</code></p> <p>The number of seconds since the start of the day.</p>"},{"location":"api/core/core/io.islandtime/-time/to-string/","title":"toString","text":"<p>//core/io.islandtime/Time/toString</p>"},{"location":"api/core/core/io.islandtime/-time/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this time to a string in ISO-8601 extended format. For example, <code>17:31:45.923452091</code> or <code>02:30</code>.</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/","title":"Companion","text":"<p>//core/io.islandtime/Time/Companion</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-time/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Time</code> MIDNIGHT <p>common</p><code>val MIDNIGHT: Time</code> MIN <p>common</p><code>val MIN: Time</code> NOON <p>common</p><code>val NOON: Time</code>"},{"location":"api/core/core/io.islandtime/-time/-companion/#functions","title":"Functions","text":"Name Summary fromNanosecondOfDay <p>common</p><code>fun fromNanosecondOfDay(nanosecondOfDay: Long): Time</code>Creates a Time from the nanosecond of the day. fromNanosecondsSinceStartOfDay <p>common</p><code>fun fromNanosecondsSinceStartOfDay(nanoseconds: Nanoseconds): Time</code>Creates the Time at a number of nanoseconds since the start of the day. fromSecondOfDay <p>common</p><code>fun fromSecondOfDay(secondOfDay: Int, nanosecond: Int = 0): Time</code>Creates a Time from the second of the day and optionally, the number of nanoseconds within that second. fromSecondsSinceStartOfDay <p>common</p><code>fun fromSecondsSinceStartOfDay(seconds: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds): Time</code>Creates the Time at a number of seconds since the start of the day and optionally, a number of additional nanoseconds. now <p>common</p><code>fun Time.Companion.now(): Time</code>Gets the current Time from the system clock.<p>common</p><code>fun Time.Companion.now(clock: Clock): Time</code>Gets the current Time from the provided clock.<p>jvm</p><code>fun Time.Companion.now(clock: Clock): Time</code>Gets the current Time from the provided clock."},{"location":"api/core/core/io.islandtime/-time/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/Time/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Time</code></p>"},{"location":"api/core/core/io.islandtime/-time/-companion/-m-i-d-n-i-g-h-t/","title":"MIDNIGHT","text":"<p>//core/io.islandtime/Time/Companion/MIDNIGHT</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/-m-i-d-n-i-g-h-t/#midnight","title":"MIDNIGHT","text":"<p>common</p> <p><code>val MIDNIGHT: Time</code></p>"},{"location":"api/core/core/io.islandtime/-time/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/Time/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Time</code></p>"},{"location":"api/core/core/io.islandtime/-time/-companion/-n-o-o-n/","title":"NOON","text":"<p>//core/io.islandtime/Time/Companion/NOON</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/-n-o-o-n/#noon","title":"NOON","text":"<p>common</p> <p><code>val NOON: Time</code></p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanosecond-of-day/","title":"fromNanosecondOfDay","text":"<p>//core/io.islandtime/Time/Companion/fromNanosecondOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanosecond-of-day/#fromnanosecondofday","title":"fromNanosecondOfDay","text":"<p>common</p> <p><code>fun fromNanosecondOfDay(nanosecondOfDay: Long): Time</code></p> <p>Creates a Time from the nanosecond of the day.</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanosecond-of-day/#return","title":"Return","text":"<p>a new Time</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanosecond-of-day/#parameters","title":"Parameters","text":"<p>common</p> nanosecondOfDay the nanosecond of the day"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanosecond-of-day/#throws","title":"Throws","text":"DateTimeException if the time is invalid"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanoseconds-since-start-of-day/","title":"fromNanosecondsSinceStartOfDay","text":"<p>//core/io.islandtime/Time/Companion/fromNanosecondsSinceStartOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanoseconds-since-start-of-day/#fromnanosecondssincestartofday","title":"fromNanosecondsSinceStartOfDay","text":"<p>common</p> <p><code>fun fromNanosecondsSinceStartOfDay(nanoseconds: Nanoseconds): Time</code></p> <p>Creates the Time at a number of nanoseconds since the start of the day.</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanoseconds-since-start-of-day/#return","title":"Return","text":"<p>a new Time</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanoseconds-since-start-of-day/#parameters","title":"Parameters","text":"<p>common</p> nanoseconds the number of nanoseconds since the start of the day"},{"location":"api/core/core/io.islandtime/-time/-companion/from-nanoseconds-since-start-of-day/#throws","title":"Throws","text":"DateTimeException if the time is invalid"},{"location":"api/core/core/io.islandtime/-time/-companion/from-second-of-day/","title":"fromSecondOfDay","text":"<p>//core/io.islandtime/Time/Companion/fromSecondOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-second-of-day/#fromsecondofday","title":"fromSecondOfDay","text":"<p>common</p> <p><code>fun fromSecondOfDay(secondOfDay: Int, nanosecond: Int = 0): Time</code></p> <p>Creates a Time from the second of the day and optionally, the number of nanoseconds within that second.</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-second-of-day/#return","title":"Return","text":"<p>a new Time</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-second-of-day/#parameters","title":"Parameters","text":"<p>common</p> secondOfDay the second of the day nanosecond the nanosecond of the second, from 0 to 999,999,999"},{"location":"api/core/core/io.islandtime/-time/-companion/from-second-of-day/#throws","title":"Throws","text":"DateTimeException if the time is invalid"},{"location":"api/core/core/io.islandtime/-time/-companion/from-seconds-since-start-of-day/","title":"fromSecondsSinceStartOfDay","text":"<p>//core/io.islandtime/Time/Companion/fromSecondsSinceStartOfDay</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-seconds-since-start-of-day/#fromsecondssincestartofday","title":"fromSecondsSinceStartOfDay","text":"<p>common</p> <p><code>fun fromSecondsSinceStartOfDay(seconds: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds): Time</code></p> <p>Creates the Time at a number of seconds since the start of the day and optionally, a number of additional nanoseconds.</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-seconds-since-start-of-day/#return","title":"Return","text":"<p>a new Time</p>"},{"location":"api/core/core/io.islandtime/-time/-companion/from-seconds-since-start-of-day/#parameters","title":"Parameters","text":"<p>common</p> seconds the number of seconds since the start of the day nanosecondAdjustment the number of additional nanoseconds, from 0 - 999,999,999"},{"location":"api/core/core/io.islandtime/-time/-companion/from-seconds-since-start-of-day/#throws","title":"Throws","text":"DateTimeException if the time is invalid"},{"location":"api/core/core/io.islandtime/-time-zone/","title":"TimeZone","text":"<p>//core/io.islandtime/TimeZone</p>"},{"location":"api/core/core/io.islandtime/-time-zone/#timezone","title":"TimeZone","text":"<p><code>@Serializable(with = TimeZoneSerializer::class) <p>sealed class TimeZone : Comparable&lt;TimeZone&gt; </p> <p>A time zone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/#inheritors","title":"Inheritors","text":"Region FixedOffset"},{"location":"api/core/core/io.islandtime/-time-zone/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code> FixedOffset <p>common</p><code>class FixedOffset : TimeZone</code>A time zone defined by a fixed offset from UTC. Region <p>common</p><code>class Region : TimeZone</code>A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider."},{"location":"api/core/core/io.islandtime/-time-zone/#properties","title":"Properties","text":"Name Summary id <p>common</p><code>abstract val id: String</code>An ID that uniquely identifies the time zone. isValid <p>common</p><code>abstract val isValid: Boolean</code>Checks if this is a valid time zone according to the current time zone rules provider. rules <p>common</p><code>abstract val rules: TimeZoneRules</code>The rules associated with this time zone."},{"location":"api/core/core/io.islandtime/-time-zone/#functions","title":"Functions","text":"Name Summary compareTo <p>common</p><code>open operator override fun compareTo(other: TimeZone): Int</code> displayName <p>common</p><code>fun displayName(style: TimeZoneTextStyle, locale: Locale): String</code>A textual representation of this time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. localizedName <p>common</p><code>fun localizedName(style: TimeZoneTextStyle, locale: Locale): String?</code>The localized name of this time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. normalized <p>common</p><code>abstract fun normalized(): TimeZone</code>Returns a normalized time zone, converting any zone with a fixed offset to use a consistent identifier. toJavaZoneId <p>jvm</p><code>fun TimeZone.toJavaZoneId(): ZoneId</code>Converts this time zone to an equivalent Java <code>ZoneId</code>. toNSTimeZone <p>darwin</p><code>fun TimeZone.toNSTimeZone(): &lt;Error class: unknown class&gt;</code>Converts this time zone to an <code>NSTimeZone</code>. toNSTimeZoneOrNull <p>darwin</p><code>fun TimeZone.toNSTimeZoneOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this time zone to an <code>NSTimeZone</code>, or <code>null</code> if the identifier isn't recognized as valid for an <code>NSTimeZone</code>. toString <p>common</p><code>open override fun toString(): String</code>Returns the id of this time zone. validate <p>common</p><code>fun validate()</code>Checks if this time zone is valid and throws an exception if it isn't. validated <p>common</p><code>fun validated(): TimeZone</code>Ensures that this time zone is valid, throwing an exception if it isn't."},{"location":"api/core/core/io.islandtime/-time-zone/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/TimeZone/compareTo</p>"},{"location":"api/core/core/io.islandtime/-time-zone/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: TimeZone): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/display-name/","title":"displayName","text":"<p>//core/io.islandtime/TimeZone/displayName</p>"},{"location":"api/core/core/io.islandtime/-time-zone/display-name/#displayname","title":"displayName","text":"<p>common</p> <p><code>fun displayName(style: TimeZoneTextStyle, locale: Locale): String</code></p> <p>A textual representation of this time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead.</p> <p>The result depends on the configured TimeZoneTextProvider and may differ between platforms.</p> <p>Example output for the \"America/New_York\" ID and \"en-US\" locale:</p> <ul><li>Standard: \"Eastern Standard Time\"</li><li>Short standard: \"EST\"</li><li>Daylight Saving: \"Eastern Daylight Time\"</li><li>Short daylight saving: \"EDT\"</li><li>Generic: \"Eastern Time\"</li><li>Short generic: \"ET\"</li></ul>"},{"location":"api/core/core/io.islandtime/-time-zone/display-name/#see-also","title":"See also","text":"TimeZone.localizedName TimeZone.id"},{"location":"api/core/core/io.islandtime/-time-zone/id/","title":"id","text":"<p>//core/io.islandtime/TimeZone/id</p>"},{"location":"api/core/core/io.islandtime/-time-zone/id/#id","title":"id","text":"<p>common</p> <p><code>abstract val id: String</code></p> <p>An ID that uniquely identifies the time zone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/is-valid/","title":"isValid","text":"<p>//core/io.islandtime/TimeZone/isValid</p>"},{"location":"api/core/core/io.islandtime/-time-zone/is-valid/#isvalid","title":"isValid","text":"<p>common</p> <p><code>abstract val isValid: Boolean</code></p> <p>Checks if this is a valid time zone according to the current time zone rules provider.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/localized-name/","title":"localizedName","text":"<p>//core/io.islandtime/TimeZone/localizedName</p>"},{"location":"api/core/core/io.islandtime/-time-zone/localized-name/#localizedname","title":"localizedName","text":"<p>common</p> <p><code>fun localizedName(style: TimeZoneTextStyle, locale: Locale): String?</code></p> <p>The localized name of this time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms.</p> <p>Example output for the \"America/New_York\" ID and \"en-US\" locale:</p> <ul><li>Standard: \"Eastern Standard Time\"</li><li>Short standard: \"EST\"</li><li>Daylight Saving: \"Eastern Daylight Time\"</li><li>Short daylight saving: \"EDT\"</li><li>Generic: \"Eastern Time\"</li><li>Short generic: \"ET\"</li></ul>"},{"location":"api/core/core/io.islandtime/-time-zone/localized-name/#see-also","title":"See also","text":"TimeZone.displayName"},{"location":"api/core/core/io.islandtime/-time-zone/normalized/","title":"normalized","text":"<p>//core/io.islandtime/TimeZone/normalized</p>"},{"location":"api/core/core/io.islandtime/-time-zone/normalized/#normalized","title":"normalized","text":"<p>common</p> <p><code>abstract fun normalized(): TimeZone</code></p> <p>Returns a normalized time zone, converting any zone with a fixed offset to use a consistent identifier.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/normalized/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-time-zone/rules/","title":"rules","text":"<p>//core/io.islandtime/TimeZone/rules</p>"},{"location":"api/core/core/io.islandtime/-time-zone/rules/#rules","title":"rules","text":"<p>common</p> <p><code>abstract val rules: TimeZoneRules</code></p> <p>The rules associated with this time zone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/rules/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-time-zone/to-string/","title":"toString","text":"<p>//core/io.islandtime/TimeZone/toString</p>"},{"location":"api/core/core/io.islandtime/-time-zone/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Returns the id of this time zone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/validate/","title":"validate","text":"<p>//core/io.islandtime/TimeZone/validate</p>"},{"location":"api/core/core/io.islandtime/-time-zone/validate/#validate","title":"validate","text":"<p>common</p> <p><code>fun validate()</code></p> <p>Checks if this time zone is valid and throws an exception if it isn't.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/validate/#see-also","title":"See also","text":"TimeZone.isValid"},{"location":"api/core/core/io.islandtime/-time-zone/validate/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-time-zone/validated/","title":"validated","text":"<p>//core/io.islandtime/TimeZone/validated</p>"},{"location":"api/core/core/io.islandtime/-time-zone/validated/#validated","title":"validated","text":"<p>common</p> <p><code>fun validated(): TimeZone</code></p> <p>Ensures that this time zone is valid, throwing an exception if it isn't.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/validated/#see-also","title":"See also","text":"TimeZone.isValid"},{"location":"api/core/core/io.islandtime/-time-zone/validated/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/","title":"Companion","text":"<p>//core/io.islandtime/TimeZone/Companion</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/#properties","title":"Properties","text":"Name Summary UTC <p>common</p><code>val UTC: TimeZone</code>A fixed time zone representing UTC."},{"location":"api/core/core/io.islandtime/-time-zone/-companion/#functions","title":"Functions","text":"Name Summary FixedOffset <p>common</p><code>fun FixedOffset(id: String): TimeZone.FixedOffset</code>Creates a fixed-offset TimeZone from an identifier in the form of <code>+01:00</code>. systemDefault <p>common</p><code>fun systemDefault(): TimeZone</code>Returns the system's current TimeZone."},{"location":"api/core/core/io.islandtime/-time-zone/-companion/-fixed-offset/","title":"FixedOffset","text":"<p>//core/io.islandtime/TimeZone/Companion/FixedOffset</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/-fixed-offset/#fixedoffset","title":"FixedOffset","text":"<p>common</p> <p><code>fun FixedOffset(id: String): TimeZone.FixedOffset</code></p> <p>Creates a fixed-offset TimeZone from an identifier in the form of <code>+01:00</code>.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/-u-t-c/","title":"UTC","text":"<p>//core/io.islandtime/TimeZone/Companion/UTC</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/-u-t-c/#utc","title":"UTC","text":"<p>common</p> <p><code>val UTC: TimeZone</code></p> <p>A fixed time zone representing UTC.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/system-default/","title":"systemDefault","text":"<p>//core/io.islandtime/TimeZone/Companion/systemDefault</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-companion/system-default/#systemdefault","title":"systemDefault","text":"<p>common</p> <p><code>fun systemDefault(): TimeZone</code></p> <p>Returns the system's current TimeZone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/","title":"FixedOffset","text":"<p>//core/io.islandtime/TimeZone/FixedOffset</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/#fixedoffset","title":"FixedOffset","text":"<p><code>class FixedOffset : TimeZone</code></p> <p>A time zone defined by a fixed offset from UTC.</p> <p>In general, region-based time zones are preferred, but there are situations where only a fixed offset may be available.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/#parameters","title":"Parameters","text":"<p>common</p> offset a valid UTC offset"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/#throws","title":"Throws","text":"DateTimeException if offset is outside the valid range"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/#properties","title":"Properties","text":"Name Summary id <p>common</p><code>open override val id: String</code>An ID that uniquely identifies the time zone. isValid <p>common</p><code>open override val isValid: Boolean</code>Checks if this is a valid time zone according to the current time zone rules provider. offset <p>common</p><code>val offset: UtcOffset</code> rules <p>common</p><code>open override val rules: TimeZoneRules</code>The rules associated with this time zone."},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/#functions","title":"Functions","text":"Name Summary compareTo <p>common</p><code>open operator override fun compareTo(other: TimeZone): Int</code> displayName <p>common</p><code>fun displayName(style: TimeZoneTextStyle, locale: Locale): String</code>A textual representation of this time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> localizedName <p>common</p><code>fun localizedName(style: TimeZoneTextStyle, locale: Locale): String?</code>The localized name of this time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. normalized <p>common</p><code>open override fun normalized(): TimeZone.FixedOffset</code>Returns a normalized time zone, converting any zone with a fixed offset to use a consistent identifier. toJavaZoneId <p>jvm</p><code>fun TimeZone.toJavaZoneId(): ZoneId</code>Converts this time zone to an equivalent Java <code>ZoneId</code>. toNSTimeZone <p>darwin</p><code>fun TimeZone.toNSTimeZone(): &lt;Error class: unknown class&gt;</code>Converts this time zone to an <code>NSTimeZone</code>. toNSTimeZoneOrNull <p>darwin</p><code>fun TimeZone.toNSTimeZoneOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this time zone to an <code>NSTimeZone</code>, or <code>null</code> if the identifier isn't recognized as valid for an <code>NSTimeZone</code>. toString <p>common</p><code>open override fun toString(): String</code>Returns the id of this time zone. validate <p>common</p><code>fun validate()</code>Checks if this time zone is valid and throws an exception if it isn't. validated <p>common</p><code>fun validated(): TimeZone</code>Ensures that this time zone is valid, throwing an exception if it isn't."},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/equals/","title":"equals","text":"<p>//core/io.islandtime/TimeZone/FixedOffset/equals</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/TimeZone/FixedOffset/hashCode</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/id/","title":"id","text":"<p>//core/io.islandtime/TimeZone/FixedOffset/id</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/id/#id","title":"id","text":"<p>common</p> <p><code>open override val id: String</code></p> <p>An ID that uniquely identifies the time zone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/is-valid/","title":"isValid","text":"<p>//core/io.islandtime/TimeZone/FixedOffset/isValid</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/is-valid/#isvalid","title":"isValid","text":"<p>common</p> <p><code>open override val isValid: Boolean</code></p> <p>Checks if this is a valid time zone according to the current time zone rules provider.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/normalized/","title":"normalized","text":"<p>//core/io.islandtime/TimeZone/FixedOffset/normalized</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/normalized/#normalized","title":"normalized","text":"<p>common</p> <p><code>open override fun normalized(): TimeZone.FixedOffset</code></p> <p>Returns a normalized time zone, converting any zone with a fixed offset to use a consistent identifier.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/normalized/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/offset/","title":"offset","text":"<p>//core/io.islandtime/TimeZone/FixedOffset/offset</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/offset/#offset","title":"offset","text":"<p>common</p> <p><code>val offset: UtcOffset</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/offset/#parameters","title":"Parameters","text":"<p>common</p> offset a valid UTC offset"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/rules/","title":"rules","text":"<p>//core/io.islandtime/TimeZone/FixedOffset/rules</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/rules/#rules","title":"rules","text":"<p>common</p> <p><code>open override val rules: TimeZoneRules</code></p> <p>The rules associated with this time zone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-fixed-offset/rules/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-time-zone/-region/","title":"Region","text":"<p>//core/io.islandtime/TimeZone/Region</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/#region","title":"Region","text":"<p><code>class Region : TimeZone</code></p> <p>A named time zone, typically corresponding to a region identifier in the IANA Time Zone Database, but may be any name that can be understood by a TimeZoneRulesProvider.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/#parameters","title":"Parameters","text":"<p>common</p> id an ID that is understood by a time zone rules provider"},{"location":"api/core/core/io.islandtime/-time-zone/-region/#properties","title":"Properties","text":"Name Summary id <p>common</p><code>open override val id: String</code> isValid <p>common</p><code>open override val isValid: Boolean</code>Checks if this is a valid time zone according to the current time zone rules provider. rules <p>common</p><code>open override val rules: TimeZoneRules</code>The rules associated with this time zone."},{"location":"api/core/core/io.islandtime/-time-zone/-region/#functions","title":"Functions","text":"Name Summary compareTo <p>common</p><code>open operator override fun compareTo(other: TimeZone): Int</code> displayName <p>common</p><code>fun displayName(style: TimeZoneTextStyle, locale: Locale): String</code>A textual representation of this time zone, suitable for display purposes. The localized name will be returned, if available for the locale in the specified style. If not, the id will be returned instead. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> localizedName <p>common</p><code>fun localizedName(style: TimeZoneTextStyle, locale: Locale): String?</code>The localized name of this time zone, if available for the locale in the specified style. The result depends on the configured TimeZoneTextProvider and may differ between platforms. normalized <p>common</p><code>open override fun normalized(): TimeZone</code>Returns a normalized time zone, converting any zone with a fixed offset to use a consistent identifier. toJavaZoneId <p>jvm</p><code>fun TimeZone.toJavaZoneId(): ZoneId</code>Converts this time zone to an equivalent Java <code>ZoneId</code>. toNSTimeZone <p>darwin</p><code>fun TimeZone.toNSTimeZone(): &lt;Error class: unknown class&gt;</code>Converts this time zone to an <code>NSTimeZone</code>. toNSTimeZoneOrNull <p>darwin</p><code>fun TimeZone.toNSTimeZoneOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this time zone to an <code>NSTimeZone</code>, or <code>null</code> if the identifier isn't recognized as valid for an <code>NSTimeZone</code>. toString <p>common</p><code>open override fun toString(): String</code>Returns the id of this time zone. validate <p>common</p><code>fun validate()</code>Checks if this time zone is valid and throws an exception if it isn't. validated <p>common</p><code>fun validated(): TimeZone</code>Ensures that this time zone is valid, throwing an exception if it isn't."},{"location":"api/core/core/io.islandtime/-time-zone/-region/equals/","title":"equals","text":"<p>//core/io.islandtime/TimeZone/Region/equals</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/TimeZone/Region/hashCode</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/id/","title":"id","text":"<p>//core/io.islandtime/TimeZone/Region/id</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/id/#id","title":"id","text":"<p>common</p> <p><code>open override val id: String</code></p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/id/#parameters","title":"Parameters","text":"<p>common</p> id an ID that is understood by a time zone rules provider"},{"location":"api/core/core/io.islandtime/-time-zone/-region/is-valid/","title":"isValid","text":"<p>//core/io.islandtime/TimeZone/Region/isValid</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/is-valid/#isvalid","title":"isValid","text":"<p>common</p> <p><code>open override val isValid: Boolean</code></p> <p>Checks if this is a valid time zone according to the current time zone rules provider.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/normalized/","title":"normalized","text":"<p>//core/io.islandtime/TimeZone/Region/normalized</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/normalized/#normalized","title":"normalized","text":"<p>common</p> <p><code>open override fun normalized(): TimeZone</code></p> <p>Returns a normalized time zone, converting any zone with a fixed offset to use a consistent identifier.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/normalized/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-time-zone/-region/rules/","title":"rules","text":"<p>//core/io.islandtime/TimeZone/Region/rules</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/rules/#rules","title":"rules","text":"<p>common</p> <p><code>open override val rules: TimeZoneRules</code></p> <p>The rules associated with this time zone.</p>"},{"location":"api/core/core/io.islandtime/-time-zone/-region/rules/#throws","title":"Throws","text":"TimeZoneRulesException if the current time zone rules provider doesn't support id"},{"location":"api/core/core/io.islandtime/-utc-offset/","title":"UtcOffset","text":"<p>//core/io.islandtime/UtcOffset</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/#utcoffset","title":"UtcOffset","text":"<p><code>@Serializable(with = UtcOffsetIsoSerializer::class) <p>@JvmInline</p> <p>value class UtcOffset : Comparable&lt;UtcOffset&gt; </p> <p>The time shift between a local time and UTC.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/#parameters","title":"Parameters","text":"<p>common</p> totalSecondsValue the total number of seconds to offset by"},{"location":"api/core/core/io.islandtime/-utc-offset/#throws","title":"Throws","text":"DateTimeException if the offset is outside the supported range"},{"location":"api/core/core/io.islandtime/-utc-offset/#constructors","title":"Constructors","text":"UtcOffset <p>common</p><code>constructor(totalSeconds: Seconds)</code>Creates an offset from the number of seconds relative to UTC."},{"location":"api/core/core/io.islandtime/-utc-offset/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-utc-offset/#properties","title":"Properties","text":"Name Summary totalSeconds <p>common</p><code>val totalSeconds: Seconds</code>The number of seconds relative to UTC. totalSecondsValue <p>common</p><code>val totalSecondsValue: Int</code>The number of seconds relative to UTC."},{"location":"api/core/core/io.islandtime/-utc-offset/#functions","title":"Functions","text":"Name Summary asTimeZone <p>common</p><code>fun UtcOffset.asTimeZone(): TimeZone</code>Converts this UtcOffset into a fixed-offset TimeZone. compareTo <p>common</p><code>open operator override fun compareTo(other: UtcOffset): Int</code> isZero <p>common</p><code>fun isZero(): Boolean</code>Checks if this is the UTC offset of +00:00. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code>Breaks a UTC offset down into components. If the offset is negative, each component will be negative.<p>common</p><code>inline fun &lt;T&gt; toComponents(action: (sign: Int, hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code>Breaks a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive. toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Int, minutes: Int, seconds: Int) -&gt; T): T</code>Breaks a UTC offset down into components. If the offset is negative, each component will be negative.<p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (sign: Int, hours: Int, minutes: Int, seconds: Int) -&gt; T): T</code>Breaks a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive. toJavaZoneOffset <p>jvm</p><code>fun UtcOffset.toJavaZoneOffset(): ZoneOffset</code>Converts this UTC offset to an equivalent Java <code>ZoneOffset</code>. toNSTimeZone <p>darwin</p><code>fun UtcOffset.toNSTimeZone(): &lt;Error class: unknown class&gt;</code>Converts this offset into an equivalent <code>NSTimeZone</code> with a fixed UTC offset. toString <p>common</p><code>open override fun toString(): String</code>Converts this offset to a string in ISO-8601 extended format. For example, <code>-04:00</code> or <code>Z</code>."},{"location":"api/core/core/io.islandtime/-utc-offset/-utc-offset/","title":"UtcOffset","text":"<p>//core/io.islandtime/UtcOffset/UtcOffset</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-utc-offset/#utcoffset","title":"UtcOffset","text":"<p>common</p> <p><code>constructor(totalSeconds: Seconds)</code></p> <p>Creates an offset from the number of seconds relative to UTC.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-utc-offset/#throws","title":"Throws","text":"DateTimeException if the offset is outside the supported range"},{"location":"api/core/core/io.islandtime/-utc-offset/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/UtcOffset/compareTo</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: UtcOffset): Int</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/is-zero/","title":"isZero","text":"<p>//core/io.islandtime/UtcOffset/isZero</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/is-zero/#iszero","title":"isZero","text":"<p>common</p> <p><code>fun isZero(): Boolean</code></p> <p>Checks if this is the UTC offset of +00:00.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime/UtcOffset/toComponentValues</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (sign: Int, hours: Int, minutes: Int, seconds: Int) -&gt; T): T</code></p> <p>Breaks a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive.</p> <p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Int, minutes: Int, seconds: Int) -&gt; T): T</code></p> <p>Breaks a UTC offset down into components. If the offset is negative, each component will be negative.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/to-components/","title":"toComponents","text":"<p>//core/io.islandtime/UtcOffset/toComponents</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (sign: Int, hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code></p> <p>Breaks a UTC offset down into components. The sign will indicate whether the offset is positive or negative while each component will be positive.</p> <p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code></p> <p>Breaks a UTC offset down into components. If the offset is negative, each component will be negative.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/to-string/","title":"toString","text":"<p>//core/io.islandtime/UtcOffset/toString</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this offset to a string in ISO-8601 extended format. For example, <code>-04:00</code> or <code>Z</code>.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/total-seconds-value/","title":"totalSecondsValue","text":"<p>//core/io.islandtime/UtcOffset/totalSecondsValue</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/total-seconds-value/#totalsecondsvalue","title":"totalSecondsValue","text":"<p>common</p> <p><code>val totalSecondsValue: Int</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/total-seconds/","title":"totalSeconds","text":"<p>//core/io.islandtime/UtcOffset/totalSeconds</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/total-seconds/#totalseconds","title":"totalSeconds","text":"<p>common</p> <p><code>val totalSeconds: Seconds</code></p> <p>The number of seconds relative to UTC.</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/","title":"Companion","text":"<p>//core/io.islandtime/UtcOffset/Companion</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: UtcOffset</code> MAX_TOTAL_SECONDS <p>common</p><code>val MAX_TOTAL_SECONDS: Seconds</code> MAX_TOTAL_SECONDS_VALUE <p>common</p><code>val MAX_TOTAL_SECONDS_VALUE: Int</code> MIN <p>common</p><code>val MIN: UtcOffset</code> MIN_TOTAL_SECONDS <p>common</p><code>val MIN_TOTAL_SECONDS: Seconds</code> MIN_TOTAL_SECONDS_VALUE <p>common</p><code>val MIN_TOTAL_SECONDS_VALUE: Int</code> ZERO <p>common</p><code>val ZERO: UtcOffset</code>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/#functions","title":"Functions","text":"Name Summary fromTotalSeconds <p>common</p><code>fun fromTotalSeconds(value: Int): UtcOffset</code>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/UtcOffset/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: UtcOffset</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-a-x_-t-o-t-a-l_-s-e-c-o-n-d-s/","title":"MAX_TOTAL_SECONDS","text":"<p>//core/io.islandtime/UtcOffset/Companion/MAX_TOTAL_SECONDS</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-a-x_-t-o-t-a-l_-s-e-c-o-n-d-s/#max_total_seconds","title":"MAX_TOTAL_SECONDS","text":"<p>common</p> <p><code>val MAX_TOTAL_SECONDS: Seconds</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-a-x_-t-o-t-a-l_-s-e-c-o-n-d-s_-v-a-l-u-e/","title":"MAX_TOTAL_SECONDS_VALUE","text":"<p>//core/io.islandtime/UtcOffset/Companion/MAX_TOTAL_SECONDS_VALUE</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-a-x_-t-o-t-a-l_-s-e-c-o-n-d-s_-v-a-l-u-e/#max_total_seconds_value","title":"MAX_TOTAL_SECONDS_VALUE","text":"<p>common</p> <p><code>val MAX_TOTAL_SECONDS_VALUE: Int</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/UtcOffset/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: UtcOffset</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-i-n_-t-o-t-a-l_-s-e-c-o-n-d-s/","title":"MIN_TOTAL_SECONDS","text":"<p>//core/io.islandtime/UtcOffset/Companion/MIN_TOTAL_SECONDS</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-i-n_-t-o-t-a-l_-s-e-c-o-n-d-s/#min_total_seconds","title":"MIN_TOTAL_SECONDS","text":"<p>common</p> <p><code>val MIN_TOTAL_SECONDS: Seconds</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-i-n_-t-o-t-a-l_-s-e-c-o-n-d-s_-v-a-l-u-e/","title":"MIN_TOTAL_SECONDS_VALUE","text":"<p>//core/io.islandtime/UtcOffset/Companion/MIN_TOTAL_SECONDS_VALUE</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-m-i-n_-t-o-t-a-l_-s-e-c-o-n-d-s_-v-a-l-u-e/#min_total_seconds_value","title":"MIN_TOTAL_SECONDS_VALUE","text":"<p>common</p> <p><code>val MIN_TOTAL_SECONDS_VALUE: Int</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-z-e-r-o/","title":"ZERO","text":"<p>//core/io.islandtime/UtcOffset/Companion/ZERO</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/-z-e-r-o/#zero","title":"ZERO","text":"<p>common</p> <p><code>val ZERO: UtcOffset</code></p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/from-total-seconds/","title":"fromTotalSeconds","text":"<p>//core/io.islandtime/UtcOffset/Companion/fromTotalSeconds</p>"},{"location":"api/core/core/io.islandtime/-utc-offset/-companion/from-total-seconds/#fromtotalseconds","title":"fromTotalSeconds","text":"<p>common</p> <p><code>fun fromTotalSeconds(value: Int): UtcOffset</code></p>"},{"location":"api/core/core/io.islandtime/-year/","title":"Year","text":"<p>//core/io.islandtime/Year</p>"},{"location":"api/core/core/io.islandtime/-year/#year","title":"Year","text":"<p><code>@Serializable(with = YearIsoSerializer::class) <p>@JvmInline</p> <p>value class Year(val value: Int) : Comparable&lt;Year&gt; </p> <p>A year as defined by ISO-8601.</p>"},{"location":"api/core/core/io.islandtime/-year/#parameters","title":"Parameters","text":"<p>common</p> value the year"},{"location":"api/core/core/io.islandtime/-year/#throws","title":"Throws","text":"DateTimeException if the year is invalid"},{"location":"api/core/core/io.islandtime/-year/#constructors","title":"Constructors","text":"Year <p>common</p><code>constructor(value: Long)</code>Creates a Year.<code>constructor(value: Int)</code>Creates a Year."},{"location":"api/core/core/io.islandtime/-year/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-year/#properties","title":"Properties","text":"Name Summary dateRange <p>common</p><code>val dateRange: DateRange</code>The date range of the year. dayRange <p>common</p><code>val dayRange: IntRange</code>The day range of the year. This will be either <code>1..365</code> or <code>1.366</code> depending on whether this is a common or leap year. endDate <p>common</p><code>val endDate: Date</code>The last date of the year. isLeap <p>common</p><code>val isLeap: Boolean</code>Checks if this is a leap year. lastDay <p>common</p><code>val lastDay: Int</code>The last day of the year. This will be either <code>365</code> or <code>366</code> depending on whether this is a common or leap year. length <p>common</p><code>val length: Days</code>The length of the year in days. startDate <p>common</p><code>val startDate: Date</code>The first date of the year. value <p>common</p><code>val value: Int</code>The year value."},{"location":"api/core/core/io.islandtime/-year/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun Year.at(month: Month): YearMonth</code>Combines a year and month to create a YearMonth. atMonth <p>common</p><code>fun Year.atMonth(number: Int): YearMonth</code>Combines a year and month number to create a YearMonth. compareTo <p>common</p><code>open operator override fun compareTo(other: Year): Int</code> contains <p>common</p><code>operator fun contains(date: Date): Boolean</code>Checks if this year contains the specified date.<p>common</p><code>operator fun contains(yearMonth: YearMonth): Boolean</code>Checks if this year contains the specified year-month. minus <p>common</p><code>operator fun minus(centuries: Centuries): Year</code>Returns this year with centuries subtracted from it.<p>common</p><code>operator fun minus(decades: Decades): Year</code>Returns this year with decades subtracted from it.<p>common</p><code>operator fun minus(years: Years): Year</code>Returns this year with years subtracted from it. plus <p>common</p><code>operator fun plus(centuries: Centuries): Year</code>Returns this year with centuries added to it.<p>common</p><code>operator fun plus(decades: Decades): Year</code>Returns this year with decades added to it.<p>common</p><code>operator fun plus(years: Years): Year</code>Returns this year with years added to it. toJavaYear <p>jvm</p><code>fun Year.toJavaYear(): Year</code>Converts this year to an equivalent Java <code>Year</code>. toNSDateComponents <p>darwin</p><code>fun Year.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this year to an equivalent <code>NSDateComponents</code> object. toString <p>common</p><code>open override fun toString(): String</code>Converts this year to a string in ISO-8601 extended format. For example, <code>2012</code>, <code>-0001</code>, or <code>+10000</code>."},{"location":"api/core/core/io.islandtime/-year/-year/","title":"Year","text":"<p>//core/io.islandtime/Year/Year</p>"},{"location":"api/core/core/io.islandtime/-year/-year/#year","title":"Year","text":"<p>common</p> <p><code>constructor(value: Long)</code></p> <p>Creates a Year.</p>"},{"location":"api/core/core/io.islandtime/-year/-year/#parameters","title":"Parameters","text":"<p>common</p> value the year"},{"location":"api/core/core/io.islandtime/-year/-year/#throws","title":"Throws","text":"DateTimeException if the year is invalid <p>common</p> <p><code>constructor(value: Int)</code></p> <p>Creates a Year.</p>"},{"location":"api/core/core/io.islandtime/-year/-year/#parameters_1","title":"Parameters","text":"<p>common</p> value the year"},{"location":"api/core/core/io.islandtime/-year/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/Year/compareTo</p>"},{"location":"api/core/core/io.islandtime/-year/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Year): Int</code></p>"},{"location":"api/core/core/io.islandtime/-year/contains/","title":"contains","text":"<p>//core/io.islandtime/Year/contains</p>"},{"location":"api/core/core/io.islandtime/-year/contains/#contains","title":"contains","text":"<p>common</p> <p><code>operator fun contains(yearMonth: YearMonth): Boolean</code></p> <p>Checks if this year contains the specified year-month.</p> <p>common</p> <p><code>operator fun contains(date: Date): Boolean</code></p> <p>Checks if this year contains the specified date.</p>"},{"location":"api/core/core/io.islandtime/-year/date-range/","title":"dateRange","text":"<p>//core/io.islandtime/Year/dateRange</p>"},{"location":"api/core/core/io.islandtime/-year/date-range/#daterange","title":"dateRange","text":"<p>common</p> <p><code>val dateRange: DateRange</code></p> <p>The date range of the year.</p>"},{"location":"api/core/core/io.islandtime/-year/day-range/","title":"dayRange","text":"<p>//core/io.islandtime/Year/dayRange</p>"},{"location":"api/core/core/io.islandtime/-year/day-range/#dayrange","title":"dayRange","text":"<p>common</p> <p><code>val dayRange: IntRange</code></p> <p>The day range of the year. This will be either <code>1..365</code> or <code>1.366</code> depending on whether this is a common or leap year.</p>"},{"location":"api/core/core/io.islandtime/-year/end-date/","title":"endDate","text":"<p>//core/io.islandtime/Year/endDate</p>"},{"location":"api/core/core/io.islandtime/-year/end-date/#enddate","title":"endDate","text":"<p>common</p> <p><code>val endDate: Date</code></p> <p>The last date of the year.</p>"},{"location":"api/core/core/io.islandtime/-year/is-leap/","title":"isLeap","text":"<p>//core/io.islandtime/Year/isLeap</p>"},{"location":"api/core/core/io.islandtime/-year/is-leap/#isleap","title":"isLeap","text":"<p>common</p> <p><code>val isLeap: Boolean</code></p> <p>Checks if this is a leap year.</p>"},{"location":"api/core/core/io.islandtime/-year/last-day/","title":"lastDay","text":"<p>//core/io.islandtime/Year/lastDay</p>"},{"location":"api/core/core/io.islandtime/-year/last-day/#lastday","title":"lastDay","text":"<p>common</p> <p><code>val lastDay: Int</code></p> <p>The last day of the year. This will be either <code>365</code> or <code>366</code> depending on whether this is a common or leap year.</p>"},{"location":"api/core/core/io.islandtime/-year/length/","title":"length","text":"<p>//core/io.islandtime/Year/length</p>"},{"location":"api/core/core/io.islandtime/-year/length/#length","title":"length","text":"<p>common</p> <p><code>val length: Days</code></p> <p>The length of the year in days.</p>"},{"location":"api/core/core/io.islandtime/-year/minus/","title":"minus","text":"<p>//core/io.islandtime/Year/minus</p>"},{"location":"api/core/core/io.islandtime/-year/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(centuries: Centuries): Year</code></p> <p>Returns this year with centuries subtracted from it.</p> <p>common</p> <p><code>operator fun minus(decades: Decades): Year</code></p> <p>Returns this year with decades subtracted from it.</p> <p>common</p> <p><code>operator fun minus(years: Years): Year</code></p> <p>Returns this year with years subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-year/plus/","title":"plus","text":"<p>//core/io.islandtime/Year/plus</p>"},{"location":"api/core/core/io.islandtime/-year/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(centuries: Centuries): Year</code></p> <p>Returns this year with centuries added to it.</p> <p>common</p> <p><code>operator fun plus(decades: Decades): Year</code></p> <p>Returns this year with decades added to it.</p> <p>common</p> <p><code>operator fun plus(years: Years): Year</code></p> <p>Returns this year with years added to it.</p>"},{"location":"api/core/core/io.islandtime/-year/start-date/","title":"startDate","text":"<p>//core/io.islandtime/Year/startDate</p>"},{"location":"api/core/core/io.islandtime/-year/start-date/#startdate","title":"startDate","text":"<p>common</p> <p><code>val startDate: Date</code></p> <p>The first date of the year.</p>"},{"location":"api/core/core/io.islandtime/-year/to-string/","title":"toString","text":"<p>//core/io.islandtime/Year/toString</p>"},{"location":"api/core/core/io.islandtime/-year/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this year to a string in ISO-8601 extended format. For example, <code>2012</code>, <code>-0001</code>, or <code>+10000</code>.</p>"},{"location":"api/core/core/io.islandtime/-year/value/","title":"value","text":"<p>//core/io.islandtime/Year/value</p>"},{"location":"api/core/core/io.islandtime/-year/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Int</code></p>"},{"location":"api/core/core/io.islandtime/-year/-companion/","title":"Companion","text":"<p>//core/io.islandtime/Year/Companion</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-year/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Year</code>The latest supported Year, which can be used as a \"far future\" sentinel. MAX_VALUE <p>common</p><code>const val MAX_VALUE: Int</code>The latest supported year value. MIN <p>common</p><code>val MIN: Year</code>The earliest supported Year, which can be used as a \"far past\" sentinel. MIN_VALUE <p>common</p><code>const val MIN_VALUE: Int</code>The earliest supported year value."},{"location":"api/core/core/io.islandtime/-year/-companion/#functions","title":"Functions","text":"Name Summary now <p>common</p><code>fun Year.Companion.now(): Year</code>Gets the current Year from the system clock.<p>common</p><code>fun Year.Companion.now(clock: Clock): Year</code>Gets the current Year from the provided clock.<p>jvm</p><code>fun Year.Companion.now(clock: Clock): Year</code>Gets the current Year from the provided clock."},{"location":"api/core/core/io.islandtime/-year/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/Year/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Year</code></p> <p>The latest supported Year, which can be used as a \"far future\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/-m-a-x_-v-a-l-u-e/","title":"MAX_VALUE","text":"<p>//core/io.islandtime/Year/Companion/MAX_VALUE</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/-m-a-x_-v-a-l-u-e/#max_value","title":"MAX_VALUE","text":"<p>common</p> <p><code>const val MAX_VALUE: Int</code></p> <p>The latest supported year value.</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/Year/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Year</code></p> <p>The earliest supported Year, which can be used as a \"far past\" sentinel.</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/-m-i-n_-v-a-l-u-e/","title":"MIN_VALUE","text":"<p>//core/io.islandtime/Year/Companion/MIN_VALUE</p>"},{"location":"api/core/core/io.islandtime/-year/-companion/-m-i-n_-v-a-l-u-e/#min_value","title":"MIN_VALUE","text":"<p>common</p> <p><code>const val MIN_VALUE: Int</code></p> <p>The earliest supported year value.</p>"},{"location":"api/core/core/io.islandtime/-year-month/","title":"YearMonth","text":"<p>//core/io.islandtime/YearMonth</p>"},{"location":"api/core/core/io.islandtime/-year-month/#yearmonth","title":"YearMonth","text":"<p><code>@Serializable(with = YearMonthIsoSerializer::class) <p>class YearMonth(val year: Int, val month: Month) : Comparable&lt;YearMonth&gt; </p> <p>A month in a particular year.</p>"},{"location":"api/core/core/io.islandtime/-year-month/#parameters","title":"Parameters","text":"<p>common</p> year the year month the month of the year"},{"location":"api/core/core/io.islandtime/-year-month/#throws","title":"Throws","text":"DateTimeException if the year is outside the supported range"},{"location":"api/core/core/io.islandtime/-year-month/#constructors","title":"Constructors","text":"YearMonth <p>common</p><code>constructor(year: Int, monthNumber: Int)</code>Creates a YearMonth.<code>constructor(year: Int, month: Month)</code>Creates a YearMonth."},{"location":"api/core/core/io.islandtime/-year-month/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-year-month/#properties","title":"Properties","text":"Name Summary dateRange <p>common</p><code>val dateRange: DateRange</code>The range of dates within this year-month. dayRange <p>common</p><code>val dayRange: IntRange</code>The range of days within this year-month. endDate <p>common</p><code>val endDate: Date</code>The Date representing the last day in this year-month. firstDayOfYear <p>common</p><code>val firstDayOfYear: Int</code>The ordinal date corresponding to the first day of this year-month. isInLeapYear <p>common</p><code>val isInLeapYear: Boolean</code>Checks if this year-month falls within a leap year. lastDay <p>common</p><code>val lastDay: Int</code>The last day of the year-month. lastDayOfYear <p>common</p><code>val lastDayOfYear: Int</code>The ordinal date corresponding to the last day of this year-month. lengthOfMonth <p>common</p><code>val lengthOfMonth: Days</code>The length of the year-month in days. lengthOfYear <p>common</p><code>val lengthOfYear: Days</code>The length of the year in days. month <p>common</p><code>val month: Month</code>The month of the year. monthNumber <p>common</p><code>val monthNumber: Int</code>The ISO month number, from 1-12. startDate <p>common</p><code>val startDate: Date</code>The Date representing the first day in this year-month. year <p>common</p><code>val year: Int</code>The year."},{"location":"api/core/core/io.islandtime/-year-month/#functions","title":"Functions","text":"Name Summary atDay <p>common</p><code>fun YearMonth.atDay(day: Int): Date</code>Combines a YearMonth with a day of the month to create a Date. compareTo <p>common</p><code>open operator override fun compareTo(other: YearMonth): Int</code> contains <p>common</p><code>operator fun contains(date: Date): Boolean</code>Checks if this year contains the specified date. copy <p>common</p><code>fun copy(year: Int = this.year, month: Month = this.month): YearMonth</code><code>fun copy(year: Int = this.year, monthNumber: Int): YearMonth</code>Returns a copy of this year-month with the values of any individual components replaced by the new values specified. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> minus <p>common</p><code>operator fun minus(centuries: Centuries): YearMonth</code>Returns this year-month with centuries subtracted from it.<p>common</p><code>operator fun minus(decades: Decades): YearMonth</code>Returns this year-month with decades subtracted from it.<p>common</p><code>operator fun minus(months: Months): YearMonth</code>Returns this year-month with months subtracted from it.<p>common</p><code>operator fun minus(years: Years): YearMonth</code>Returns this year-month with years subtracted from it. plus <p>common</p><code>operator fun plus(centuries: Centuries): YearMonth</code>Returns this year-month with centuries added to it.<p>common</p><code>operator fun plus(decades: Decades): YearMonth</code>Returns this year-month with decades added to it.<p>common</p><code>operator fun plus(months: Months): YearMonth</code>Returns this year-month with months added to it.<p>common</p><code>operator fun plus(years: Years): YearMonth</code>Returns this year-month with years added to it. toJavaYearMonth <p>jvm</p><code>fun YearMonth.toJavaYearMonth(): YearMonth</code>Converts this year-month to an equivalent Java <code>YearMonth</code>. toNSDateComponents <p>darwin</p><code>fun YearMonth.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this year-month to an equivalent <code>NSDateComponents</code> object. toString <p>common</p><code>open override fun toString(): String</code>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04</code>. toYear <p>common</p><code>fun YearMonth.toYear(): Year</code>Returns this year-month with the precision reduced to the year."},{"location":"api/core/core/io.islandtime/-year-month/-year-month/","title":"YearMonth","text":"<p>//core/io.islandtime/YearMonth/YearMonth</p>"},{"location":"api/core/core/io.islandtime/-year-month/-year-month/#yearmonth","title":"YearMonth","text":"<p>common</p> <p><code>constructor(year: Int, monthNumber: Int)</code></p> <p>Creates a YearMonth.</p>"},{"location":"api/core/core/io.islandtime/-year-month/-year-month/#throws","title":"Throws","text":"DateTimeException if the year or month is invalid <p>common</p> <p><code>constructor(year: Int, month: Month)</code></p> <p>Creates a YearMonth.</p>"},{"location":"api/core/core/io.islandtime/-year-month/-year-month/#parameters","title":"Parameters","text":"<p>common</p> year the year month the month of the year"},{"location":"api/core/core/io.islandtime/-year-month/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime/YearMonth/compareTo</p>"},{"location":"api/core/core/io.islandtime/-year-month/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: YearMonth): Int</code></p>"},{"location":"api/core/core/io.islandtime/-year-month/contains/","title":"contains","text":"<p>//core/io.islandtime/YearMonth/contains</p>"},{"location":"api/core/core/io.islandtime/-year-month/contains/#contains","title":"contains","text":"<p>common</p> <p><code>operator fun contains(date: Date): Boolean</code></p> <p>Checks if this year contains the specified date.</p>"},{"location":"api/core/core/io.islandtime/-year-month/copy/","title":"copy","text":"<p>//core/io.islandtime/YearMonth/copy</p>"},{"location":"api/core/core/io.islandtime/-year-month/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(year: Int = this.year, month: Month = this.month): YearMonth</code></p> <p>Returns a copy of this year-month with the values of any individual components replaced by the new values specified.</p>"},{"location":"api/core/core/io.islandtime/-year-month/copy/#throws","title":"Throws","text":"DateTimeException if the year is invalid <p>common</p> <p><code>fun copy(year: Int = this.year, monthNumber: Int): YearMonth</code></p> <p>Returns a copy of this year-month with the values of any individual components replaced by the new values specified.</p>"},{"location":"api/core/core/io.islandtime/-year-month/copy/#throws_1","title":"Throws","text":"DateTimeException if the year or month is invalid"},{"location":"api/core/core/io.islandtime/-year-month/date-range/","title":"dateRange","text":"<p>//core/io.islandtime/YearMonth/dateRange</p>"},{"location":"api/core/core/io.islandtime/-year-month/date-range/#daterange","title":"dateRange","text":"<p>common</p> <p><code>val dateRange: DateRange</code></p> <p>The range of dates within this year-month.</p>"},{"location":"api/core/core/io.islandtime/-year-month/day-range/","title":"dayRange","text":"<p>//core/io.islandtime/YearMonth/dayRange</p>"},{"location":"api/core/core/io.islandtime/-year-month/day-range/#dayrange","title":"dayRange","text":"<p>common</p> <p><code>val dayRange: IntRange</code></p> <p>The range of days within this year-month.</p>"},{"location":"api/core/core/io.islandtime/-year-month/end-date/","title":"endDate","text":"<p>//core/io.islandtime/YearMonth/endDate</p>"},{"location":"api/core/core/io.islandtime/-year-month/end-date/#enddate","title":"endDate","text":"<p>common</p> <p><code>val endDate: Date</code></p> <p>The Date representing the last day in this year-month.</p>"},{"location":"api/core/core/io.islandtime/-year-month/equals/","title":"equals","text":"<p>//core/io.islandtime/YearMonth/equals</p>"},{"location":"api/core/core/io.islandtime/-year-month/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-year-month/first-day-of-year/","title":"firstDayOfYear","text":"<p>//core/io.islandtime/YearMonth/firstDayOfYear</p>"},{"location":"api/core/core/io.islandtime/-year-month/first-day-of-year/#firstdayofyear","title":"firstDayOfYear","text":"<p>common</p> <p><code>val firstDayOfYear: Int</code></p> <p>The ordinal date corresponding to the first day of this year-month.</p>"},{"location":"api/core/core/io.islandtime/-year-month/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/YearMonth/hashCode</p>"},{"location":"api/core/core/io.islandtime/-year-month/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-year-month/is-in-leap-year/","title":"isInLeapYear","text":"<p>//core/io.islandtime/YearMonth/isInLeapYear</p>"},{"location":"api/core/core/io.islandtime/-year-month/is-in-leap-year/#isinleapyear","title":"isInLeapYear","text":"<p>common</p> <p><code>val isInLeapYear: Boolean</code></p> <p>Checks if this year-month falls within a leap year.</p>"},{"location":"api/core/core/io.islandtime/-year-month/last-day-of-year/","title":"lastDayOfYear","text":"<p>//core/io.islandtime/YearMonth/lastDayOfYear</p>"},{"location":"api/core/core/io.islandtime/-year-month/last-day-of-year/#lastdayofyear","title":"lastDayOfYear","text":"<p>common</p> <p><code>val lastDayOfYear: Int</code></p> <p>The ordinal date corresponding to the last day of this year-month.</p>"},{"location":"api/core/core/io.islandtime/-year-month/last-day/","title":"lastDay","text":"<p>//core/io.islandtime/YearMonth/lastDay</p>"},{"location":"api/core/core/io.islandtime/-year-month/last-day/#lastday","title":"lastDay","text":"<p>common</p> <p><code>val lastDay: Int</code></p> <p>The last day of the year-month.</p>"},{"location":"api/core/core/io.islandtime/-year-month/length-of-month/","title":"lengthOfMonth","text":"<p>//core/io.islandtime/YearMonth/lengthOfMonth</p>"},{"location":"api/core/core/io.islandtime/-year-month/length-of-month/#lengthofmonth","title":"lengthOfMonth","text":"<p>common</p> <p><code>val lengthOfMonth: Days</code></p> <p>The length of the year-month in days.</p>"},{"location":"api/core/core/io.islandtime/-year-month/length-of-year/","title":"lengthOfYear","text":"<p>//core/io.islandtime/YearMonth/lengthOfYear</p>"},{"location":"api/core/core/io.islandtime/-year-month/length-of-year/#lengthofyear","title":"lengthOfYear","text":"<p>common</p> <p><code>val lengthOfYear: Days</code></p> <p>The length of the year in days.</p>"},{"location":"api/core/core/io.islandtime/-year-month/minus/","title":"minus","text":"<p>//core/io.islandtime/YearMonth/minus</p>"},{"location":"api/core/core/io.islandtime/-year-month/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(centuries: Centuries): YearMonth</code></p> <p>Returns this year-month with centuries subtracted from it.</p> <p>common</p> <p><code>operator fun minus(decades: Decades): YearMonth</code></p> <p>Returns this year-month with decades subtracted from it.</p> <p>common</p> <p><code>operator fun minus(years: Years): YearMonth</code></p> <p>Returns this year-month with years subtracted from it.</p> <p>common</p> <p><code>operator fun minus(months: Months): YearMonth</code></p> <p>Returns this year-month with months subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-year-month/month-number/","title":"monthNumber","text":"<p>//core/io.islandtime/YearMonth/monthNumber</p>"},{"location":"api/core/core/io.islandtime/-year-month/month-number/#monthnumber","title":"monthNumber","text":"<p>common</p> <p><code>val monthNumber: Int</code></p> <p>The ISO month number, from 1-12.</p>"},{"location":"api/core/core/io.islandtime/-year-month/month/","title":"month","text":"<p>//core/io.islandtime/YearMonth/month</p>"},{"location":"api/core/core/io.islandtime/-year-month/month/#month","title":"month","text":"<p>common</p> <p><code>val month: Month</code></p> <p>The month of the year.</p>"},{"location":"api/core/core/io.islandtime/-year-month/plus/","title":"plus","text":"<p>//core/io.islandtime/YearMonth/plus</p>"},{"location":"api/core/core/io.islandtime/-year-month/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(centuries: Centuries): YearMonth</code></p> <p>Returns this year-month with centuries added to it.</p> <p>common</p> <p><code>operator fun plus(decades: Decades): YearMonth</code></p> <p>Returns this year-month with decades added to it.</p> <p>common</p> <p><code>operator fun plus(years: Years): YearMonth</code></p> <p>Returns this year-month with years added to it.</p> <p>common</p> <p><code>operator fun plus(months: Months): YearMonth</code></p> <p>Returns this year-month with months added to it.</p>"},{"location":"api/core/core/io.islandtime/-year-month/start-date/","title":"startDate","text":"<p>//core/io.islandtime/YearMonth/startDate</p>"},{"location":"api/core/core/io.islandtime/-year-month/start-date/#startdate","title":"startDate","text":"<p>common</p> <p><code>val startDate: Date</code></p> <p>The Date representing the first day in this year-month.</p>"},{"location":"api/core/core/io.islandtime/-year-month/to-string/","title":"toString","text":"<p>//core/io.islandtime/YearMonth/toString</p>"},{"location":"api/core/core/io.islandtime/-year-month/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04</code>.</p>"},{"location":"api/core/core/io.islandtime/-year-month/year/","title":"year","text":"<p>//core/io.islandtime/YearMonth/year</p>"},{"location":"api/core/core/io.islandtime/-year-month/year/#year","title":"year","text":"<p>common</p> <p><code>val year: Int</code></p> <p>The year.</p>"},{"location":"api/core/core/io.islandtime/-year-month/-companion/","title":"Companion","text":"<p>//core/io.islandtime/YearMonth/Companion</p>"},{"location":"api/core/core/io.islandtime/-year-month/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-year-month/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: YearMonth</code>The latest supported YearMonth, which may be used to indicate the \"far future\". MIN <p>common</p><code>val MIN: YearMonth</code>The earliest supported YearMonth, which may be used to indicate the \"far past\"."},{"location":"api/core/core/io.islandtime/-year-month/-companion/#functions","title":"Functions","text":"Name Summary now <p>common</p><code>fun YearMonth.Companion.now(): YearMonth</code>Gets the current YearMonth from the system clock.<p>common</p><code>fun YearMonth.Companion.now(clock: Clock): YearMonth</code>Gets the current YearMonth from the provided clock.<p>jvm</p><code>fun YearMonth.Companion.now(clock: Clock): YearMonth</code>Gets the current YearMonth from the provided clock."},{"location":"api/core/core/io.islandtime/-year-month/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime/YearMonth/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime/-year-month/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: YearMonth</code></p> <p>The latest supported YearMonth, which may be used to indicate the \"far future\".</p>"},{"location":"api/core/core/io.islandtime/-year-month/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime/YearMonth/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime/-year-month/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: YearMonth</code></p> <p>The earliest supported YearMonth, which may be used to indicate the \"far past\".</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/","title":"ZonedDateTime","text":"<p>//core/io.islandtime/ZonedDateTime</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/#zoneddatetime","title":"ZonedDateTime","text":"<p>common</p> <p><code>@Serializable(with = ZonedDateTimeIsoSerializer::class) <p>class ZonedDateTime : TimePoint&lt;ZonedDateTime&gt; </p> <p>A date and time of day in a particular region.</p> <p><code>ZonedDateTime</code> takes time zone rules into account when performing calendrical calculations.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/#properties","title":"Properties","text":"Name Summary additionalNanosecondsSinceUnixEpoch <p>common</p><code>open val additionalNanosecondsSinceUnixEpoch: Nanoseconds</code>The number of additional nanoseconds on top of secondsSinceUnixEpoch. date <p>common</p><code>val date: Date</code>The local date. dateTime <p>common</p><code>val dateTime: DateTime</code>The local date and time of day. dayOfMonth <p>common</p><code>val dayOfMonth: Int</code>The day of the month. dayOfWeek <p>common</p><code>val dayOfWeek: DayOfWeek</code>The day of the week. dayOfYear <p>common</p><code>val dayOfYear: Int</code>The day of the year. endOfMonth <p>common</p><code>val ZonedDateTime.endOfMonth: ZonedDateTime</code>The date-time at the last representable instant of the month that this date-time falls in. endOfWeek <p>common</p><code>val ZonedDateTime.endOfWeek: ZonedDateTime</code>The date-time at the last representable instant of the ISO week that this date-time falls in. endOfYear <p>common</p><code>val ZonedDateTime.endOfYear: ZonedDateTime</code>The date-time at the last representable instant of the year that this date-time falls in. hour <p>common</p><code>val hour: Int</code>The hour of the day. isInLeapDay <p>common</p><code>val ZonedDateTime.isInLeapDay: Boolean</code>Checks if this date-time falls within February 29. isInLeapYear <p>common</p><code>val ZonedDateTime.isInLeapYear: Boolean</code>Checks if this date-time falls within a leap year. lengthOfMonth <p>common</p><code>val ZonedDateTime.lengthOfMonth: Days</code>The length of this date-time's month in days. lengthOfWeekBasedYear <p>common</p><code>val ZonedDateTime.lengthOfWeekBasedYear: Weeks</code>The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks. lengthOfYear <p>common</p><code>val ZonedDateTime.lengthOfYear: Days</code>The length of this date-time's year in days. millisecondOfUnixEpoch <p>common</p><code>open override val millisecondOfUnixEpoch: Long</code>The millisecond of the Unix epoch. millisecondsSinceUnixEpoch <p>common</p><code>open val millisecondsSinceUnixEpoch: Milliseconds</code>The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. minute <p>common</p><code>val minute: Int</code>The minute of the hour. month <p>common</p><code>val month: Month</code>The month of the year. monthNumber <p>common</p><code>val monthNumber: Int</code>The ISO month number, from 1-12. nanosecond <p>common</p><code>open override val nanosecond: Int</code>The nanosecond of the second. offset <p>common</p><code>val offset: UtcOffset</code>The offset from UTC. second <p>common</p><code>val second: Int</code>The second of the minute. secondOfUnixEpoch <p>common</p><code>open override val secondOfUnixEpoch: Long</code>The second of the Unix epoch. secondsSinceUnixEpoch <p>common</p><code>open val secondsSinceUnixEpoch: Seconds</code>The number of seconds since the Unix epoch of 1970-01-01T00:00Z. startOfMonth <p>common</p><code>val ZonedDateTime.startOfMonth: ZonedDateTime</code>The date-time at the first instant of the month that this date-time falls in. startOfWeek <p>common</p><code>val ZonedDateTime.startOfWeek: ZonedDateTime</code>The date-time at the first instant of the ISO week that this date-time falls in. startOfYear <p>common</p><code>val ZonedDateTime.startOfYear: ZonedDateTime</code>The date-time at the first instant of the year that this date-time falls in. time <p>common</p><code>val time: Time</code>The local time of day. week <p>common</p><code>val ZonedDateTime.week: ZonedDateTimeInterval</code>The interval defining the ISO week that this date-time falls within. weekBasedYear <p>common</p><code>val ZonedDateTime.weekBasedYear: Int</code>The week-based year used in the ISO week date system. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>val ZonedDateTime.weekOfMonth: Int</code>The week of the month, from 0-6, calculated using the ISO week definition. weekOfWeekBasedYear <p>common</p><code>val ZonedDateTime.weekOfWeekBasedYear: Int</code>The week number used in the ISO week date system. weekOfYear <p>common</p><code>val ZonedDateTime.weekOfYear: Int</code>The week of the year, calculated using the ISO week definition. If the week number is associated with the preceding year, <code>0</code> will be returned. year <p>common</p><code>val year: Int</code>The year. zone <p>common</p><code>val zone: TimeZone</code>The time zone."},{"location":"api/core/core/io.islandtime/-zoned-date-time/#functions","title":"Functions","text":"Name Summary adjustedTo <p>common</p><code>fun adjustedTo(newTimeZone: TimeZone): ZonedDateTime</code>Changes the time zone of a ZonedDateTime, adjusting the date, time, and offset such that the instant represented by it remains the same. compareTo <p>common</p><code>open operator fun compareTo(other: TimePoint&lt;*&gt;): Int</code>Compares this time point with another time point. copy <p>common</p><code>fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code><code>fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code><code>fun copy(year: Int = this.year, dayOfYear: Int, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code><code>fun copy(year: Int = this.year, monthNumber: Int, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code>Returns a copy of this date-time with the values of any individual components replaced by the new values specified. endOfWeek <p>common</p><code>fun ZonedDateTime.endOfWeek(settings: WeekSettings): ZonedDateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.<p>common</p><code>fun ZonedDateTime.endOfWeek(locale: Locale): ZonedDateTime</code>The date-time at the last representable instant of the week that this date-time falls in. The first day of the week will be determined by locale. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isSameInstantAs <p>common</p><code>open fun isSameInstantAs(other: TimePoint&lt;*&gt;): Boolean</code>Checks if this time point represents the same instant as other. Unlike the equals operator, equality is determined solely by timeline order. minus <p>common</p><code>operator fun minus(centuries: Centuries): ZonedDateTime</code>Returns this date-time with centuries subtracted from it.<p>common</p><code>operator fun minus(days: Days): ZonedDateTime</code>Returns this date-time with days subtracted from it.<p>common</p><code>operator fun minus(decades: Decades): ZonedDateTime</code>Returns this date-time with decades subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): ZonedDateTime</code><p>common</p><code>open operator override fun minus(hours: Hours): ZonedDateTime</code>Returns this date-time with hours subtracted from it.<p>common</p><code>open operator override fun minus(microseconds: Microseconds): ZonedDateTime</code>Returns this date-time with microseconds subtracted from it.<p>common</p><code>open operator override fun minus(milliseconds: Milliseconds): ZonedDateTime</code>Returns this date-time with milliseconds subtracted from it.<p>common</p><code>open operator override fun minus(minutes: Minutes): ZonedDateTime</code>Returns this date-time with minutes subtracted from it.<p>common</p><code>operator fun minus(months: Months): ZonedDateTime</code>Returns this date-time with months subtracted from it.<p>common</p><code>open operator override fun minus(nanoseconds: Nanoseconds): ZonedDateTime</code>Returns this date-time with nanoseconds subtracted from it.<p>common</p><code>operator fun minus(period: Period): ZonedDateTime</code>Returns this date-time with period subtracted from it.<p>common</p><code>open operator override fun minus(seconds: Seconds): ZonedDateTime</code>Returns this date-time with seconds subtracted from it.<p>common</p><code>operator fun minus(weeks: Weeks): ZonedDateTime</code>Returns this date-time with weeks subtracted from it.<p>common</p><code>operator fun minus(years: Years): ZonedDateTime</code>Returns this date-time with years subtracted from it.<p>common</p><code>operator fun minus(duration: Duration): ZonedDateTime</code>Returns this date-time with duration subtracted from it. next <p>common</p><code>fun ZonedDateTime.next(dayOfWeek: DayOfWeek): ZonedDateTime</code>The next date-time after this one that falls on dayOfWeek. nextOrSame <p>common</p><code>fun ZonedDateTime.nextOrSame(dayOfWeek: DayOfWeek): ZonedDateTime</code>The next date-time that falls on dayOfWeek, or this date-time if it falls on the same day. plus <p>common</p><code>operator fun plus(centuries: Centuries): ZonedDateTime</code>Returns this date-tme with centuries added to it.<p>common</p><code>operator fun plus(days: Days): ZonedDateTime</code>Returns this date-time with days added to it.<p>common</p><code>operator fun plus(decades: Decades): ZonedDateTime</code>Returns this date-time with decades added to it.<p>common</p><code>operator fun plus(duration: Duration): ZonedDateTime</code><p>common</p><code>open operator override fun plus(hours: Hours): ZonedDateTime</code>Returns this date-time with hours added to it.<p>common</p><code>open operator override fun plus(microseconds: Microseconds): ZonedDateTime</code>Returns this date-time with microseconds added to it.<p>common</p><code>open operator override fun plus(milliseconds: Milliseconds): ZonedDateTime</code>Returns this date-time with milliseconds added to it.<p>common</p><code>open operator override fun plus(minutes: Minutes): ZonedDateTime</code>Returns this date-time with minutes added to it.<p>common</p><code>operator fun plus(months: Months): ZonedDateTime</code>Returns this date-time with months added to it.<p>common</p><code>open operator override fun plus(nanoseconds: Nanoseconds): ZonedDateTime</code>Returns this date-time with nanoseconds added to it.<p>common</p><code>operator fun plus(period: Period): ZonedDateTime</code>Returns this date-time with period added to it.<p>common</p><code>open operator override fun plus(seconds: Seconds): ZonedDateTime</code>Returns this date-time with seconds added to it.<p>common</p><code>operator fun plus(weeks: Weeks): ZonedDateTime</code>Returns this date-time with weeks added to it.<p>common</p><code>operator fun plus(years: Years): ZonedDateTime</code>Returns this date-time with years added to it.<p>common</p><code>operator fun plus(duration: Duration): ZonedDateTime</code>Returns this date-time with duration added to it. previous <p>common</p><code>fun ZonedDateTime.previous(dayOfWeek: DayOfWeek): ZonedDateTime</code>The last date-time before this one that falls on dayOfWeek. previousOrSame <p>common</p><code>fun ZonedDateTime.previousOrSame(dayOfWeek: DayOfWeek): ZonedDateTime</code>The previous date-time that falls on dayOfWeek, or this date-time if it falls on the same day. rangeTo <p>common</p><code>operator fun rangeTo(other: ZonedDateTime): ZonedDateTimeInterval</code> roundedDownTo <p>common</p><code>fun ZonedDateTime.roundedDownTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded down to match the precision of a given unit. roundedDownToNearest <p>common</p><code>fun ZonedDateTime.roundedDownToNearest(increment: Hours): ZonedDateTime</code>Returns this date-time, rounded down to the nearest hour that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedDownToNearest(increment: Microseconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest microsecond that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedDownToNearest(increment: Milliseconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest millisecond that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedDownToNearest(increment: Minutes): ZonedDateTime</code>Returns this date-time, rounded down to the nearest minute that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedDownToNearest(increment: Nanoseconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedDownToNearest(increment: Seconds): ZonedDateTime</code>Returns this date-time, rounded down to the nearest second that satisfies the increment. roundedTo <p>common</p><code>fun ZonedDateTime.roundedTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded to match the precision of a given unit. If the time is halfway between whole values of the unit, it will be rounded up. roundedToNearest <p>common</p><code>fun ZonedDateTime.roundedToNearest(increment: Hours): ZonedDateTime</code>Returns this date-time, rounded to the nearest hour that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun ZonedDateTime.roundedToNearest(increment: Microseconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest microsecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun ZonedDateTime.roundedToNearest(increment: Milliseconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest millisecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun ZonedDateTime.roundedToNearest(increment: Minutes): ZonedDateTime</code>Returns this date-time, rounded to the nearest minute that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun ZonedDateTime.roundedToNearest(increment: Nanoseconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest nanosecond that satisfies the increment. If the time is halfway between increments, it will be rounded up.<p>common</p><code>fun ZonedDateTime.roundedToNearest(increment: Seconds): ZonedDateTime</code>Returns this date-time, rounded to the nearest second that satisfies the increment. If the time is halfway between increments, it will be rounded up. roundedUpTo <p>common</p><code>fun ZonedDateTime.roundedUpTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded up to match the precision of a given unit. roundedUpToNearest <p>common</p><code>fun ZonedDateTime.roundedUpToNearest(increment: Hours): ZonedDateTime</code>Returns this date-time, rounded up to the nearest hour that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedUpToNearest(increment: Microseconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest microsecond that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedUpToNearest(increment: Milliseconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest millisecond that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedUpToNearest(increment: Minutes): ZonedDateTime</code>Returns this date-time, rounded up to the nearest minute that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedUpToNearest(increment: Nanoseconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest nanosecond that satisfies the increment.<p>common</p><code>fun ZonedDateTime.roundedUpToNearest(increment: Seconds): ZonedDateTime</code>Returns this date-time, rounded up to the nearest second that satisfies the increment. startOfWeek <p>common</p><code>fun ZonedDateTime.startOfWeek(settings: WeekSettings): ZonedDateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by the user's system settings. This may differ from the first day of the week associated with the default locale on platforms that allow the user to customize this.<p>common</p><code>fun ZonedDateTime.startOfWeek(locale: Locale): ZonedDateTime</code>The date-time at the first instant of the week that this date-time falls in. The first day of the week will be determined by locale. toInstant <p>common</p><code>fun ZonedDateTime.toInstant(): Instant</code>Converts this date-time to an Instant representing the same time point. toJavaZonedDateTime <p>jvm</p><code>fun ZonedDateTime.toJavaZonedDateTime(): ZonedDateTime</code>Converts this date-time to an equivalent Java <code>ZonedDateTime</code>. toNSDate <p>darwin</p><code>fun &lt;T&gt; TimePoint&lt;T&gt;.toNSDate(): &lt;Error class: unknown class&gt;</code>Converts this time point to an <code>NSDate</code>. toNSDateComponents <p>darwin</p><code>fun ZonedDateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this date-time to an equivalent <code>NSDateComponents</code> object. toOffsetDateTime <p>common</p><code>fun ZonedDateTime.toOffsetDateTime(): OffsetDateTime</code>Returns the combined date, time, and UTC offset. toOffsetTime <p>common</p><code>fun ZonedDateTime.toOffsetTime(): OffsetTime</code>Returns the combined time and UTC offset. toString <p>common</p><code>open override fun toString(): String</code>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04-15T17:31:45.923452091-04:00[America/New_York]</code> or <code>2020-02-13T02:30Z</code>. toYear <p>common</p><code>fun ZonedDateTime.toYear(): Year</code>Returns this date-time with the precision reduced to the year. toYearMonth <p>common</p><code>fun ZonedDateTime.toYearMonth(): YearMonth</code>Returns this date-time with the precision reduced to the month. truncatedTo <p>common</p><code>fun ZonedDateTime.truncatedTo(unit: TimeUnit): ZonedDateTime</code>Returns this date-time, rounded down to match the precision of a given unit. until <p>common</p><code>infix fun ZonedDateTime.until(to: ZonedDateTime): ZonedDateTimeInterval</code>Creates a ZonedDateTimeInterval from this date-time up to, but not including to. week <p>common</p><code>fun ZonedDateTime.week(settings: WeekSettings): ZonedDateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be determined by the provided settings.<p>common</p><code>fun ZonedDateTime.week(locale: Locale): ZonedDateTimeInterval</code>The interval defining the week that this date-time falls within. The first day of the week will be the default associated with the provided locale. weekBasedYear <p>common</p><code>fun ZonedDateTime.weekBasedYear(settings: WeekSettings): Int</code>The week-based year, calculated using the week definition in settings. This value differs from the regular ISO year when the week number falls in the preceding or following year.<p>common</p><code>fun ZonedDateTime.weekBasedYear(locale: Locale): Int</code>The week-based year, calculated using the week definition associated with the provided locale. This value differs from the regular ISO year when the week number falls in the preceding or following year. weekOfMonth <p>common</p><code>fun ZonedDateTime.weekOfMonth(settings: WeekSettings): Int</code>The week of the month, from 0-6, calculated using the week definition in settings.<p>common</p><code>fun ZonedDateTime.weekOfMonth(locale: Locale): Int</code>The week of the month, from 0-6, calculated using the default week definition associated with the provided locale. weekOfWeekBasedYear <p>common</p><code>fun ZonedDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int</code>The week number of the week-based year, calculated using the week definition in settings.<p>common</p><code>fun ZonedDateTime.weekOfWeekBasedYear(locale: Locale): Int</code>The week number of the week-based year, calculated using the week definition associated with the provided locale. weekOfYear <p>common</p><code>fun ZonedDateTime.weekOfYear(settings: WeekSettings): Int</code>The week of the year, calculated using the week definition in settings. If the week number is associated with the preceding year, <code>0</code> will be returned.<p>common</p><code>fun ZonedDateTime.weekOfYear(locale: Locale): Int</code>The week of the year, calculated using the week definition associated with the provided locale. If the week number is associated with the preceding year, <code>0</code> will be returned. withEarlierOffsetAtOverlap <p>common</p><code>fun withEarlierOffsetAtOverlap(): ZonedDateTime</code>If the local date-time falls during an overlap caused by a daylight savings transition, a ZonedDateTime with the same local date and time will be returned, but using the earlier of the two valid offsets. withFixedOffsetZone <p>common</p><code>fun withFixedOffsetZone(): ZonedDateTime</code>If this date-time uses a region-based time zone, a copy with a fixed offset will be returned. Otherwise, this date-time will be returned unchanged. withLaterOffsetAtOverlap <p>common</p><code>fun withLaterOffsetAtOverlap(): ZonedDateTime</code>If the local date-time falls during an overlap caused by a daylight savings transition, a ZonedDateTime with the same local date and time will be returned, but using the later of the two valid offsets."},{"location":"api/core/core/io.islandtime/-zoned-date-time/adjusted-to/","title":"adjustedTo","text":"<p>//core/io.islandtime/ZonedDateTime/adjustedTo</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/adjusted-to/#adjustedto","title":"adjustedTo","text":"<p>common</p> <p><code>fun adjustedTo(newTimeZone: TimeZone): ZonedDateTime</code></p> <p>Changes the time zone of a ZonedDateTime, adjusting the date, time, and offset such that the instant represented by it remains the same.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/copy/","title":"copy","text":"<p>//core/io.islandtime/ZonedDateTime/copy</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(dateTime: DateTime = this.dateTime, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code></p> <p><code>fun copy(date: Date = this.date, time: Time = this.time, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code></p> <p><code>fun copy(year: Int = this.year, dayOfYear: Int, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code></p> <p><code>fun copy(year: Int = this.year, month: Month = this.month, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code></p> <p><code>fun copy(year: Int = this.year, monthNumber: Int, dayOfMonth: Int = this.dayOfMonth, hour: Int = this.hour, minute: Int = this.minute, second: Int = this.second, nanosecond: Int = this.nanosecond, offset: UtcOffset = this.offset, zone: TimeZone = this.zone): ZonedDateTime</code></p> <p>Returns a copy of this date-time with the values of any individual components replaced by the new values specified.</p> <p>If the new date falls within a daylight savings time gap, it will be adjusted forward by the length of the gap. If it falls within an overlap, the offset value will be used if possible. The time zone takes precedence over the offset, so any provided offset value will be ignored if it is invalid within the current region.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/copy/#throws","title":"Throws","text":"DateTimeException if the resulting date-time is invalid"},{"location":"api/core/core/io.islandtime/-zoned-date-time/date-time/","title":"dateTime","text":"<p>//core/io.islandtime/ZonedDateTime/dateTime</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/date-time/#datetime","title":"dateTime","text":"<p>common</p> <p><code>val dateTime: DateTime</code></p> <p>The local date and time of day.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/date/","title":"date","text":"<p>//core/io.islandtime/ZonedDateTime/date</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/date/#date","title":"date","text":"<p>common</p> <p><code>val date: Date</code></p> <p>The local date.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/day-of-month/","title":"dayOfMonth","text":"<p>//core/io.islandtime/ZonedDateTime/dayOfMonth</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/day-of-month/#dayofmonth","title":"dayOfMonth","text":"<p>common</p> <p><code>val dayOfMonth: Int</code></p> <p>The day of the month.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/day-of-week/","title":"dayOfWeek","text":"<p>//core/io.islandtime/ZonedDateTime/dayOfWeek</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/day-of-week/#dayofweek","title":"dayOfWeek","text":"<p>common</p> <p><code>val dayOfWeek: DayOfWeek</code></p> <p>The day of the week.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/day-of-year/","title":"dayOfYear","text":"<p>//core/io.islandtime/ZonedDateTime/dayOfYear</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/day-of-year/#dayofyear","title":"dayOfYear","text":"<p>common</p> <p><code>val dayOfYear: Int</code></p> <p>The day of the year.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/equals/","title":"equals","text":"<p>//core/io.islandtime/ZonedDateTime/equals</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime/ZonedDateTime/hashCode</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/hour/","title":"hour","text":"<p>//core/io.islandtime/ZonedDateTime/hour</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/hour/#hour","title":"hour","text":"<p>common</p> <p><code>val hour: Int</code></p> <p>The hour of the day.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/millisecond-of-unix-epoch/","title":"millisecondOfUnixEpoch","text":"<p>//core/io.islandtime/ZonedDateTime/millisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/millisecond-of-unix-epoch/#millisecondofunixepoch","title":"millisecondOfUnixEpoch","text":"<p>common</p> <p><code>open override val millisecondOfUnixEpoch: Long</code></p> <p>The millisecond of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/minus/","title":"minus","text":"<p>//core/io.islandtime/ZonedDateTime/minus</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(period: Period): ZonedDateTime</code></p> <p>Returns this date-time with period subtracted from it.</p> <p>Years are subtracted first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun minus(duration: Duration): ZonedDateTime</code></p> <p>common</p> <p><code>operator fun minus(duration: Duration): ZonedDateTime</code></p> <p>Returns this date-time with duration subtracted from it.</p> <p>common</p> <p><code>operator fun minus(centuries: Centuries): ZonedDateTime</code></p> <p>Returns this date-time with centuries subtracted from it.</p> <p>common</p> <p><code>operator fun minus(decades: Decades): ZonedDateTime</code></p> <p>Returns this date-time with decades subtracted from it.</p> <p>common</p> <p><code>operator fun minus(years: Years): ZonedDateTime</code></p> <p>Returns this date-time with years subtracted from it.</p> <p>common</p> <p><code>operator fun minus(months: Months): ZonedDateTime</code></p> <p>Returns this date-time with months subtracted from it.</p> <p>common</p> <p><code>operator fun minus(weeks: Weeks): ZonedDateTime</code></p> <p>Returns this date-time with weeks subtracted from it.</p> <p>common</p> <p><code>operator fun minus(days: Days): ZonedDateTime</code></p> <p>Returns this date-time with days subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(hours: Hours): ZonedDateTime</code></p> <p>Returns this date-time with hours subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(minutes: Minutes): ZonedDateTime</code></p> <p>Returns this date-time with minutes subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(seconds: Seconds): ZonedDateTime</code></p> <p>Returns this date-time with seconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(milliseconds: Milliseconds): ZonedDateTime</code></p> <p>Returns this date-time with milliseconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(microseconds: Microseconds): ZonedDateTime</code></p> <p>Returns this date-time with microseconds subtracted from it.</p> <p>common</p> <p><code>open operator override fun minus(nanoseconds: Nanoseconds): ZonedDateTime</code></p> <p>Returns this date-time with nanoseconds subtracted from it.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/minute/","title":"minute","text":"<p>//core/io.islandtime/ZonedDateTime/minute</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/minute/#minute","title":"minute","text":"<p>common</p> <p><code>val minute: Int</code></p> <p>The minute of the hour.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/month-number/","title":"monthNumber","text":"<p>//core/io.islandtime/ZonedDateTime/monthNumber</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/month-number/#monthnumber","title":"monthNumber","text":"<p>common</p> <p><code>val monthNumber: Int</code></p> <p>The ISO month number, from 1-12.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/month/","title":"month","text":"<p>//core/io.islandtime/ZonedDateTime/month</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/month/#month","title":"month","text":"<p>common</p> <p><code>val month: Month</code></p> <p>The month of the year.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/nanosecond/","title":"nanosecond","text":"<p>//core/io.islandtime/ZonedDateTime/nanosecond</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/nanosecond/#nanosecond","title":"nanosecond","text":"<p>common</p> <p><code>open override val nanosecond: Int</code></p> <p>The nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/offset/","title":"offset","text":"<p>//core/io.islandtime/ZonedDateTime/offset</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/offset/#offset","title":"offset","text":"<p>common</p> <p><code>val offset: UtcOffset</code></p> <p>The offset from UTC.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/plus/","title":"plus","text":"<p>//core/io.islandtime/ZonedDateTime/plus</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(period: Period): ZonedDateTime</code></p> <p>Returns this date-time with period added to it.</p> <p>Years are added first, then months, then days. If the day exceeds the maximum month length at any step, it will be coerced into the valid range.</p> <p>common</p> <p><code>operator fun plus(duration: Duration): ZonedDateTime</code></p> <p>common</p> <p><code>operator fun plus(duration: Duration): ZonedDateTime</code></p> <p>Returns this date-time with duration added to it.</p> <p>common</p> <p><code>operator fun plus(centuries: Centuries): ZonedDateTime</code></p> <p>Returns this date-tme with centuries added to it.</p> <p>common</p> <p><code>operator fun plus(decades: Decades): ZonedDateTime</code></p> <p>Returns this date-time with decades added to it.</p> <p>common</p> <p><code>operator fun plus(years: Years): ZonedDateTime</code></p> <p>Returns this date-time with years added to it.</p> <p>common</p> <p><code>operator fun plus(months: Months): ZonedDateTime</code></p> <p>Returns this date-time with months added to it.</p> <p>common</p> <p><code>operator fun plus(weeks: Weeks): ZonedDateTime</code></p> <p>Returns this date-time with weeks added to it.</p> <p>common</p> <p><code>operator fun plus(days: Days): ZonedDateTime</code></p> <p>Returns this date-time with days added to it.</p> <p>common</p> <p><code>open operator override fun plus(hours: Hours): ZonedDateTime</code></p> <p>Returns this date-time with hours added to it.</p> <p>common</p> <p><code>open operator override fun plus(minutes: Minutes): ZonedDateTime</code></p> <p>Returns this date-time with minutes added to it.</p> <p>common</p> <p><code>open operator override fun plus(seconds: Seconds): ZonedDateTime</code></p> <p>Returns this date-time with seconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(milliseconds: Milliseconds): ZonedDateTime</code></p> <p>Returns this date-time with milliseconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(microseconds: Microseconds): ZonedDateTime</code></p> <p>Returns this date-time with microseconds added to it.</p> <p>common</p> <p><code>open operator override fun plus(nanoseconds: Nanoseconds): ZonedDateTime</code></p> <p>Returns this date-time with nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/range-to/","title":"rangeTo","text":"<p>//core/io.islandtime/ZonedDateTime/rangeTo</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/range-to/#rangeto","title":"rangeTo","text":"<p>common</p> <p><code>operator fun rangeTo(other: ZonedDateTime): ZonedDateTimeInterval</code></p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/second-of-unix-epoch/","title":"secondOfUnixEpoch","text":"<p>//core/io.islandtime/ZonedDateTime/secondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/second-of-unix-epoch/#secondofunixepoch","title":"secondOfUnixEpoch","text":"<p>common</p> <p><code>open override val secondOfUnixEpoch: Long</code></p> <p>The second of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/second/","title":"second","text":"<p>//core/io.islandtime/ZonedDateTime/second</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/second/#second","title":"second","text":"<p>common</p> <p><code>val second: Int</code></p> <p>The second of the minute.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/time/","title":"time","text":"<p>//core/io.islandtime/ZonedDateTime/time</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/time/#time","title":"time","text":"<p>common</p> <p><code>val time: Time</code></p> <p>The local time of day.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/to-string/","title":"toString","text":"<p>//core/io.islandtime/ZonedDateTime/toString</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this date-time to a string in ISO-8601 extended format. For example, <code>2012-04-15T17:31:45.923452091-04:00[America/New_York]</code> or <code>2020-02-13T02:30Z</code>.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/with-earlier-offset-at-overlap/","title":"withEarlierOffsetAtOverlap","text":"<p>//core/io.islandtime/ZonedDateTime/withEarlierOffsetAtOverlap</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/with-earlier-offset-at-overlap/#withearlieroffsetatoverlap","title":"withEarlierOffsetAtOverlap","text":"<p>common</p> <p><code>fun withEarlierOffsetAtOverlap(): ZonedDateTime</code></p> <p>If the local date-time falls during an overlap caused by a daylight savings transition, a ZonedDateTime with the same local date and time will be returned, but using the earlier of the two valid offsets.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/with-fixed-offset-zone/","title":"withFixedOffsetZone","text":"<p>//core/io.islandtime/ZonedDateTime/withFixedOffsetZone</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/with-fixed-offset-zone/#withfixedoffsetzone","title":"withFixedOffsetZone","text":"<p>common</p> <p><code>fun withFixedOffsetZone(): ZonedDateTime</code></p> <p>If this date-time uses a region-based time zone, a copy with a fixed offset will be returned. Otherwise, this date-time will be returned unchanged.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/with-later-offset-at-overlap/","title":"withLaterOffsetAtOverlap","text":"<p>//core/io.islandtime/ZonedDateTime/withLaterOffsetAtOverlap</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/with-later-offset-at-overlap/#withlateroffsetatoverlap","title":"withLaterOffsetAtOverlap","text":"<p>common</p> <p><code>fun withLaterOffsetAtOverlap(): ZonedDateTime</code></p> <p>If the local date-time falls during an overlap caused by a daylight savings transition, a ZonedDateTime with the same local date and time will be returned, but using the later of the two valid offsets.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/year/","title":"year","text":"<p>//core/io.islandtime/ZonedDateTime/year</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/year/#year","title":"year","text":"<p>common</p> <p><code>val year: Int</code></p> <p>The year.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/zone/","title":"zone","text":"<p>//core/io.islandtime/ZonedDateTime/zone</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/zone/#zone","title":"zone","text":"<p>common</p> <p><code>val zone: TimeZone</code></p> <p>The time zone.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/","title":"Companion","text":"<p>//core/io.islandtime/ZonedDateTime/Companion</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/#properties","title":"Properties","text":"Name Summary DefaultSortOrder <p>common</p><code>val DefaultSortOrder: Comparator&lt;ZonedDateTime&gt;</code>A Comparator that compares by instant, then date-time, then time zone. Using this <code>Comparator</code> guarantees a deterministic order when sorting. TimelineOrder <p>common</p><code>val TimelineOrder: Comparator&lt;TimePoint&lt;*&gt;&gt;</code>A Comparator that compares by timeline order only, ignoring any offset or time zone differences."},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/#functions","title":"Functions","text":"Name Summary fromInstant <p>common</p><code>fun fromInstant(dateTime: DateTime, offset: UtcOffset, zone: TimeZone): ZonedDateTime</code>Creates a ZonedDateTime from the instant represented by a local date-time and offset. The resulting <code>ZonedDateTime</code> may have a different date-time and offset depending on the time zone rules, but the instant will be the same. fromLocal <p>common</p><code>fun fromLocal(dateTime: DateTime, zone: TimeZone, preferredOffset: UtcOffset? = null): ZonedDateTime</code>Creates a ZonedDateTime from a local date and time, optionally using a preferred offset. If the local date and time fall during an overlap, preferredOffset will be used if it represents one of the two valid offsets. If it is <code>null</code> or invalid, it will be ignored. fromMillisecondOfUnixEpoch <p>common</p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long, zone: TimeZone): ZonedDateTime</code>Creates a ZonedDateTime from the millisecond of the Unix epoch at zone. fromMillisecondsSinceUnixEpoch <p>common</p><code>fun fromMillisecondsSinceUnixEpoch(milliseconds: Milliseconds, zone: TimeZone): ZonedDateTime</code>Creates a ZonedDateTime from a duration of milliseconds relative to the Unix epoch at zone. fromSecondOfUnixEpoch <p>common</p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int = 0, zone: TimeZone): ZonedDateTime</code>Creates a ZonedDateTime from the second of the Unix epoch at zone. fromSecondsSinceUnixEpoch <p>common</p><code>fun fromSecondsSinceUnixEpoch(seconds: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds, zone: TimeZone): ZonedDateTime</code>Creates a ZonedDateTime from a duration of seconds relative to the Unix epoch at zone, optionally, with some number of additional nanoseconds added to it. now <p>common</p><code>fun ZonedDateTime.Companion.now(): ZonedDateTime</code>Gets the current ZonedDateTime from the system clock.<p>common</p><code>fun ZonedDateTime.Companion.now(clock: Clock): ZonedDateTime</code>Gets the current ZonedDateTime from the provided clock.<p>jvm</p><code>fun ZonedDateTime.Companion.now(clock: Clock): ZonedDateTime</code>Gets the current ZonedDateTime from the provided clock."},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/-default-sort-order/","title":"DefaultSortOrder","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/DefaultSortOrder</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/-default-sort-order/#defaultsortorder","title":"DefaultSortOrder","text":"<p>common</p> <p><code>val DefaultSortOrder: Comparator&lt;ZonedDateTime&gt;</code></p> <p>A Comparator that compares by instant, then date-time, then time zone. Using this <code>Comparator</code> guarantees a deterministic order when sorting.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/-timeline-order/","title":"TimelineOrder","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/TimelineOrder</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/-timeline-order/#timelineorder","title":"TimelineOrder","text":"<p>common</p> <p><code>val TimelineOrder: Comparator&lt;TimePoint&lt;*&gt;&gt;</code></p> <p>A Comparator that compares by timeline order only, ignoring any offset or time zone differences.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-instant/","title":"fromInstant","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/fromInstant</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-instant/#frominstant","title":"fromInstant","text":"<p>common</p> <p><code>fun fromInstant(dateTime: DateTime, offset: UtcOffset, zone: TimeZone): ZonedDateTime</code></p> <p>Creates a ZonedDateTime from the instant represented by a local date-time and offset. The resulting <code>ZonedDateTime</code> may have a different date-time and offset depending on the time zone rules, but the instant will be the same.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-local/","title":"fromLocal","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/fromLocal</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-local/#fromlocal","title":"fromLocal","text":"<p>common</p> <p><code>fun fromLocal(dateTime: DateTime, zone: TimeZone, preferredOffset: UtcOffset? = null): ZonedDateTime</code></p> <p>Creates a ZonedDateTime from a local date and time, optionally using a preferred offset. If the local date and time fall during an overlap, preferredOffset will be used if it represents one of the two valid offsets. If it is <code>null</code> or invalid, it will be ignored.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-millisecond-of-unix-epoch/","title":"fromMillisecondOfUnixEpoch","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/fromMillisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-millisecond-of-unix-epoch/#frommillisecondofunixepoch","title":"fromMillisecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromMillisecondOfUnixEpoch(millisecond: Long, zone: TimeZone): ZonedDateTime</code></p> <p>Creates a ZonedDateTime from the millisecond of the Unix epoch at zone.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-milliseconds-since-unix-epoch/","title":"fromMillisecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/fromMillisecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-milliseconds-since-unix-epoch/#frommillisecondssinceunixepoch","title":"fromMillisecondsSinceUnixEpoch","text":"<p>common</p> <p><code>fun fromMillisecondsSinceUnixEpoch(milliseconds: Milliseconds, zone: TimeZone): ZonedDateTime</code></p> <p>Creates a ZonedDateTime from a duration of milliseconds relative to the Unix epoch at zone.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-second-of-unix-epoch/","title":"fromSecondOfUnixEpoch","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/fromSecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-second-of-unix-epoch/#fromsecondofunixepoch","title":"fromSecondOfUnixEpoch","text":"<p>common</p> <p><code>fun fromSecondOfUnixEpoch(second: Long, nanosecond: Int = 0, zone: TimeZone): ZonedDateTime</code></p> <p>Creates a ZonedDateTime from the second of the Unix epoch at zone.</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-seconds-since-unix-epoch/","title":"fromSecondsSinceUnixEpoch","text":"<p>//core/io.islandtime/ZonedDateTime/Companion/fromSecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime/-zoned-date-time/-companion/from-seconds-since-unix-epoch/#fromsecondssinceunixepoch","title":"fromSecondsSinceUnixEpoch","text":"<p>common</p> <p><code>fun fromSecondsSinceUnixEpoch(seconds: Seconds, nanosecondAdjustment: Nanoseconds = 0.nanoseconds, zone: TimeZone): ZonedDateTime</code></p> <p>Creates a ZonedDateTime from a duration of seconds relative to the Unix epoch at zone, optionally, with some number of additional nanoseconds added to it.</p>"},{"location":"api/core/core/io.islandtime.base/","title":"io.islandtime.base","text":"<p>//core/io.islandtime.base</p>"},{"location":"api/core/core/io.islandtime.base/#package-level-declarations","title":"Package-level declarations","text":"<p>common</p> <p>(Experimental) Framework-level interfaces, allowing aspects of date, time, and duration to be abstracted. This area is unstable and likely to see significant change.</p>"},{"location":"api/core/core/io.islandtime.base/#types","title":"Types","text":"Name Summary DateTimeField <p>common</p><code>enum DateTimeField : Enum&lt;DateTimeField&gt; </code>A field describing a property of a date, time, or measurement of time. TimePoint <p>common</p><code>interface TimePoint&lt;T&gt;</code>An object that can be placed exactly in time."},{"location":"api/core/core/io.islandtime.base/-date-time-field/","title":"DateTimeField","text":"<p>//core/io.islandtime.base/DateTimeField</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/#datetimefield","title":"DateTimeField","text":"<p>common</p> <p><code>enum DateTimeField : Enum&lt;DateTimeField&gt; </code></p> <p>A field describing a property of a date, time, or measurement of time.</p> <p>These are intended to be used primarily during parsing and formatting. Each date-time primitive is capable of resolving or supplying the set of fields that are applicable to it.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/#entries","title":"Entries","text":"YEAR <p>common</p><code>YEAR</code>The proleptic year. YEAR_OF_ERA <p>common</p><code>YEAR_OF_ERA</code>The year of the era. ERA <p>common</p><code>ERA</code>The era. MONTH_OF_YEAR <p>common</p><code>MONTH_OF_YEAR</code>The month of the year, such as <code>January</code> DAY_OF_YEAR <p>common</p><code>DAY_OF_YEAR</code>The day of the year. DAY_OF_MONTH <p>common</p><code>DAY_OF_MONTH</code>The day of the month. DAY_OF_WEEK <p>common</p><code>DAY_OF_WEEK</code>The day of the week, such as <code>Sunday</code>. AM_PM_OF_DAY <p>common</p><code>AM_PM_OF_DAY</code>AM or PM of the day. HOUR_OF_DAY <p>common</p><code>HOUR_OF_DAY</code>The hour of the day, from 0 to 23. MINUTE_OF_HOUR <p>common</p><code>MINUTE_OF_HOUR</code>The minute of the hour, from 0 to 59. SECOND_OF_MINUTE <p>common</p><code>SECOND_OF_MINUTE</code>The second of the minute, from 0 to 59. NANOSECOND_OF_SECOND <p>common</p><code>NANOSECOND_OF_SECOND</code>The nanosecond of the second, from 0 to 999,999,999. MILLISECOND_OF_SECOND <p>common</p><code>MILLISECOND_OF_SECOND</code>The millisecond of the second, from 0 to 999. UTC_OFFSET_SIGN <p>common</p><code>UTC_OFFSET_SIGN</code>The sign of the UTC offset, -1 (negative) or 1 (positive). UTC_OFFSET_HOURS <p>common</p><code>UTC_OFFSET_HOURS</code>The hour component of the UTC offset, from 0-18. UTC_OFFSET_MINUTES <p>common</p><code>UTC_OFFSET_MINUTES</code>The minute component of the UTC offset, from 0-59. UTC_OFFSET_SECONDS <p>common</p><code>UTC_OFFSET_SECONDS</code>The second component of the UTC offset, from 0-59. UTC_OFFSET_TOTAL_SECONDS <p>common</p><code>UTC_OFFSET_TOTAL_SECONDS</code>The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60). PERIOD_SIGN <p>common</p><code>PERIOD_SIGN</code>The sign of the period, -1 (negative) or 1 (positive). PERIOD_OF_YEARS <p>common</p><code>PERIOD_OF_YEARS</code>A period of years. PERIOD_OF_MONTHS <p>common</p><code>PERIOD_OF_MONTHS</code>A period of months. PERIOD_OF_WEEKS <p>common</p><code>PERIOD_OF_WEEKS</code>A period of weeks. PERIOD_OF_DAYS <p>common</p><code>PERIOD_OF_DAYS</code>A period of days. DURATION_OF_HOURS <p>common</p><code>DURATION_OF_HOURS</code>A duration of hours. DURATION_OF_MINUTES <p>common</p><code>DURATION_OF_MINUTES</code>A duration of minutes. DURATION_OF_SECONDS <p>common</p><code>DURATION_OF_SECONDS</code>A duration of seconds. IS_UNBOUNDED <p>common</p><code>IS_UNBOUNDED</code>Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval."},{"location":"api/core/core/io.islandtime.base/-date-time-field/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;DateTimeField&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/#functions","title":"Functions","text":"Name Summary valueOf <p>common</p><code>fun valueOf(value: String): DateTimeField</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;DateTimeField&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime.base/-date-time-field/entries/","title":"entries","text":"<p>//core/io.islandtime.base/DateTimeField/entries</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;DateTimeField&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/value-of/","title":"valueOf","text":"<p>//core/io.islandtime.base/DateTimeField/valueOf</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): DateTimeField</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime.base/-date-time-field/values/","title":"values","text":"<p>//core/io.islandtime.base/DateTimeField/values</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;DateTimeField&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-a-m_-p-m_-o-f_-d-a-y/","title":"AM_PM_OF_DAY","text":"<p>//core/io.islandtime.base/DateTimeField/AM_PM_OF_DAY</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-a-m_-p-m_-o-f_-d-a-y/#am_pm_of_day","title":"AM_PM_OF_DAY","text":"<p>common</p> <p><code>AM_PM_OF_DAY <p></p> <p>AM or PM of the day.</p> <p>0 (<code>AM</code>) or 1 (<code>PM</code>).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-a-m_-p-m_-o-f_-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-m-o-n-t-h/","title":"DAY_OF_MONTH","text":"<p>//core/io.islandtime.base/DateTimeField/DAY_OF_MONTH</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-m-o-n-t-h/#day_of_month","title":"DAY_OF_MONTH","text":"<p>common</p> <p><code>DAY_OF_MONTH <p></p> <p>The day of the month.</p> <p>In the ISO calendar system, this will be from 1-31.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-m-o-n-t-h/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-w-e-e-k/","title":"DAY_OF_WEEK","text":"<p>//core/io.islandtime.base/DateTimeField/DAY_OF_WEEK</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-w-e-e-k/#day_of_week","title":"DAY_OF_WEEK","text":"<p>common</p> <p><code>DAY_OF_WEEK <p></p> <p>The day of the week, such as <code>Sunday</code>.</p> <p>In the ISO calendar system, this will be from 1 (<code>Monday</code>) to 7 (<code>Sunday</code>).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-w-e-e-k/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-y-e-a-r/","title":"DAY_OF_YEAR","text":"<p>//core/io.islandtime.base/DateTimeField/DAY_OF_YEAR</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-y-e-a-r/#day_of_year","title":"DAY_OF_YEAR","text":"<p>common</p> <p><code>DAY_OF_YEAR <p></p> <p>The day of the year.</p> <p>In the ISO calendar system, this will be from 1-366.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-a-y_-o-f_-y-e-a-r/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-h-o-u-r-s/","title":"DURATION_OF_HOURS","text":"<p>//core/io.islandtime.base/DateTimeField/DURATION_OF_HOURS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-h-o-u-r-s/#duration_of_hours","title":"DURATION_OF_HOURS","text":"<p>common</p> <p><code>DURATION_OF_HOURS <p></p> <p>A duration of hours.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-h-o-u-r-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-m-i-n-u-t-e-s/","title":"DURATION_OF_MINUTES","text":"<p>//core/io.islandtime.base/DateTimeField/DURATION_OF_MINUTES</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-m-i-n-u-t-e-s/#duration_of_minutes","title":"DURATION_OF_MINUTES","text":"<p>common</p> <p><code>DURATION_OF_MINUTES <p></p> <p>A duration of minutes.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-m-i-n-u-t-e-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-s-e-c-o-n-d-s/","title":"DURATION_OF_SECONDS","text":"<p>//core/io.islandtime.base/DateTimeField/DURATION_OF_SECONDS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-s-e-c-o-n-d-s/#duration_of_seconds","title":"DURATION_OF_SECONDS","text":"<p>common</p> <p><code>DURATION_OF_SECONDS <p></p> <p>A duration of seconds.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-d-u-r-a-t-i-o-n_-o-f_-s-e-c-o-n-d-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-e-r-a/","title":"ERA","text":"<p>//core/io.islandtime.base/DateTimeField/ERA</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-e-r-a/#era","title":"ERA","text":"<p>common</p> <p><code>ERA <p></p> <p>The era.</p> <p>In the ISO calendar system, this will be 0 (<code>BCE</code>) or 1 (<code>CE</code>).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-e-r-a/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-h-o-u-r_-o-f_-d-a-y/","title":"HOUR_OF_DAY","text":"<p>//core/io.islandtime.base/DateTimeField/HOUR_OF_DAY</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-h-o-u-r_-o-f_-d-a-y/#hour_of_day","title":"HOUR_OF_DAY","text":"<p>common</p> <p><code>HOUR_OF_DAY <p></p> <p>The hour of the day, from 0 to 23.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-h-o-u-r_-o-f_-d-a-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-i-s_-u-n-b-o-u-n-d-e-d/","title":"IS_UNBOUNDED","text":"<p>//core/io.islandtime.base/DateTimeField/IS_UNBOUNDED</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-i-s_-u-n-b-o-u-n-d-e-d/#is_unbounded","title":"IS_UNBOUNDED","text":"<p>common</p> <p><code>IS_UNBOUNDED <p></p> <p>Indicates the presence of the minimum or maximum sentinel value, which should treated as unbounded (in ISO-8601 parlance, \"open\") in the context of an interval.</p> <p>-1 (<code>true</code>) or 0 (<code>false</code>).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-i-s_-u-n-b-o-u-n-d-e-d/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-i-l-l-i-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/","title":"MILLISECOND_OF_SECOND","text":"<p>//core/io.islandtime.base/DateTimeField/MILLISECOND_OF_SECOND</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-i-l-l-i-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/#millisecond_of_second","title":"MILLISECOND_OF_SECOND","text":"<p>common</p> <p><code>MILLISECOND_OF_SECOND <p></p> <p>The millisecond of the second, from 0 to 999.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-i-l-l-i-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-i-n-u-t-e_-o-f_-h-o-u-r/","title":"MINUTE_OF_HOUR","text":"<p>//core/io.islandtime.base/DateTimeField/MINUTE_OF_HOUR</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-i-n-u-t-e_-o-f_-h-o-u-r/#minute_of_hour","title":"MINUTE_OF_HOUR","text":"<p>common</p> <p><code>MINUTE_OF_HOUR <p></p> <p>The minute of the hour, from 0 to 59.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-i-n-u-t-e_-o-f_-h-o-u-r/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-o-n-t-h_-o-f_-y-e-a-r/","title":"MONTH_OF_YEAR","text":"<p>//core/io.islandtime.base/DateTimeField/MONTH_OF_YEAR</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-o-n-t-h_-o-f_-y-e-a-r/#month_of_year","title":"MONTH_OF_YEAR","text":"<p>common</p> <p><code>MONTH_OF_YEAR <p></p> <p>The month of the year, such as <code>January</code></p> <p>In the ISO calendar system, this will be from 1 (<code>January</code>) to 12 (<code>December</code>).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-m-o-n-t-h_-o-f_-y-e-a-r/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-n-a-n-o-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/","title":"NANOSECOND_OF_SECOND","text":"<p>//core/io.islandtime.base/DateTimeField/NANOSECOND_OF_SECOND</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-n-a-n-o-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/#nanosecond_of_second","title":"NANOSECOND_OF_SECOND","text":"<p>common</p> <p><code>NANOSECOND_OF_SECOND <p></p> <p>The nanosecond of the second, from 0 to 999,999,999.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-n-a-n-o-s-e-c-o-n-d_-o-f_-s-e-c-o-n-d/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-d-a-y-s/","title":"PERIOD_OF_DAYS","text":"<p>//core/io.islandtime.base/DateTimeField/PERIOD_OF_DAYS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-d-a-y-s/#period_of_days","title":"PERIOD_OF_DAYS","text":"<p>common</p> <p><code>PERIOD_OF_DAYS <p></p> <p>A period of days.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-d-a-y-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-m-o-n-t-h-s/","title":"PERIOD_OF_MONTHS","text":"<p>//core/io.islandtime.base/DateTimeField/PERIOD_OF_MONTHS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-m-o-n-t-h-s/#period_of_months","title":"PERIOD_OF_MONTHS","text":"<p>common</p> <p><code>PERIOD_OF_MONTHS <p></p> <p>A period of months.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-m-o-n-t-h-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-w-e-e-k-s/","title":"PERIOD_OF_WEEKS","text":"<p>//core/io.islandtime.base/DateTimeField/PERIOD_OF_WEEKS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-w-e-e-k-s/#period_of_weeks","title":"PERIOD_OF_WEEKS","text":"<p>common</p> <p><code>PERIOD_OF_WEEKS <p></p> <p>A period of weeks.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-w-e-e-k-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-y-e-a-r-s/","title":"PERIOD_OF_YEARS","text":"<p>//core/io.islandtime.base/DateTimeField/PERIOD_OF_YEARS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-y-e-a-r-s/#period_of_years","title":"PERIOD_OF_YEARS","text":"<p>common</p> <p><code>PERIOD_OF_YEARS <p></p> <p>A period of years.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-o-f_-y-e-a-r-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-s-i-g-n/","title":"PERIOD_SIGN","text":"<p>//core/io.islandtime.base/DateTimeField/PERIOD_SIGN</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-s-i-g-n/#period_sign","title":"PERIOD_SIGN","text":"<p>common</p> <p><code>PERIOD_SIGN <p></p> <p>The sign of the period, -1 (negative) or 1 (positive).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-p-e-r-i-o-d_-s-i-g-n/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-s-e-c-o-n-d_-o-f_-m-i-n-u-t-e/","title":"SECOND_OF_MINUTE","text":"<p>//core/io.islandtime.base/DateTimeField/SECOND_OF_MINUTE</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-s-e-c-o-n-d_-o-f_-m-i-n-u-t-e/#second_of_minute","title":"SECOND_OF_MINUTE","text":"<p>common</p> <p><code>SECOND_OF_MINUTE <p></p> <p>The second of the minute, from 0 to 59.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-s-e-c-o-n-d_-o-f_-m-i-n-u-t-e/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-h-o-u-r-s/","title":"UTC_OFFSET_HOURS","text":"<p>//core/io.islandtime.base/DateTimeField/UTC_OFFSET_HOURS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-h-o-u-r-s/#utc_offset_hours","title":"UTC_OFFSET_HOURS","text":"<p>common</p> <p><code>UTC_OFFSET_HOURS <p></p> <p>The hour component of the UTC offset, from 0-18.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-h-o-u-r-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-m-i-n-u-t-e-s/","title":"UTC_OFFSET_MINUTES","text":"<p>//core/io.islandtime.base/DateTimeField/UTC_OFFSET_MINUTES</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-m-i-n-u-t-e-s/#utc_offset_minutes","title":"UTC_OFFSET_MINUTES","text":"<p>common</p> <p><code>UTC_OFFSET_MINUTES <p></p> <p>The minute component of the UTC offset, from 0-59.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-m-i-n-u-t-e-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-e-c-o-n-d-s/","title":"UTC_OFFSET_SECONDS","text":"<p>//core/io.islandtime.base/DateTimeField/UTC_OFFSET_SECONDS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-e-c-o-n-d-s/#utc_offset_seconds","title":"UTC_OFFSET_SECONDS","text":"<p>common</p> <p><code>UTC_OFFSET_SECONDS <p></p> <p>The second component of the UTC offset, from 0-59.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-e-c-o-n-d-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-i-g-n/","title":"UTC_OFFSET_SIGN","text":"<p>//core/io.islandtime.base/DateTimeField/UTC_OFFSET_SIGN</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-i-g-n/#utc_offset_sign","title":"UTC_OFFSET_SIGN","text":"<p>common</p> <p><code>UTC_OFFSET_SIGN <p></p> <p>The sign of the UTC offset, -1 (negative) or 1 (positive).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-s-i-g-n/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-t-o-t-a-l_-s-e-c-o-n-d-s/","title":"UTC_OFFSET_TOTAL_SECONDS","text":"<p>//core/io.islandtime.base/DateTimeField/UTC_OFFSET_TOTAL_SECONDS</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-t-o-t-a-l_-s-e-c-o-n-d-s/#utc_offset_total_seconds","title":"UTC_OFFSET_TOTAL_SECONDS","text":"<p>common</p> <p><code>UTC_OFFSET_TOTAL_SECONDS <p></p> <p>The total number of seconds in the UTC offset, from (-18 * 60 * 60) to (18 * 60 * 60).</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-u-t-c_-o-f-f-s-e-t_-t-o-t-a-l_-s-e-c-o-n-d-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-y-e-a-r/","title":"YEAR","text":"<p>//core/io.islandtime.base/DateTimeField/YEAR</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-y-e-a-r/#year","title":"YEAR","text":"<p>common</p> <p><code>YEAR <p></p> <p>The proleptic year.</p> <p>In the ISO calendar system, positive values indicate years in the current era, a value of 0 is equivalent to 1 BCE, -1 to 2 BCE, and so forth.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-y-e-a-r/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-y-e-a-r_-o-f_-e-r-a/","title":"YEAR_OF_ERA","text":"<p>//core/io.islandtime.base/DateTimeField/YEAR_OF_ERA</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-y-e-a-r_-o-f_-e-r-a/#year_of_era","title":"YEAR_OF_ERA","text":"<p>common</p> <p><code>YEAR_OF_ERA <p></p> <p>The year of the era.</p>"},{"location":"api/core/core/io.islandtime.base/-date-time-field/-y-e-a-r_-o-f_-e-r-a/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.base/-time-point/","title":"TimePoint","text":"<p>//core/io.islandtime.base/TimePoint</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/#timepoint","title":"TimePoint","text":"<p><code>interface TimePoint&lt;T&gt;</code></p> <p>An object that can be placed exactly in time.</p> <p>An implementor of this interface contains enough information to represent an instant in time. As such, any time point can be compared to another on the timeline and duration units can be added or subtracted.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/#inheritors","title":"Inheritors","text":"Instant OffsetDateTime ZonedDateTime"},{"location":"api/core/core/io.islandtime.base/-time-point/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.base/-time-point/#properties","title":"Properties","text":"Name Summary additionalNanosecondsSinceUnixEpoch <p>common</p><code>open val additionalNanosecondsSinceUnixEpoch: Nanoseconds</code>The number of additional nanoseconds on top of secondsSinceUnixEpoch. millisecondOfUnixEpoch <p>common</p><code>abstract val millisecondOfUnixEpoch: Long</code>The millisecond of the Unix epoch. millisecondsSinceUnixEpoch <p>common</p><code>open val millisecondsSinceUnixEpoch: Milliseconds</code>The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z. nanosecond <p>common</p><code>abstract val nanosecond: Int</code>The nanosecond of the second. secondOfUnixEpoch <p>common</p><code>abstract val secondOfUnixEpoch: Long</code>The second of the Unix epoch. secondsSinceUnixEpoch <p>common</p><code>open val secondsSinceUnixEpoch: Seconds</code>The number of seconds since the Unix epoch of 1970-01-01T00:00Z."},{"location":"api/core/core/io.islandtime.base/-time-point/#functions","title":"Functions","text":"Name Summary compareTo <p>common</p><code>open operator fun compareTo(other: TimePoint&lt;*&gt;): Int</code>Compares this time point with another time point. isSameInstantAs <p>common</p><code>open fun isSameInstantAs(other: TimePoint&lt;*&gt;): Boolean</code>Checks if this time point represents the same instant as other. Unlike the equals operator, equality is determined solely by timeline order. minus <p>common</p><code>abstract operator fun minus(hours: Hours): T</code><code>abstract operator fun minus(microseconds: Microseconds): T</code><code>abstract operator fun minus(milliseconds: Milliseconds): T</code><code>abstract operator fun minus(minutes: Minutes): T</code><code>abstract operator fun minus(nanoseconds: Nanoseconds): T</code><code>abstract operator fun minus(seconds: Seconds): T</code> plus <p>common</p><code>abstract operator fun plus(hours: Hours): T</code><code>abstract operator fun plus(microseconds: Microseconds): T</code><code>abstract operator fun plus(milliseconds: Milliseconds): T</code><code>abstract operator fun plus(minutes: Minutes): T</code><code>abstract operator fun plus(nanoseconds: Nanoseconds): T</code><code>abstract operator fun plus(seconds: Seconds): T</code> toNSDate <p>darwin</p><code>fun &lt;T&gt; TimePoint&lt;T&gt;.toNSDate(): &lt;Error class: unknown class&gt;</code>Converts this time point to an <code>NSDate</code>."},{"location":"api/core/core/io.islandtime.base/-time-point/additional-nanoseconds-since-unix-epoch/","title":"additionalNanosecondsSinceUnixEpoch","text":"<p>//core/io.islandtime.base/TimePoint/additionalNanosecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/additional-nanoseconds-since-unix-epoch/#additionalnanosecondssinceunixepoch","title":"additionalNanosecondsSinceUnixEpoch","text":"<p>common</p> <p><code>open val additionalNanosecondsSinceUnixEpoch: Nanoseconds</code></p> <p>The number of additional nanoseconds on top of secondsSinceUnixEpoch.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.base/TimePoint/compareTo</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator fun compareTo(other: TimePoint&lt;*&gt;): Int</code></p> <p>Compares this time point with another time point.</p> <p>Time points can be compared to other time points based on timeline order, but aren't required to implement the Comparable interface since they don't necessarily have a natural order that's consistent with equals.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/is-same-instant-as/","title":"isSameInstantAs","text":"<p>//core/io.islandtime.base/TimePoint/isSameInstantAs</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/is-same-instant-as/#issameinstantas","title":"isSameInstantAs","text":"<p>common</p> <p><code>open fun isSameInstantAs(other: TimePoint&lt;*&gt;): Boolean</code></p> <p>Checks if this time point represents the same instant as other. Unlike the equals operator, equality is determined solely by timeline order.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/millisecond-of-unix-epoch/","title":"millisecondOfUnixEpoch","text":"<p>//core/io.islandtime.base/TimePoint/millisecondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/millisecond-of-unix-epoch/#millisecondofunixepoch","title":"millisecondOfUnixEpoch","text":"<p>common</p> <p><code>abstract val millisecondOfUnixEpoch: Long</code></p> <p>The millisecond of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/milliseconds-since-unix-epoch/","title":"millisecondsSinceUnixEpoch","text":"<p>//core/io.islandtime.base/TimePoint/millisecondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/milliseconds-since-unix-epoch/#millisecondssinceunixepoch","title":"millisecondsSinceUnixEpoch","text":"<p>common</p> <p><code>open val millisecondsSinceUnixEpoch: Milliseconds</code></p> <p>The number of milliseconds since the Unix epoch of 1970-01-01T00:00Z.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/minus/","title":"minus","text":"<p>//core/io.islandtime.base/TimePoint/minus</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/minus/#minus","title":"minus","text":"<p>common</p> <p><code>abstract operator fun minus(hours: Hours): T</code></p> <p><code>abstract operator fun minus(minutes: Minutes): T</code></p> <p><code>abstract operator fun minus(seconds: Seconds): T</code></p> <p><code>abstract operator fun minus(milliseconds: Milliseconds): T</code></p> <p><code>abstract operator fun minus(microseconds: Microseconds): T</code></p> <p><code>abstract operator fun minus(nanoseconds: Nanoseconds): T</code></p>"},{"location":"api/core/core/io.islandtime.base/-time-point/nanosecond/","title":"nanosecond","text":"<p>//core/io.islandtime.base/TimePoint/nanosecond</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/nanosecond/#nanosecond","title":"nanosecond","text":"<p>common</p> <p><code>abstract val nanosecond: Int</code></p> <p>The nanosecond of the second.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/plus/","title":"plus","text":"<p>//core/io.islandtime.base/TimePoint/plus</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/plus/#plus","title":"plus","text":"<p>common</p> <p><code>abstract operator fun plus(hours: Hours): T</code></p> <p><code>abstract operator fun plus(minutes: Minutes): T</code></p> <p><code>abstract operator fun plus(seconds: Seconds): T</code></p> <p><code>abstract operator fun plus(milliseconds: Milliseconds): T</code></p> <p><code>abstract operator fun plus(microseconds: Microseconds): T</code></p> <p><code>abstract operator fun plus(nanoseconds: Nanoseconds): T</code></p>"},{"location":"api/core/core/io.islandtime.base/-time-point/second-of-unix-epoch/","title":"secondOfUnixEpoch","text":"<p>//core/io.islandtime.base/TimePoint/secondOfUnixEpoch</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/second-of-unix-epoch/#secondofunixepoch","title":"secondOfUnixEpoch","text":"<p>common</p> <p><code>abstract val secondOfUnixEpoch: Long</code></p> <p>The second of the Unix epoch.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/seconds-since-unix-epoch/","title":"secondsSinceUnixEpoch","text":"<p>//core/io.islandtime.base/TimePoint/secondsSinceUnixEpoch</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/seconds-since-unix-epoch/#secondssinceunixepoch","title":"secondsSinceUnixEpoch","text":"<p>common</p> <p><code>open val secondsSinceUnixEpoch: Seconds</code></p> <p>The number of seconds since the Unix epoch of 1970-01-01T00:00Z.</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/-companion/","title":"Companion","text":"<p>//core/io.islandtime.base/TimePoint/Companion</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.base/-time-point/-companion/#properties","title":"Properties","text":"Name Summary TimelineOrder <p>common</p><code>val TimelineOrder: Comparator&lt;TimePoint&lt;*&gt;&gt;</code>A Comparator that compares by timeline order."},{"location":"api/core/core/io.islandtime.base/-time-point/-companion/-timeline-order/","title":"TimelineOrder","text":"<p>//core/io.islandtime.base/TimePoint/Companion/TimelineOrder</p>"},{"location":"api/core/core/io.islandtime.base/-time-point/-companion/-timeline-order/#timelineorder","title":"TimelineOrder","text":"<p>common</p> <p><code>val TimelineOrder: Comparator&lt;TimePoint&lt;*&gt;&gt;</code></p> <p>A Comparator that compares by timeline order.</p>"},{"location":"api/core/core/io.islandtime.calendar/","title":"io.islandtime.calendar","text":"<p>//core/io.islandtime.calendar</p>"},{"location":"api/core/core/io.islandtime.calendar/#package-level-declarations","title":"Package-level declarations","text":"<p>common darwin jvm</p> <p>Platform-independent calendar properties.</p>"},{"location":"api/core/core/io.islandtime.calendar/#types","title":"Types","text":"Name Summary WeekSettings <p>common</p><code>data class WeekSettings(val firstDayOfWeek: DayOfWeek, val minimumDaysInFirstWeek: Int)</code>Week-related calendar settings."},{"location":"api/core/core/io.islandtime.calendar/#properties","title":"Properties","text":"Name Summary weekSettings <p>common</p><code>expect val Locale.weekSettings: WeekSettings</code>The default WeekSettings associated with this locale."},{"location":"api/core/core/io.islandtime.calendar/week-settings/","title":"weekSettings","text":"<p>//core/io.islandtime.calendar/weekSettings</p>"},{"location":"api/core/core/io.islandtime.calendar/week-settings/#weeksettings","title":"weekSettings","text":"<p>common</p> <p><code>expect val Locale.weekSettings: WeekSettings</code></p> <p>The default WeekSettings associated with this locale.</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/","title":"WeekSettings","text":"<p>//core/io.islandtime.calendar/WeekSettings</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/#weeksettings","title":"WeekSettings","text":"<p>common</p> <p><code>data class WeekSettings(val firstDayOfWeek: DayOfWeek, val minimumDaysInFirstWeek: Int)</code></p> <p>Week-related calendar settings.</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/#constructors","title":"Constructors","text":"WeekSettings <p>common</p><code>constructor(firstDayOfWeek: DayOfWeek, minimumDaysInFirstWeek: Int)</code>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/#properties","title":"Properties","text":"Name Summary firstDayOfWeek <p>common</p><code>val firstDayOfWeek: DayOfWeek</code>The first day of the week. minimumDaysInFirstWeek <p>common</p><code>val minimumDaysInFirstWeek: Int</code>The minimum number of days required in the first week of the year."},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-week-settings/","title":"WeekSettings","text":"<p>//core/io.islandtime.calendar/WeekSettings/WeekSettings</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-week-settings/#weeksettings","title":"WeekSettings","text":"<p>common</p> <p><code>constructor(firstDayOfWeek: DayOfWeek, minimumDaysInFirstWeek: Int)</code></p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/first-day-of-week/","title":"firstDayOfWeek","text":"<p>//core/io.islandtime.calendar/WeekSettings/firstDayOfWeek</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/first-day-of-week/#firstdayofweek","title":"firstDayOfWeek","text":"<p>common</p> <p><code>val firstDayOfWeek: DayOfWeek</code></p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/minimum-days-in-first-week/","title":"minimumDaysInFirstWeek","text":"<p>//core/io.islandtime.calendar/WeekSettings/minimumDaysInFirstWeek</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/minimum-days-in-first-week/#minimumdaysinfirstweek","title":"minimumDaysInFirstWeek","text":"<p>common</p> <p><code>val minimumDaysInFirstWeek: Int</code></p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/","title":"Companion","text":"<p>//core/io.islandtime.calendar/WeekSettings/Companion</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/#properties","title":"Properties","text":"Name Summary ISO <p>common</p><code>val ISO: WeekSettings</code>The ISO-8601 calendar system's definition of a week, where the first day of the week is Monday and the first week of the year has a minimum of 4 days. SUNDAY_START <p>common</p><code>val SUNDAY_START: WeekSettings</code>A definition of a week that starts on Sunday with a minimum of 1 day in the first week of the year."},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/#functions","title":"Functions","text":"Name Summary systemDefault <p>common</p><code>fun systemDefault(): WeekSettings</code>Returns the definition of a week according to the current system settings. This may differ from the definition associated with the default locale on platforms that allow this to be customized, such as iOS and macOS."},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/-i-s-o/","title":"ISO","text":"<p>//core/io.islandtime.calendar/WeekSettings/Companion/ISO</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/-i-s-o/#iso","title":"ISO","text":"<p>common</p> <p><code>val ISO: WeekSettings</code></p> <p>The ISO-8601 calendar system's definition of a week, where the first day of the week is Monday and the first week of the year has a minimum of 4 days.</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/-s-u-n-d-a-y_-s-t-a-r-t/","title":"SUNDAY_START","text":"<p>//core/io.islandtime.calendar/WeekSettings/Companion/SUNDAY_START</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/-s-u-n-d-a-y_-s-t-a-r-t/#sunday_start","title":"SUNDAY_START","text":"<p>common</p> <p><code>val SUNDAY_START: WeekSettings</code></p> <p>A definition of a week that starts on Sunday with a minimum of 1 day in the first week of the year.</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/system-default/","title":"systemDefault","text":"<p>//core/io.islandtime.calendar/WeekSettings/Companion/systemDefault</p>"},{"location":"api/core/core/io.islandtime.calendar/-week-settings/-companion/system-default/#systemdefault","title":"systemDefault","text":"<p>common</p> <p><code>fun systemDefault(): WeekSettings</code></p> <p>Returns the definition of a week according to the current system settings. This may differ from the definition associated with the default locale on platforms that allow this to be customized, such as iOS and macOS.</p>"},{"location":"api/core/core/io.islandtime.clock/","title":"io.islandtime.clock","text":"<p>//core/io.islandtime.clock</p>"},{"location":"api/core/core/io.islandtime.clock/#package-level-declarations","title":"Package-level declarations","text":"<p>common</p> <p>The default clock implementation, providing access to the current system time at up to nanosecond precision when available.</p>"},{"location":"api/core/core/io.islandtime.clock/#types","title":"Types","text":"Name Summary Clock <p>common</p><code>interface Clock</code>An abstraction providing the current time. FixedClock <p>common</p><code>class FixedClock(instant: Instant, val zone: TimeZone) : Clock</code>A clock with a fixed time, suitable for testing. SystemClock <p>common</p><code>abstract class SystemClock : Clock</code>A clock that provides the time from the current system."},{"location":"api/core/core/io.islandtime.clock/#functions","title":"Functions","text":"Name Summary now <p>common</p><code>fun Date.Companion.now(): Date</code>Gets the current Date from the system clock.<p>common</p><code>fun DateTime.Companion.now(): DateTime</code>Gets the current DateTime from the system clock.<p>common</p><code>fun Instant.Companion.now(): Instant</code>Gets the current Instant from the system clock.<p>common</p><code>fun OffsetDateTime.Companion.now(): OffsetDateTime</code>Gets the current OffsetDateTime from the system clock.<p>common</p><code>fun OffsetTime.Companion.now(): OffsetTime</code>Gets the current OffsetTime from the system clock.<p>common</p><code>fun Time.Companion.now(): Time</code>Gets the current Time from the system clock.<p>common</p><code>fun Year.Companion.now(): Year</code>Gets the current Year from the system clock.<p>common</p><code>fun YearMonth.Companion.now(): YearMonth</code>Gets the current YearMonth from the system clock.<p>common</p><code>fun ZonedDateTime.Companion.now(): ZonedDateTime</code>Gets the current ZonedDateTime from the system clock.<p>common</p><code>fun Date.Companion.now(clock: Clock): Date</code>Gets the current Date from the provided clock.<p>common</p><code>fun DateTime.Companion.now(clock: Clock): DateTime</code>Gets the current DateTime from the provided clock.<p>common</p><code>fun Instant.Companion.now(clock: Clock): Instant</code>Gets the current Instant from the provided clock.<p>common</p><code>fun OffsetDateTime.Companion.now(clock: Clock): OffsetDateTime</code>Gets the current OffsetDateTime from the provided clock.<p>common</p><code>fun OffsetTime.Companion.now(clock: Clock): OffsetTime</code>Gets the current OffsetTime from the provided clock.<p>common</p><code>fun Time.Companion.now(clock: Clock): Time</code>Gets the current Time from the provided clock.<p>common</p><code>fun Year.Companion.now(clock: Clock): Year</code>Gets the current Year from the provided clock.<p>common</p><code>fun YearMonth.Companion.now(clock: Clock): YearMonth</code>Gets the current YearMonth from the provided clock.<p>common</p><code>fun ZonedDateTime.Companion.now(clock: Clock): ZonedDateTime</code>Gets the current ZonedDateTime from the provided clock. SystemClock <p>common</p><code>fun SystemClock(zone: TimeZone = TimeZone.systemDefault()): SystemClock</code>Creates a SystemClock, optionally overriding the system's default time zone with another zone."},{"location":"api/core/core/io.islandtime.clock/-system-clock/","title":"SystemClock","text":"<p>//core/io.islandtime.clock/SystemClock</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/#systemclock","title":"SystemClock","text":"<p>common</p> <p><code>fun SystemClock(zone: TimeZone = TimeZone.systemDefault()): SystemClock</code></p> <p>Creates a SystemClock, optionally overriding the system's default time zone with another zone.</p>"},{"location":"api/core/core/io.islandtime.clock/now/","title":"now","text":"<p>//core/io.islandtime.clock/now</p>"},{"location":"api/core/core/io.islandtime.clock/now/#now","title":"now","text":"<p>common</p> <p><code>fun Instant.Companion.now(): Instant</code></p> <p>Gets the current Instant from the system clock.</p> <p>common</p> <p><code>fun Instant.Companion.now(clock: Clock): Instant</code></p> <p>Gets the current Instant from the provided clock.</p> <p>common</p> <p><code>fun Year.Companion.now(): Year</code></p> <p>Gets the current Year from the system clock.</p> <p>common</p> <p><code>fun Year.Companion.now(clock: Clock): Year</code></p> <p>Gets the current Year from the provided clock.</p> <p>common</p> <p><code>fun YearMonth.Companion.now(): YearMonth</code></p> <p>Gets the current YearMonth from the system clock.</p> <p>common</p> <p><code>fun YearMonth.Companion.now(clock: Clock): YearMonth</code></p> <p>Gets the current YearMonth from the provided clock.</p> <p>common</p> <p><code>fun Date.Companion.now(): Date</code></p> <p>Gets the current Date from the system clock.</p> <p>common</p> <p><code>fun Date.Companion.now(clock: Clock): Date</code></p> <p>Gets the current Date from the provided clock.</p> <p>common</p> <p><code>fun DateTime.Companion.now(): DateTime</code></p> <p>Gets the current DateTime from the system clock.</p> <p>common</p> <p><code>fun DateTime.Companion.now(clock: Clock): DateTime</code></p> <p>Gets the current DateTime from the provided clock.</p> <p>common</p> <p><code>fun OffsetDateTime.Companion.now(): OffsetDateTime</code></p> <p>Gets the current OffsetDateTime from the system clock.</p> <p>common</p> <p><code>fun OffsetDateTime.Companion.now(clock: Clock): OffsetDateTime</code></p> <p>Gets the current OffsetDateTime from the provided clock.</p> <p>common</p> <p><code>fun ZonedDateTime.Companion.now(): ZonedDateTime</code></p> <p>Gets the current ZonedDateTime from the system clock.</p> <p>common</p> <p><code>fun ZonedDateTime.Companion.now(clock: Clock): ZonedDateTime</code></p> <p>Gets the current ZonedDateTime from the provided clock.</p> <p>common</p> <p><code>fun Time.Companion.now(): Time</code></p> <p>Gets the current Time from the system clock.</p> <p>common</p> <p><code>fun Time.Companion.now(clock: Clock): Time</code></p> <p>Gets the current Time from the provided clock.</p> <p>common</p> <p><code>fun OffsetTime.Companion.now(): OffsetTime</code></p> <p>Gets the current OffsetTime from the system clock.</p> <p>common</p> <p><code>fun OffsetTime.Companion.now(clock: Clock): OffsetTime</code></p> <p>Gets the current OffsetTime from the provided clock.</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/","title":"Clock","text":"<p>//core/io.islandtime.clock/Clock</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/#clock","title":"Clock","text":"<p><code>interface Clock</code></p> <p>An abstraction providing the current time.</p> <p>For an implementation that uses the system's clock, see SystemClock. FixedClock is also available for testing purposes.</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/#see-also","title":"See also","text":"SystemClock FixedClock"},{"location":"api/core/core/io.islandtime.clock/-clock/#inheritors","title":"Inheritors","text":"FixedClock SystemClock"},{"location":"api/core/core/io.islandtime.clock/-clock/#properties","title":"Properties","text":"Name Summary zone <p>common</p><code>abstract val zone: TimeZone</code>The time zone of this clock."},{"location":"api/core/core/io.islandtime.clock/-clock/#functions","title":"Functions","text":"Name Summary readInstant <p>common</p><code>abstract fun readInstant(): Instant</code>Reads the current Instant. readMilliseconds <p>common</p><code>abstract fun readMilliseconds(): Milliseconds</code>Reads the current number of milliseconds that have elapsed since the Unix epoch of <code>1970-01-01T00:00</code> in UTC. readPlatformInstant <p>common</p><code>abstract fun readPlatformInstant(): PlatformInstant</code>Reads the current PlatformInstant."},{"location":"api/core/core/io.islandtime.clock/-clock/read-instant/","title":"readInstant","text":"<p>//core/io.islandtime.clock/Clock/readInstant</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/read-instant/#readinstant","title":"readInstant","text":"<p>common</p> <p><code>abstract fun readInstant(): Instant</code></p> <p>Reads the current Instant.</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/read-milliseconds/","title":"readMilliseconds","text":"<p>//core/io.islandtime.clock/Clock/readMilliseconds</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/read-milliseconds/#readmilliseconds","title":"readMilliseconds","text":"<p>common</p> <p><code>abstract fun readMilliseconds(): Milliseconds</code></p> <p>Reads the current number of milliseconds that have elapsed since the Unix epoch of <code>1970-01-01T00:00</code> in UTC.</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/read-platform-instant/","title":"readPlatformInstant","text":"<p>//core/io.islandtime.clock/Clock/readPlatformInstant</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/read-platform-instant/#readplatforminstant","title":"readPlatformInstant","text":"<p>common</p> <p><code>abstract fun readPlatformInstant(): PlatformInstant</code></p> <p>Reads the current PlatformInstant.</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/zone/","title":"zone","text":"<p>//core/io.islandtime.clock/Clock/zone</p>"},{"location":"api/core/core/io.islandtime.clock/-clock/zone/#zone","title":"zone","text":"<p>common</p> <p><code>abstract val zone: TimeZone</code></p> <p>The time zone of this clock.</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/","title":"FixedClock","text":"<p>//core/io.islandtime.clock/FixedClock</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/#fixedclock","title":"FixedClock","text":"<p><code>class FixedClock(instant: Instant, val zone: TimeZone) : Clock</code></p> <p>A clock with a fixed time, suitable for testing.</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/#parameters","title":"Parameters","text":"<p>common</p> instant the initial instant that the clock should be set to zone the time zone"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/#constructors","title":"Constructors","text":"FixedClock <p>common</p><code>constructor(instant: Instant, zone: TimeZone)</code>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/#properties","title":"Properties","text":"Name Summary zone <p>common</p><code>open override val zone: TimeZone</code>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/#functions","title":"Functions","text":"Name Summary equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> minusAssign <p>common</p><code>operator fun minusAssign(days: Days)</code><code>operator fun minusAssign(hours: Hours)</code><code>operator fun minusAssign(microseconds: Microseconds)</code><code>operator fun minusAssign(milliseconds: Milliseconds)</code><code>operator fun minusAssign(minutes: Minutes)</code><code>operator fun minusAssign(nanoseconds: Nanoseconds)</code><code>operator fun minusAssign(seconds: Seconds)</code> plusAssign <p>common</p><code>operator fun plusAssign(days: Days)</code><code>operator fun plusAssign(hours: Hours)</code><code>operator fun plusAssign(microseconds: Microseconds)</code><code>operator fun plusAssign(milliseconds: Milliseconds)</code><code>operator fun plusAssign(minutes: Minutes)</code><code>operator fun plusAssign(nanoseconds: Nanoseconds)</code><code>operator fun plusAssign(seconds: Seconds)</code> readInstant <p>common</p><code>open override fun readInstant(): Instant</code>Reads the current Instant. readMilliseconds <p>common</p><code>open override fun readMilliseconds(): Milliseconds</code>Reads the current number of milliseconds that have elapsed since the Unix epoch of <code>1970-01-01T00:00</code> in UTC. readPlatformInstant <p>common</p><code>open override fun readPlatformInstant(): PlatformInstant</code>Reads the current PlatformInstant. setTo <p>common</p><code>fun setTo(instant: Instant)</code> toString <p>common</p><code>open override fun toString(): String</code>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/-fixed-clock/","title":"FixedClock","text":"<p>//core/io.islandtime.clock/FixedClock/FixedClock</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/-fixed-clock/#fixedclock","title":"FixedClock","text":"<p>common</p> <p><code>constructor(instant: Instant, zone: TimeZone)</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/-fixed-clock/#parameters","title":"Parameters","text":"<p>common</p> instant the initial instant that the clock should be set to zone the time zone"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/equals/","title":"equals","text":"<p>//core/io.islandtime.clock/FixedClock/equals</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.clock/FixedClock/hashCode</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/minus-assign/","title":"minusAssign","text":"<p>//core/io.islandtime.clock/FixedClock/minusAssign</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/minus-assign/#minusassign","title":"minusAssign","text":"<p>common</p> <p><code>operator fun minusAssign(days: Days)</code></p> <p><code>operator fun minusAssign(hours: Hours)</code></p> <p><code>operator fun minusAssign(minutes: Minutes)</code></p> <p><code>operator fun minusAssign(seconds: Seconds)</code></p> <p><code>operator fun minusAssign(milliseconds: Milliseconds)</code></p> <p><code>operator fun minusAssign(microseconds: Microseconds)</code></p> <p><code>operator fun minusAssign(nanoseconds: Nanoseconds)</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/plus-assign/","title":"plusAssign","text":"<p>//core/io.islandtime.clock/FixedClock/plusAssign</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/plus-assign/#plusassign","title":"plusAssign","text":"<p>common</p> <p><code>operator fun plusAssign(days: Days)</code></p> <p><code>operator fun plusAssign(hours: Hours)</code></p> <p><code>operator fun plusAssign(minutes: Minutes)</code></p> <p><code>operator fun plusAssign(seconds: Seconds)</code></p> <p><code>operator fun plusAssign(milliseconds: Milliseconds)</code></p> <p><code>operator fun plusAssign(microseconds: Microseconds)</code></p> <p><code>operator fun plusAssign(nanoseconds: Nanoseconds)</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/read-instant/","title":"readInstant","text":"<p>//core/io.islandtime.clock/FixedClock/readInstant</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/read-instant/#readinstant","title":"readInstant","text":"<p>common</p> <p><code>open override fun readInstant(): Instant</code></p> <p>Reads the current Instant.</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/read-milliseconds/","title":"readMilliseconds","text":"<p>//core/io.islandtime.clock/FixedClock/readMilliseconds</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/read-milliseconds/#readmilliseconds","title":"readMilliseconds","text":"<p>common</p> <p><code>open override fun readMilliseconds(): Milliseconds</code></p> <p>Reads the current number of milliseconds that have elapsed since the Unix epoch of <code>1970-01-01T00:00</code> in UTC.</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/read-platform-instant/","title":"readPlatformInstant","text":"<p>//core/io.islandtime.clock/FixedClock/readPlatformInstant</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/read-platform-instant/#readplatforminstant","title":"readPlatformInstant","text":"<p>common</p> <p><code>open override fun readPlatformInstant(): PlatformInstant</code></p> <p>Reads the current PlatformInstant.</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/set-to/","title":"setTo","text":"<p>//core/io.islandtime.clock/FixedClock/setTo</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/set-to/#setto","title":"setTo","text":"<p>common</p> <p><code>fun setTo(instant: Instant)</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/to-string/","title":"toString","text":"<p>//core/io.islandtime.clock/FixedClock/toString</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/zone/","title":"zone","text":"<p>//core/io.islandtime.clock/FixedClock/zone</p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/zone/#zone","title":"zone","text":"<p>common</p> <p><code>open override val zone: TimeZone</code></p>"},{"location":"api/core/core/io.islandtime.clock/-fixed-clock/zone/#parameters","title":"Parameters","text":"<p>common</p> zone the time zone"},{"location":"api/core/core/io.islandtime.clock/-system-clock/","title":"SystemClock","text":"<p>//core/io.islandtime.clock/SystemClock</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/#systemclock","title":"SystemClock","text":"<p>common</p> <p><code>abstract class SystemClock : Clock</code></p> <p>A clock that provides the time from the current system.</p> <p>The time zone is treated as an immutable property of the clock, set when it is created. If you wish to follow changes to the system clock's configured time zone, you must create a new SystemClock in response to any time zone changes.</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/#properties","title":"Properties","text":"Name Summary zone <p>common</p><code>abstract val zone: TimeZone</code>The time zone of this clock."},{"location":"api/core/core/io.islandtime.clock/-system-clock/#functions","title":"Functions","text":"Name Summary equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> readInstant <p>common</p><code>abstract fun readInstant(): Instant</code>Reads the current Instant. readMilliseconds <p>common</p><code>abstract fun readMilliseconds(): Milliseconds</code>Reads the current number of milliseconds that have elapsed since the Unix epoch of <code>1970-01-01T00:00</code> in UTC. readPlatformInstant <p>common</p><code>abstract fun readPlatformInstant(): PlatformInstant</code>Reads the current PlatformInstant. toString <p>common</p><code>open override fun toString(): String</code>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/equals/","title":"equals","text":"<p>//core/io.islandtime.clock/SystemClock/equals</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.clock/SystemClock/hashCode</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/to-string/","title":"toString","text":"<p>//core/io.islandtime.clock/SystemClock/toString</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/-companion/","title":"Companion","text":"<p>//core/io.islandtime.clock/SystemClock/Companion</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/-companion/#properties","title":"Properties","text":"Name Summary UTC <p>common</p><code>val UTC: SystemClock</code>A system clock in the UTC time zone."},{"location":"api/core/core/io.islandtime.clock/-system-clock/-companion/-u-t-c/","title":"UTC","text":"<p>//core/io.islandtime.clock/SystemClock/Companion/UTC</p>"},{"location":"api/core/core/io.islandtime.clock/-system-clock/-companion/-u-t-c/#utc","title":"UTC","text":"<p>common</p> <p><code>val UTC: SystemClock</code></p> <p>A system clock in the UTC time zone.</p>"},{"location":"api/core/core/io.islandtime.darwin/","title":"io.islandtime.darwin","text":"<p>//core/io.islandtime.darwin</p>"},{"location":"api/core/core/io.islandtime.darwin/#package-level-declarations","title":"Package-level declarations","text":"<p>darwin</p> <p>Various extensions specific to the Apple platform.</p>"},{"location":"api/core/core/io.islandtime.darwin/#functions","title":"Functions","text":"Name Summary toIslandDate <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandDate(): Date</code>Converts this set of date components to an Island Time Date. toIslandDateTime <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandDateTime(): DateTime</code>Converts this set of date components to an Island Time DateTime. toIslandDateTimeAt <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandDateTimeAt(nsTimeZone: &lt;Error class: unknown class&gt;): &lt;Error class: unknown class&gt;</code>Converts this <code>NSDate</code> to an Island Time DateTime at the specified time zone.<p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandDateTimeAt(offset: UtcOffset): DateTime</code>Converts this <code>NSDate</code> to an Island Time DateTime at the specified UTC offset. toIslandInstant <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandInstant(): Instant</code>Converts this <code>NSDate</code> to an Island Time Instant. toIslandInstantInterval <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandInstantInterval(): InstantInterval</code>Converts this interval to an equivalent Island Time InstantInterval. toIslandOffsetDateTime <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTime(): Nothing</code>Converts this set of date components to an Island Time OffsetDateTime. toIslandOffsetDateTimeAt <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTimeAt(nsTimeZone: &lt;Error class: unknown class&gt;): OffsetDateTime</code>Converts this <code>NSDate</code> to an Island Time OffsetDateTime at the specified time zone.<p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTimeAt(offset: UtcOffset): OffsetDateTime</code>Converts this <code>NSDate</code> to an Island Time OffsetDateTime at the specified offset. toIslandOffsetDateTimeOrNull <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTimeOrNull(): OffsetDateTime?</code>Converts this set of date components to an Island Time OffsetDateTime, or <code>null</code> if the <code>timeZone</code> property is absent. toIslandTime <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandTime(): Time</code>Converts this set of date components to an Island Time Time. toIslandTimeZone <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandTimeZone(): TimeZone</code>Converts this NSTimeZone` to an Island Time TimeZone with the same identifier. toIslandUtcOffsetAt <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandUtcOffsetAt(date: &lt;Error class: unknown class&gt;): UtcOffset</code>Converts this <code>NSTimeZone</code> to an Island Time UtcOffset at the provided date. toIslandZonedDateTime <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTime(): Nothing</code>Converts this set of date components to an Island Time ZonedDateTime. toIslandZonedDateTimeAt <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTimeAt(nsTimeZone: &lt;Error class: unknown class&gt;): &lt;Error class: unknown class&gt;</code><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTimeAt(zone: TimeZone): ZonedDateTime</code>Converts this <code>NSDate</code> to an Island Time ZonedDateTime at the specified time zone. toIslandZonedDateTimeOrNull <p>darwin</p><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTimeOrNull(): ZonedDateTime?</code>Converts this set of date components to an Island Time ZonedDateTime, or <code>null</code> if the <code>timeZone</code> property is absent. toNSDate <p>darwin</p><code>fun &lt;T&gt; TimePoint&lt;T&gt;.toNSDate(): &lt;Error class: unknown class&gt;</code>Converts this time point to an <code>NSDate</code>. toNSDateComponents <p>darwin</p><code>fun Date.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this date to an equivalent <code>NSDateComponents</code> object.<p>darwin</p><code>fun DateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code><code>fun OffsetDateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code><code>fun ZonedDateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this date-time to an equivalent <code>NSDateComponents</code> object.<p>darwin</p><code>fun OffsetTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code><code>fun Time.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this time to an equivalent <code>NSDateComponents</code> object.<p>darwin</p><code>fun Year.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this year to an equivalent <code>NSDateComponents</code> object.<p>darwin</p><code>fun YearMonth.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code>Converts this year-month to an equivalent <code>NSDateComponents</code> object. toNSDateInterval <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateInterval(): &lt;Error class: unknown class&gt;</code>Converts this interval to an equivalent <code>NSDateInterval</code>. toNSDateIntervalOrNull <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateIntervalOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this interval to an equivalent <code>NSDateInterval</code>, or <code>null</code> if the interval is unbounded. toNSTimeInterval <p>darwin</p><code>fun Days.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code><code>fun Duration.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code><code>fun Hours.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code><code>fun Microseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code><code>fun Milliseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code><code>fun Minutes.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code><code>fun Nanoseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code><code>fun Seconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toNSTimeZone <p>darwin</p><code>fun TimeZone.toNSTimeZone(): &lt;Error class: unknown class&gt;</code>Converts this time zone to an <code>NSTimeZone</code>.<p>darwin</p><code>fun UtcOffset.toNSTimeZone(): &lt;Error class: unknown class&gt;</code>Converts this offset into an equivalent <code>NSTimeZone</code> with a fixed UTC offset. toNSTimeZoneOrNull <p>darwin</p><code>fun TimeZone.toNSTimeZoneOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this time zone to an <code>NSTimeZone</code>, or <code>null</code> if the identifier isn't recognized as valid for an <code>NSTimeZone</code>."},{"location":"api/core/core/io.islandtime.darwin/to-island-date-time-at/","title":"toIslandDateTimeAt","text":"<p>//core/io.islandtime.darwin/toIslandDateTimeAt</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-date-time-at/#toislanddatetimeat","title":"toIslandDateTimeAt","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandDateTimeAt(offset: UtcOffset): DateTime</code></p> <p>Converts this <code>NSDate</code> to an Island Time DateTime at the specified UTC offset.</p> <p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandDateTimeAt(nsTimeZone: &lt;Error class: unknown class&gt;): &lt;Error class: unknown class&gt;</code></p> <p>Converts this <code>NSDate</code> to an Island Time DateTime at the specified time zone.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-date-time/","title":"toIslandDateTime","text":"<p>//core/io.islandtime.darwin/toIslandDateTime</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-date-time/#toislanddatetime","title":"toIslandDateTime","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandDateTime(): DateTime</code></p> <p>Converts this set of date components to an Island Time DateTime.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-date/","title":"toIslandDate","text":"<p>//core/io.islandtime.darwin/toIslandDate</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-date/#toislanddate","title":"toIslandDate","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandDate(): Date</code></p> <p>Converts this set of date components to an Island Time Date.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-instant-interval/","title":"toIslandInstantInterval","text":"<p>//core/io.islandtime.darwin/toIslandInstantInterval</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-instant-interval/#toislandinstantinterval","title":"toIslandInstantInterval","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandInstantInterval(): InstantInterval</code></p> <p>Converts this interval to an equivalent Island Time InstantInterval.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-instant/","title":"toIslandInstant","text":"<p>//core/io.islandtime.darwin/toIslandInstant</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-instant/#toislandinstant","title":"toIslandInstant","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandInstant(): Instant</code></p> <p>Converts this <code>NSDate</code> to an Island Time Instant.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-offset-date-time-at/","title":"toIslandOffsetDateTimeAt","text":"<p>//core/io.islandtime.darwin/toIslandOffsetDateTimeAt</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-offset-date-time-at/#toislandoffsetdatetimeat","title":"toIslandOffsetDateTimeAt","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTimeAt(offset: UtcOffset): OffsetDateTime</code></p> <p>Converts this <code>NSDate</code> to an Island Time OffsetDateTime at the specified offset.</p> <p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTimeAt(nsTimeZone: &lt;Error class: unknown class&gt;): OffsetDateTime</code></p> <p>Converts this <code>NSDate</code> to an Island Time OffsetDateTime at the specified time zone.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-offset-date-time-or-null/","title":"toIslandOffsetDateTimeOrNull","text":"<p>//core/io.islandtime.darwin/toIslandOffsetDateTimeOrNull</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-offset-date-time-or-null/#toislandoffsetdatetimeornull","title":"toIslandOffsetDateTimeOrNull","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTimeOrNull(): OffsetDateTime?</code></p> <p>Converts this set of date components to an Island Time OffsetDateTime, or <code>null</code> if the <code>timeZone</code> property is absent.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-offset-date-time/","title":"toIslandOffsetDateTime","text":"<p>//core/io.islandtime.darwin/toIslandOffsetDateTime</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-offset-date-time/#toislandoffsetdatetime","title":"toIslandOffsetDateTime","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandOffsetDateTime(): Nothing</code></p> <p>Converts this set of date components to an Island Time OffsetDateTime.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-offset-date-time/#throws","title":"Throws","text":"DateTimeException if the <code>timeZone</code> property is absent."},{"location":"api/core/core/io.islandtime.darwin/to-island-time-zone/","title":"toIslandTimeZone","text":"<p>//core/io.islandtime.darwin/toIslandTimeZone</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-time-zone/#toislandtimezone","title":"toIslandTimeZone","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandTimeZone(): TimeZone</code></p> <p>Converts this NSTimeZone` to an Island Time TimeZone with the same identifier.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-time/","title":"toIslandTime","text":"<p>//core/io.islandtime.darwin/toIslandTime</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-time/#toislandtime","title":"toIslandTime","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandTime(): Time</code></p> <p>Converts this set of date components to an Island Time Time.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-utc-offset-at/","title":"toIslandUtcOffsetAt","text":"<p>//core/io.islandtime.darwin/toIslandUtcOffsetAt</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-utc-offset-at/#toislandutcoffsetat","title":"toIslandUtcOffsetAt","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandUtcOffsetAt(date: &lt;Error class: unknown class&gt;): UtcOffset</code></p> <p>Converts this <code>NSTimeZone</code> to an Island Time UtcOffset at the provided date.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-zoned-date-time-at/","title":"toIslandZonedDateTimeAt","text":"<p>//core/io.islandtime.darwin/toIslandZonedDateTimeAt</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-zoned-date-time-at/#toislandzoneddatetimeat","title":"toIslandZonedDateTimeAt","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTimeAt(zone: TimeZone): ZonedDateTime</code></p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTimeAt(nsTimeZone: &lt;Error class: unknown class&gt;): &lt;Error class: unknown class&gt;</code></p> <p>Converts this <code>NSDate</code> to an Island Time ZonedDateTime at the specified time zone.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-zoned-date-time-or-null/","title":"toIslandZonedDateTimeOrNull","text":"<p>//core/io.islandtime.darwin/toIslandZonedDateTimeOrNull</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-zoned-date-time-or-null/#toislandzoneddatetimeornull","title":"toIslandZonedDateTimeOrNull","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTimeOrNull(): ZonedDateTime?</code></p> <p>Converts this set of date components to an Island Time ZonedDateTime, or <code>null</code> if the <code>timeZone</code> property is absent.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-zoned-date-time/","title":"toIslandZonedDateTime","text":"<p>//core/io.islandtime.darwin/toIslandZonedDateTime</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-zoned-date-time/#toislandzoneddatetime","title":"toIslandZonedDateTime","text":"<p>darwin</p> <p><code>fun &lt;Error class: unknown class&gt;.toIslandZonedDateTime(): Nothing</code></p> <p>Converts this set of date components to an Island Time ZonedDateTime.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-island-zoned-date-time/#throws","title":"Throws","text":"DateTimeException if the <code>timeZone</code> property is absent."},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/","title":"toNSDateComponents","text":"<p>//core/io.islandtime.darwin/toNSDateComponents</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#tonsdatecomponents","title":"toNSDateComponents","text":"<p>darwin</p> <p><code>fun Year.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p>Converts this year to an equivalent <code>NSDateComponents</code> object.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#return","title":"Return","text":"<p>an equivalent <code>NSDateComponents</code> object</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#parameters","title":"Parameters","text":"<p>darwin</p> includeCalendar <code>true</code> if the resulting <code>NSDateComponents</code> should include the ISO-8601 calendar <p>darwin</p> <p><code>fun YearMonth.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p>Converts this year-month to an equivalent <code>NSDateComponents</code> object.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#return_1","title":"Return","text":"<p>an equivalent <code>NSDateComponents</code> object</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#parameters_1","title":"Parameters","text":"<p>darwin</p> includeCalendar <code>true</code> if the resulting <code>NSDateComponents</code> should include the ISO-8601 calendar <p>darwin</p> <p><code>fun Date.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p>Converts this date to an equivalent <code>NSDateComponents</code> object.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#return_2","title":"Return","text":"<p>an equivalent <code>NSDateComponents</code> object</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#parameters_2","title":"Parameters","text":"<p>darwin</p> includeCalendar <code>true</code> if the resulting <code>NSDateComponents</code> should include the ISO-8601 calendar <p>darwin</p> <p><code>fun Time.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p><code>fun OffsetTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p>Converts this time to an equivalent <code>NSDateComponents</code> object.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#return_3","title":"Return","text":"<p>an equivalent <code>NSDateComponents</code> object</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#parameters_3","title":"Parameters","text":"<p>darwin</p> includeCalendar <code>true</code> if the resulting <code>NSDateComponents</code> should include the ISO-8601 calendar <p>darwin</p> <p><code>fun DateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p><code>fun OffsetDateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p><code>fun ZonedDateTime.toNSDateComponents(includeCalendar: Boolean = false): &lt;Error class: unknown class&gt;</code></p> <p>Converts this date-time to an equivalent <code>NSDateComponents</code> object.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#return_4","title":"Return","text":"<p>an equivalent <code>NSDateComponents</code> object</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-components/#parameters_4","title":"Parameters","text":"<p>darwin</p> includeCalendar <code>true</code> if the resulting <code>NSDateComponents</code> should include the ISO-8601 calendar"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-interval-or-null/","title":"toNSDateIntervalOrNull","text":"<p>//core/io.islandtime.darwin/toNSDateIntervalOrNull</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-interval-or-null/#tonsdateintervalornull","title":"toNSDateIntervalOrNull","text":"<p>darwin</p> <p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateIntervalOrNull(): &lt;Error class: unknown class&gt;?</code></p> <p>Converts this interval to an equivalent <code>NSDateInterval</code>, or <code>null</code> if the interval is unbounded.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-interval/","title":"toNSDateInterval","text":"<p>//core/io.islandtime.darwin/toNSDateInterval</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-interval/#tonsdateinterval","title":"toNSDateInterval","text":"<p>darwin</p> <p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateInterval(): &lt;Error class: unknown class&gt;</code></p> <p>Converts this interval to an equivalent <code>NSDateInterval</code>.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date-interval/#throws","title":"Throws","text":"UnsupportedOperationException if the interval is unbounded"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date/","title":"toNSDate","text":"<p>//core/io.islandtime.darwin/toNSDate</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-date/#tonsdate","title":"toNSDate","text":"<p>darwin</p> <p><code>fun &lt;T&gt; TimePoint&lt;T&gt;.toNSDate(): &lt;Error class: unknown class&gt;</code></p> <p>Converts this time point to an <code>NSDate</code>.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-time-interval/","title":"toNSTimeInterval","text":"<p>//core/io.islandtime.darwin/toNSTimeInterval</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-time-interval/#tonstimeinterval","title":"toNSTimeInterval","text":"<p>darwin</p> <p><code>fun Duration.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p><code>fun Days.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p><code>fun Hours.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p><code>fun Minutes.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p><code>fun Seconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p><code>fun Milliseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p><code>fun Microseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p><code>fun Nanoseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code></p> <p>Converts this duration to an equivalent <code>NSTimeInterval</code>.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-time-zone-or-null/","title":"toNSTimeZoneOrNull","text":"<p>//core/io.islandtime.darwin/toNSTimeZoneOrNull</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-time-zone-or-null/#tonstimezoneornull","title":"toNSTimeZoneOrNull","text":"<p>darwin</p> <p><code>fun TimeZone.toNSTimeZoneOrNull(): &lt;Error class: unknown class&gt;?</code></p> <p>Converts this time zone to an <code>NSTimeZone</code>, or <code>null</code> if the identifier isn't recognized as valid for an <code>NSTimeZone</code>.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-time-zone/","title":"toNSTimeZone","text":"<p>//core/io.islandtime.darwin/toNSTimeZone</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-time-zone/#tonstimezone","title":"toNSTimeZone","text":"<p>darwin</p> <p><code>fun UtcOffset.toNSTimeZone(): &lt;Error class: unknown class&gt;</code></p> <p>Converts this offset into an equivalent <code>NSTimeZone</code> with a fixed UTC offset.</p> <p>Note that <code>NSTimeZone</code>will round the <code>totalSeconds</code> value to the nearest minute.</p> <p>darwin</p> <p><code>fun TimeZone.toNSTimeZone(): &lt;Error class: unknown class&gt;</code></p> <p>Converts this time zone to an <code>NSTimeZone</code>.</p>"},{"location":"api/core/core/io.islandtime.darwin/to-n-s-time-zone/#throws","title":"Throws","text":"TimeZoneRulesException if the identifier isn't recognized as valid for an <code>NSTimeZone</code>"},{"location":"api/core/core/io.islandtime.format/","title":"io.islandtime.format","text":"<p>//core/io.islandtime.format</p>"},{"location":"api/core/core/io.islandtime.format/#package-level-declarations","title":"Package-level declarations","text":"<p>common darwin jvm</p> <p>Formatting of dates, times, durations, and intervals into textual representations.</p>"},{"location":"api/core/core/io.islandtime.format/#types","title":"Types","text":"Name Summary DateTimeTextProvider <p>common</p><code>interface DateTimeTextProvider</code>An abstraction that allows localized date-time text to be supplied from different data sources. NumberStyle <p>common</p><code>data class NumberStyle(val zeroDigit: Char, val plusSign: List&lt;Char&gt;, val minusSign: List&lt;Char&gt;, val decimalSeparator: List&lt;Char&gt;)</code>The set of characters that should be used when parsing or formatting numbers. ParsableTextList <p>common</p><code>typealias ParsableTextList = List&lt;Pair&lt;String, Long&gt;&gt;</code> PlatformDateTimeTextProvider <p>common</p><code>expect object PlatformDateTimeTextProvider : DateTimeTextProvider</code>The default provider of localized date-time text for the current platform.<p>darwin jvm</p><p>darwin jvm</p><code>actual object PlatformDateTimeTextProvider : DateTimeTextProvider</code> PlatformTimeZoneTextProvider <p>common</p><code>expect object PlatformTimeZoneTextProvider : TimeZoneTextProvider</code>The default provider of localized time zone text for the current platform.<p>darwin jvm</p><p>darwin jvm</p><code>actual object PlatformTimeZoneTextProvider : TimeZoneTextProvider</code> TextStyle <p>common</p><code>enum TextStyle : Enum&lt;TextStyle&gt; </code>A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time. TimeZoneTextProvider <p>common</p><code>interface TimeZoneTextProvider</code>An abstraction that allows localized time zone names to be supplied from different data sources. TimeZoneTextStyle <p>common</p><code>enum TimeZoneTextStyle : Enum&lt;TimeZoneTextStyle&gt; </code>A time zone text style."},{"location":"api/core/core/io.islandtime.format/#properties","title":"Properties","text":"Name Summary numberStyle <p>common</p><code>expect val Locale.numberStyle: NumberStyle</code>The NumberStyle associated with this locale."},{"location":"api/core/core/io.islandtime.format/number-style/","title":"numberStyle","text":"<p>//core/io.islandtime.format/numberStyle</p>"},{"location":"api/core/core/io.islandtime.format/number-style/#numberstyle","title":"numberStyle","text":"<p>common</p> <p><code>expect val Locale.numberStyle: NumberStyle</code></p> <p>The NumberStyle associated with this locale.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/","title":"DateTimeTextProvider","text":"<p>//core/io.islandtime.format/DateTimeTextProvider</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/#datetimetextprovider","title":"DateTimeTextProvider","text":"<p><code>interface DateTimeTextProvider</code></p> <p>An abstraction that allows localized date-time text to be supplied from different data sources.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/#inheritors","title":"Inheritors","text":"Companion PlatformDateTimeTextProvider"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion : DateTimeTextProvider</code>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/#functions","title":"Functions","text":"Name Summary amPmTextFor <p>common</p><code>open fun amPmTextFor(value: Long, locale: Locale): String?</code>Get the localized AM/PM text. dayOfWeekTextFor <p>common</p><code>open fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized day of the week text for a given ISO day of week number. eraTextFor <p>common</p><code>open fun eraTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized ISO era text. monthTextFor <p>common</p><code>open fun monthTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized month text for a given ISO month number. parsableTextFor <p>common</p><code>open fun parsableTextFor(field: DateTimeField, style: TextStyle, locale: Locale): ParsableTextList</code>Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.<p>common</p><code>abstract fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: Locale): ParsableTextList</code>Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. textFor <p>common</p><code>open fun textFor(field: DateTimeField, value: Long, style: TextStyle, locale: Locale): String?</code>Get localized text for the specified field, value, style, and locale."},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/","title":"amPmTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/amPmTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#ampmtextfor","title":"amPmTextFor","text":"<p>common</p> <p><code>open fun amPmTextFor(value: Long, locale: Locale): String?</code></p> <p>Get the localized AM/PM text.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#return","title":"Return","text":"<p>the localized AM/PM text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#parameters","title":"Parameters","text":"<p>common</p> value <code>0</code> for AM or <code>1</code> for PM locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/am-pm-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/","title":"dayOfWeekTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/dayOfWeekTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#dayofweektextfor","title":"dayOfWeekTextFor","text":"<p>common</p> <p><code>open fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized day of the week text for a given ISO day of week number.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#return","title":"Return","text":"<p>the localized day of week text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#parameters","title":"Parameters","text":"<p>common</p> value an ISO day of week number, from Monday (1) to Sunday (7) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/day-of-week-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not a valid day of the week number"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/era-text-for/","title":"eraTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/eraTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/era-text-for/#eratextfor","title":"eraTextFor","text":"<p>common</p> <p><code>open fun eraTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized ISO era text.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/era-text-for/#return","title":"Return","text":"<p>the localized era text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/era-text-for/#parameters","title":"Parameters","text":"<p>common</p> value <code>0</code> for BCE or <code>1</code> for CE locale the locale style the style of the text"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/era-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/month-text-for/","title":"monthTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/monthTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/month-text-for/#monthtextfor","title":"monthTextFor","text":"<p>common</p> <p><code>open fun monthTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized month text for a given ISO month number.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/month-text-for/#return","title":"Return","text":"<p>the localized month text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/month-text-for/#parameters","title":"Parameters","text":"<p>common</p> value an ISO month number, from January (1) to December (12) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/month-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not a valid month number"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/","title":"parsableTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/parsableTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parsabletextfor","title":"parsableTextFor","text":"<p>common</p> <p><code>open fun parsableTextFor(field: DateTimeField, style: TextStyle, locale: Locale): ParsableTextList</code></p> <p>Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.</p> <p>Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be <code>March</code> or <code>May</code>, so any attempt to parse it would be ambiguous.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#return","title":"Return","text":"<p>the list of parsable text -- empty if the field is invalid</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parameters","title":"Parameters","text":"<p>common</p> field the field to get text for style the style of the text locale the locale <p>common</p> <p><code>abstract fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: Locale): ParsableTextList</code></p> <p>Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.</p> <p>Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be <code>March</code> or <code>May</code>, so any attempt to parse it would be ambiguous.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#return_1","title":"Return","text":"<p>the list of parsable text -- empty if the field is invalid or no styles are specified</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/parsable-text-for/#parameters_1","title":"Parameters","text":"<p>common</p> field the field to get text for styles the set of styles to include locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/text-for/","title":"textFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/textFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/text-for/#textfor","title":"textFor","text":"<p>common</p> <p><code>open fun textFor(field: DateTimeField, value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get localized text for the specified field, value, style, and locale.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/text-for/#return","title":"Return","text":"<p>the localized text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/text-for/#parameters","title":"Parameters","text":"<p>common</p> field the field to get text for value the value of the field style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/text-for/#throws","title":"Throws","text":"DateTimeException if the value is out of range for the specified field"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/","title":"Companion","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/Companion</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion : DateTimeTextProvider</code></p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/#functions","title":"Functions","text":"Name Summary amPmTextFor <p>common</p><code>open override fun amPmTextFor(value: Long, locale: Locale): String?</code>Get the localized AM/PM text. dayOfWeekTextFor <p>common</p><code>open override fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized day of the week text for a given ISO day of week number. eraTextFor <p>common</p><code>open override fun eraTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized ISO era text. monthTextFor <p>common</p><code>open override fun monthTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized month text for a given ISO month number. parsableTextFor <p>common</p><code>open override fun parsableTextFor(field: DateTimeField, style: TextStyle, locale: Locale): ParsableTextList</code>Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.<p>common</p><code>open override fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: Locale): ParsableTextList</code>Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. textFor <p>common</p><code>open override fun textFor(field: DateTimeField, value: Long, style: TextStyle, locale: Locale): String?</code>Get localized text for the specified field, value, style, and locale."},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/am-pm-text-for/","title":"amPmTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/Companion/amPmTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/am-pm-text-for/#ampmtextfor","title":"amPmTextFor","text":"<p>common</p> <p><code>open override fun amPmTextFor(value: Long, locale: Locale): String?</code></p> <p>Get the localized AM/PM text.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/am-pm-text-for/#return","title":"Return","text":"<p>the localized AM/PM text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/am-pm-text-for/#parameters","title":"Parameters","text":"<p>common</p> value <code>0</code> for AM or <code>1</code> for PM locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/am-pm-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/day-of-week-text-for/","title":"dayOfWeekTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/Companion/dayOfWeekTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/day-of-week-text-for/#dayofweektextfor","title":"dayOfWeekTextFor","text":"<p>common</p> <p><code>open override fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized day of the week text for a given ISO day of week number.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/day-of-week-text-for/#return","title":"Return","text":"<p>the localized day of week text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/day-of-week-text-for/#parameters","title":"Parameters","text":"<p>common</p> value an ISO day of week number, from Monday (1) to Sunday (7) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/day-of-week-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not a valid day of the week number"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/era-text-for/","title":"eraTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/Companion/eraTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/era-text-for/#eratextfor","title":"eraTextFor","text":"<p>common</p> <p><code>open override fun eraTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized ISO era text.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/era-text-for/#return","title":"Return","text":"<p>the localized era text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/era-text-for/#parameters","title":"Parameters","text":"<p>common</p> value <code>0</code> for BCE or <code>1</code> for CE locale the locale style the style of the text"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/era-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/month-text-for/","title":"monthTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/Companion/monthTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/month-text-for/#monthtextfor","title":"monthTextFor","text":"<p>common</p> <p><code>open override fun monthTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized month text for a given ISO month number.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/month-text-for/#return","title":"Return","text":"<p>the localized month text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/month-text-for/#parameters","title":"Parameters","text":"<p>common</p> value an ISO month number, from January (1) to December (12) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/month-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not a valid month number"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/parsable-text-for/","title":"parsableTextFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/Companion/parsableTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/parsable-text-for/#parsabletextfor","title":"parsableTextFor","text":"<p>common</p> <p><code>open override fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: Locale): ParsableTextList</code></p> <p>Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.</p> <p>Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be <code>March</code> or <code>May</code>, so any attempt to parse it would be ambiguous.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/parsable-text-for/#return","title":"Return","text":"<p>the list of parsable text -- empty if the field is invalid or no styles are specified</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/parsable-text-for/#parameters","title":"Parameters","text":"<p>common</p> field the field to get text for styles the set of styles to include locale the locale <p>common</p> <p><code>open override fun parsableTextFor(field: DateTimeField, style: TextStyle, locale: Locale): ParsableTextList</code></p> <p>Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.</p> <p>Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be <code>March</code> or <code>May</code>, so any attempt to parse it would be ambiguous.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/parsable-text-for/#return_1","title":"Return","text":"<p>the list of parsable text -- empty if the field is invalid</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/parsable-text-for/#parameters_1","title":"Parameters","text":"<p>common</p> field the field to get text for style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/text-for/","title":"textFor","text":"<p>//core/io.islandtime.format/DateTimeTextProvider/Companion/textFor</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/text-for/#textfor","title":"textFor","text":"<p>common</p> <p><code>open override fun textFor(field: DateTimeField, value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get localized text for the specified field, value, style, and locale.</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/text-for/#return","title":"Return","text":"<p>the localized text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/text-for/#parameters","title":"Parameters","text":"<p>common</p> field the field to get text for value the value of the field style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-date-time-text-provider/-companion/text-for/#throws","title":"Throws","text":"DateTimeException if the value is out of range for the specified field"},{"location":"api/core/core/io.islandtime.format/-number-style/","title":"NumberStyle","text":"<p>//core/io.islandtime.format/NumberStyle</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/#numberstyle","title":"NumberStyle","text":"<p>common</p> <p><code>data class NumberStyle(val zeroDigit: Char, val plusSign: List&lt;Char&gt;, val minusSign: List&lt;Char&gt;, val decimalSeparator: List&lt;Char&gt;)</code></p> <p>The set of characters that should be used when parsing or formatting numbers.</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/#constructors","title":"Constructors","text":"NumberStyle <p>common</p><code>constructor(zeroDigit: Char, plusSign: List&lt;Char&gt;, minusSign: List&lt;Char&gt;, decimalSeparator: List&lt;Char&gt;)</code>"},{"location":"api/core/core/io.islandtime.format/-number-style/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.format/-number-style/#properties","title":"Properties","text":"Name Summary decimalSeparator <p>common</p><code>val decimalSeparator: List&lt;Char&gt;</code>A list of allowed decimal separator characters. The first element will be used when     formatting minusSign <p>common</p><code>val minusSign: List&lt;Char&gt;</code>A list of allowed minus sign characters. The first element will be used when formatting. plusSign <p>common</p><code>val plusSign: List&lt;Char&gt;</code>A list of allowed plus sign characters. The first element will be used when formatting. zeroDigit <p>common</p><code>val zeroDigit: Char</code>The character that represents zero."},{"location":"api/core/core/io.islandtime.format/-number-style/-number-style/","title":"NumberStyle","text":"<p>//core/io.islandtime.format/NumberStyle/NumberStyle</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/-number-style/#numberstyle","title":"NumberStyle","text":"<p>common</p> <p><code>constructor(zeroDigit: Char, plusSign: List&lt;Char&gt;, minusSign: List&lt;Char&gt;, decimalSeparator: List&lt;Char&gt;)</code></p>"},{"location":"api/core/core/io.islandtime.format/-number-style/decimal-separator/","title":"decimalSeparator","text":"<p>//core/io.islandtime.format/NumberStyle/decimalSeparator</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/decimal-separator/#decimalseparator","title":"decimalSeparator","text":"<p>common</p> <p><code>val decimalSeparator: List&lt;Char&gt;</code></p>"},{"location":"api/core/core/io.islandtime.format/-number-style/minus-sign/","title":"minusSign","text":"<p>//core/io.islandtime.format/NumberStyle/minusSign</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/minus-sign/#minussign","title":"minusSign","text":"<p>common</p> <p><code>val minusSign: List&lt;Char&gt;</code></p>"},{"location":"api/core/core/io.islandtime.format/-number-style/plus-sign/","title":"plusSign","text":"<p>//core/io.islandtime.format/NumberStyle/plusSign</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/plus-sign/#plussign","title":"plusSign","text":"<p>common</p> <p><code>val plusSign: List&lt;Char&gt;</code></p>"},{"location":"api/core/core/io.islandtime.format/-number-style/zero-digit/","title":"zeroDigit","text":"<p>//core/io.islandtime.format/NumberStyle/zeroDigit</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/zero-digit/#zerodigit","title":"zeroDigit","text":"<p>common</p> <p><code>val zeroDigit: Char</code></p>"},{"location":"api/core/core/io.islandtime.format/-number-style/-companion/","title":"Companion","text":"<p>//core/io.islandtime.format/NumberStyle/Companion</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.format/-number-style/-companion/#properties","title":"Properties","text":"Name Summary DEFAULT <p>common</p><code>val DEFAULT: NumberStyle</code>A locale-agnostic set of characters, matching those allowed in the date-time formats defined in ISO-8601."},{"location":"api/core/core/io.islandtime.format/-number-style/-companion/-d-e-f-a-u-l-t/","title":"DEFAULT","text":"<p>//core/io.islandtime.format/NumberStyle/Companion/DEFAULT</p>"},{"location":"api/core/core/io.islandtime.format/-number-style/-companion/-d-e-f-a-u-l-t/#default","title":"DEFAULT","text":"<p>common</p> <p><code>val DEFAULT: NumberStyle</code></p> <p>A locale-agnostic set of characters, matching those allowed in the date-time formats defined in ISO-8601.</p> <ul><li>Zero: '0'</li><li>Plus sign: '+'</li><li>Minus sign: '-' or '\u2212'</li><li>Decimal separator: '.' or ','</li></ul>"},{"location":"api/core/core/io.islandtime.format/-parsable-text-list/","title":"ParsableTextList","text":"<p>//core/io.islandtime.format/ParsableTextList</p>"},{"location":"api/core/core/io.islandtime.format/-parsable-text-list/#parsabletextlist","title":"ParsableTextList","text":"<p>common</p> <p><code>typealias ParsableTextList = List&lt;Pair&lt;String, Long&gt;&gt;</code></p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/","title":"PlatformDateTimeTextProvider","text":"<p>//core/io.islandtime.format/PlatformDateTimeTextProvider</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/#platformdatetimetextprovider","title":"PlatformDateTimeTextProvider","text":"<p>common</p> <p><code>expect object PlatformDateTimeTextProvider : DateTimeTextProvider</code></p> <p>The default provider of localized date-time text for the current platform.</p> <p>darwin jvm</p> <p><code>actual object PlatformDateTimeTextProvider : DateTimeTextProvider</code></p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/#functions","title":"Functions","text":"Name Summary amPmTextFor <p>common darwin jvm</p><p>common</p><code>open fun amPmTextFor(value: Long, locale: Locale): String?</code><p>darwin</p><code>open override fun amPmTextFor(value: Long, locale: &lt;Error class: unknown class&gt;): String?</code><p>jvm</p><code>open override fun amPmTextFor(value: Long, locale: Locale): String?</code>Get the localized AM/PM text. dayOfWeekTextFor <p>common darwin jvm</p><p>common</p><code>open fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: Locale): String?</code><p>darwin</p><code>open override fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: &lt;Error class: unknown class&gt;): String?</code><p>jvm</p><code>open override fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized day of the week text for a given ISO day of week number. eraTextFor <p>common darwin jvm</p><p>common</p><code>open fun eraTextFor(value: Long, style: TextStyle, locale: Locale): String?</code><p>darwin</p><code>open override fun eraTextFor(value: Long, style: TextStyle, locale: &lt;Error class: unknown class&gt;): String?</code><p>jvm</p><code>open override fun eraTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized ISO era text. monthTextFor <p>common darwin jvm</p><p>common</p><code>open fun monthTextFor(value: Long, style: TextStyle, locale: Locale): String?</code><p>darwin</p><code>open override fun monthTextFor(value: Long, style: TextStyle, locale: &lt;Error class: unknown class&gt;): String?</code><p>jvm</p><code>open override fun monthTextFor(value: Long, style: TextStyle, locale: Locale): String?</code>Get the localized month text for a given ISO month number. parsableTextFor <p>darwin common jvm</p><p>darwin</p><code>open fun parsableTextFor(field: DateTimeField, style: TextStyle, locale: &lt;Error class: unknown class&gt;): ParsableTextList</code><p>common</p><code>open fun parsableTextFor(field: DateTimeField, style: TextStyle, locale: Locale): ParsableTextList</code><p>jvm</p><code>open fun parsableTextFor(field: DateTimeField, style: TextStyle, locale: Locale): ParsableTextList</code>Get a list of all localized text in a particular style along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.<p>common darwin jvm</p><p>common</p><code>abstract fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: Locale): ParsableTextList</code><p>darwin</p><code>open override fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: &lt;Error class: unknown class&gt;): ParsableTextList</code><p>jvm</p><code>open override fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: Locale): ParsableTextList</code>Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing. textFor <p>darwin common jvm</p><p>darwin</p><code>open fun textFor(field: DateTimeField, value: Long, style: TextStyle, locale: &lt;Error class: unknown class&gt;): String?</code><p>common</p><code>open fun textFor(field: DateTimeField, value: Long, style: TextStyle, locale: Locale): String?</code><p>jvm</p><code>open fun textFor(field: DateTimeField, value: Long, style: TextStyle, locale: Locale): String?</code>Get localized text for the specified field, value, style, and locale."},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/","title":"amPmTextFor","text":"<p>//core/io.islandtime.format/PlatformDateTimeTextProvider/amPmTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#ampmtextfor","title":"amPmTextFor","text":"<p>darwin</p> <p><code>open override fun amPmTextFor(value: Long, locale: &lt;Error class: unknown class&gt;): String?</code></p> <p>Get the localized AM/PM text.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#return","title":"Return","text":"<p>the localized AM/PM text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#parameters","title":"Parameters","text":"<p>darwin</p> value <code>0</code> for AM or <code>1</code> for PM locale the locale"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code> <p>jvm</p> <p><code>open override fun amPmTextFor(value: Long, locale: Locale): String?</code></p> <p>Get the localized AM/PM text.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#return_1","title":"Return","text":"<p>the localized AM/PM text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#parameters_1","title":"Parameters","text":"<p>jvm</p> value <code>0</code> for AM or <code>1</code> for PM locale the locale"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/am-pm-text-for/#throws_1","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/","title":"dayOfWeekTextFor","text":"<p>//core/io.islandtime.format/PlatformDateTimeTextProvider/dayOfWeekTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#dayofweektextfor","title":"dayOfWeekTextFor","text":"<p>darwin</p> <p><code>open override fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: &lt;Error class: unknown class&gt;): String?</code></p> <p>Get the localized day of the week text for a given ISO day of week number.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#return","title":"Return","text":"<p>the localized day of week text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#parameters","title":"Parameters","text":"<p>darwin</p> value an ISO day of week number, from Monday (1) to Sunday (7) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not a valid day of the week number <p>jvm</p> <p><code>open override fun dayOfWeekTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized day of the week text for a given ISO day of week number.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#return_1","title":"Return","text":"<p>the localized day of week text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#parameters_1","title":"Parameters","text":"<p>jvm</p> value an ISO day of week number, from Monday (1) to Sunday (7) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/day-of-week-text-for/#throws_1","title":"Throws","text":"DateTimeException if the value is not a valid day of the week number"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/","title":"eraTextFor","text":"<p>//core/io.islandtime.format/PlatformDateTimeTextProvider/eraTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#eratextfor","title":"eraTextFor","text":"<p>darwin</p> <p><code>open override fun eraTextFor(value: Long, style: TextStyle, locale: &lt;Error class: unknown class&gt;): String?</code></p> <p>Get the localized ISO era text.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#return","title":"Return","text":"<p>the localized era text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#parameters","title":"Parameters","text":"<p>darwin</p> value <code>0</code> for BCE or <code>1</code> for CE locale the locale style the style of the text"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code> <p>jvm</p> <p><code>open override fun eraTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized ISO era text.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#return_1","title":"Return","text":"<p>the localized era text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#parameters_1","title":"Parameters","text":"<p>jvm</p> value <code>0</code> for BCE or <code>1</code> for CE locale the locale style the style of the text"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/era-text-for/#throws_1","title":"Throws","text":"DateTimeException if the value is not <code>0</code> or <code>1</code>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/","title":"monthTextFor","text":"<p>//core/io.islandtime.format/PlatformDateTimeTextProvider/monthTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#monthtextfor","title":"monthTextFor","text":"<p>darwin</p> <p><code>open override fun monthTextFor(value: Long, style: TextStyle, locale: &lt;Error class: unknown class&gt;): String?</code></p> <p>Get the localized month text for a given ISO month number.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#return","title":"Return","text":"<p>the localized month text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#parameters","title":"Parameters","text":"<p>darwin</p> value an ISO month number, from January (1) to December (12) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#throws","title":"Throws","text":"DateTimeException if the value is not a valid month number <p>jvm</p> <p><code>open override fun monthTextFor(value: Long, style: TextStyle, locale: Locale): String?</code></p> <p>Get the localized month text for a given ISO month number.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#return_1","title":"Return","text":"<p>the localized month text or <code>null</code> if unavailable</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#parameters_1","title":"Parameters","text":"<p>jvm</p> value an ISO month number, from January (1) to December (12) style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/month-text-for/#throws_1","title":"Throws","text":"DateTimeException if the value is not a valid month number"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/","title":"parsableTextFor","text":"<p>//core/io.islandtime.format/PlatformDateTimeTextProvider/parsableTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#parsabletextfor","title":"parsableTextFor","text":"<p>darwin</p> <p><code>open override fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: &lt;Error class: unknown class&gt;): ParsableTextList</code></p> <p>Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.</p> <p>Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be <code>March</code> or <code>May</code>, so any attempt to parse it would be ambiguous.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#return","title":"Return","text":"<p>the list of parsable text -- empty if the field is invalid or no styles are specified</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#parameters","title":"Parameters","text":"<p>darwin</p> field the field to get text for styles the set of styles to include locale the locale <p>jvm</p> <p><code>open override fun parsableTextFor(field: DateTimeField, styles: Set&lt;TextStyle&gt;, locale: Locale): ParsableTextList</code></p> <p>Get a list of all localized text in a set of styles along with the values associated that text. The list will be sorted in descending order by the length of text, making it suitable for parsing.</p> <p>Any text with conflicting values will be excluded. For example, the English narrow month name \"M\" could be <code>March</code> or <code>May</code>, so any attempt to parse it would be ambiguous.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#return_1","title":"Return","text":"<p>the list of parsable text -- empty if the field is invalid or no styles are specified</p>"},{"location":"api/core/core/io.islandtime.format/-platform-date-time-text-provider/parsable-text-for/#parameters_1","title":"Parameters","text":"<p>jvm</p> field the field to get text for styles the set of styles to include locale the locale"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/","title":"PlatformTimeZoneTextProvider","text":"<p>//core/io.islandtime.format/PlatformTimeZoneTextProvider</p>"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/#platformtimezonetextprovider","title":"PlatformTimeZoneTextProvider","text":"<p>common</p> <p><code>expect object PlatformTimeZoneTextProvider : TimeZoneTextProvider</code></p> <p>The default provider of localized time zone text for the current platform.</p> <p>darwin jvm</p> <p><code>actual object PlatformTimeZoneTextProvider : TimeZoneTextProvider</code></p>"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/#functions","title":"Functions","text":"Name Summary timeZoneTextFor <p>darwin jvm common</p><p>darwin</p><code>open override fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: &lt;Error class: unknown class&gt;): String?</code><p>jvm</p><code>open override fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: Locale): String?</code><p>common</p><code>open fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: Locale): String?</code>Get the localized time zone text."},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/","title":"timeZoneTextFor","text":"<p>//core/io.islandtime.format/PlatformTimeZoneTextProvider/timeZoneTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#timezonetextfor","title":"timeZoneTextFor","text":"<p>darwin</p> <p><code>open override fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: &lt;Error class: unknown class&gt;): String?</code></p> <p>Get the localized time zone text.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#return","title":"Return","text":"<p>the localized time zone text or <code>null</code> if unavailable in the specified style</p>"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#parameters","title":"Parameters","text":"<p>darwin</p> zone the time zone style the style of the text locale the locale <p>jvm</p> <p><code>open override fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: Locale): String?</code></p> <p>Get the localized time zone text.</p>"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#return_1","title":"Return","text":"<p>the localized time zone text or <code>null</code> if unavailable in the specified style</p>"},{"location":"api/core/core/io.islandtime.format/-platform-time-zone-text-provider/time-zone-text-for/#parameters_1","title":"Parameters","text":"<p>jvm</p> zone the time zone style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-text-style/","title":"TextStyle","text":"<p>//core/io.islandtime.format/TextStyle</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/#textstyle","title":"TextStyle","text":"<p>common</p> <p><code>enum TextStyle : Enum&lt;TextStyle&gt; </code></p> <p>A style of text. The meaning may vary depending on the context. Standalone styles should be used when displaying text by itself since some languages have different names in the context of a date and time.</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/#entries","title":"Entries","text":"FULL <p>common</p><code>FULL</code> FULL_STANDALONE <p>common</p><code>FULL_STANDALONE</code> SHORT <p>common</p><code>SHORT</code> SHORT_STANDALONE <p>common</p><code>SHORT_STANDALONE</code> NARROW <p>common</p><code>NARROW</code> NARROW_STANDALONE <p>common</p><code>NARROW_STANDALONE</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;TextStyle&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/#functions","title":"Functions","text":"Name Summary asNormal <p>common</p><code>fun asNormal(): TextStyle</code>Convert to a normal style, if standalone. asStandalone <p>common</p><code>fun asStandalone(): TextStyle</code>Convert to a standalone style, if normal. isStandalone <p>common</p><code>fun isStandalone(): Boolean</code>Is this a standalone style? valueOf <p>common</p><code>fun valueOf(value: String): TextStyle</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;TextStyle&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime.format/-text-style/as-normal/","title":"asNormal","text":"<p>//core/io.islandtime.format/TextStyle/asNormal</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/as-normal/#asnormal","title":"asNormal","text":"<p>common</p> <p><code>fun asNormal(): TextStyle</code></p> <p>Convert to a normal style, if standalone.</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/as-standalone/","title":"asStandalone","text":"<p>//core/io.islandtime.format/TextStyle/asStandalone</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/as-standalone/#asstandalone","title":"asStandalone","text":"<p>common</p> <p><code>fun asStandalone(): TextStyle</code></p> <p>Convert to a standalone style, if normal.</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/entries/","title":"entries","text":"<p>//core/io.islandtime.format/TextStyle/entries</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;TextStyle&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/is-standalone/","title":"isStandalone","text":"<p>//core/io.islandtime.format/TextStyle/isStandalone</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/is-standalone/#isstandalone","title":"isStandalone","text":"<p>common</p> <p><code>fun isStandalone(): Boolean</code></p> <p>Is this a standalone style?</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/value-of/","title":"valueOf","text":"<p>//core/io.islandtime.format/TextStyle/valueOf</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): TextStyle</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime.format/-text-style/values/","title":"values","text":"<p>//core/io.islandtime.format/TextStyle/values</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;TextStyle&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l/","title":"FULL","text":"<p>//core/io.islandtime.format/TextStyle/FULL</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l/#full","title":"FULL","text":"<p>common</p> <p><code>FULL <p></p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l/#functions","title":"Functions","text":"Name Summary asNormal <p>common</p><code>fun asNormal(): TextStyle</code>Convert to a normal style, if standalone. asStandalone <p>common</p><code>fun asStandalone(): TextStyle</code>Convert to a standalone style, if normal. isStandalone <p>common</p><code>fun isStandalone(): Boolean</code>Is this a standalone style?"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l_-s-t-a-n-d-a-l-o-n-e/","title":"FULL_STANDALONE","text":"<p>//core/io.islandtime.format/TextStyle/FULL_STANDALONE</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l_-s-t-a-n-d-a-l-o-n-e/#full_standalone","title":"FULL_STANDALONE","text":"<p>common</p> <p><code>FULL_STANDALONE <p></p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l_-s-t-a-n-d-a-l-o-n-e/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/-f-u-l-l_-s-t-a-n-d-a-l-o-n-e/#functions","title":"Functions","text":"Name Summary asNormal <p>common</p><code>fun asNormal(): TextStyle</code>Convert to a normal style, if standalone. asStandalone <p>common</p><code>fun asStandalone(): TextStyle</code>Convert to a standalone style, if normal. isStandalone <p>common</p><code>fun isStandalone(): Boolean</code>Is this a standalone style?"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w/","title":"NARROW","text":"<p>//core/io.islandtime.format/TextStyle/NARROW</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w/#narrow","title":"NARROW","text":"<p>common</p> <p><code>NARROW <p></p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w/#functions","title":"Functions","text":"Name Summary asNormal <p>common</p><code>fun asNormal(): TextStyle</code>Convert to a normal style, if standalone. asStandalone <p>common</p><code>fun asStandalone(): TextStyle</code>Convert to a standalone style, if normal. isStandalone <p>common</p><code>fun isStandalone(): Boolean</code>Is this a standalone style?"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w_-s-t-a-n-d-a-l-o-n-e/","title":"NARROW_STANDALONE","text":"<p>//core/io.islandtime.format/TextStyle/NARROW_STANDALONE</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w_-s-t-a-n-d-a-l-o-n-e/#narrow_standalone","title":"NARROW_STANDALONE","text":"<p>common</p> <p><code>NARROW_STANDALONE <p></p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w_-s-t-a-n-d-a-l-o-n-e/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/-n-a-r-r-o-w_-s-t-a-n-d-a-l-o-n-e/#functions","title":"Functions","text":"Name Summary asNormal <p>common</p><code>fun asNormal(): TextStyle</code>Convert to a normal style, if standalone. asStandalone <p>common</p><code>fun asStandalone(): TextStyle</code>Convert to a standalone style, if normal. isStandalone <p>common</p><code>fun isStandalone(): Boolean</code>Is this a standalone style?"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t/","title":"SHORT","text":"<p>//core/io.islandtime.format/TextStyle/SHORT</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t/#short","title":"SHORT","text":"<p>common</p> <p><code>SHORT <p></p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t/#functions","title":"Functions","text":"Name Summary asNormal <p>common</p><code>fun asNormal(): TextStyle</code>Convert to a normal style, if standalone. asStandalone <p>common</p><code>fun asStandalone(): TextStyle</code>Convert to a standalone style, if normal. isStandalone <p>common</p><code>fun isStandalone(): Boolean</code>Is this a standalone style?"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t_-s-t-a-n-d-a-l-o-n-e/","title":"SHORT_STANDALONE","text":"<p>//core/io.islandtime.format/TextStyle/SHORT_STANDALONE</p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t_-s-t-a-n-d-a-l-o-n-e/#short_standalone","title":"SHORT_STANDALONE","text":"<p>common</p> <p><code>SHORT_STANDALONE <p></p>"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t_-s-t-a-n-d-a-l-o-n-e/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-text-style/-s-h-o-r-t_-s-t-a-n-d-a-l-o-n-e/#functions","title":"Functions","text":"Name Summary asNormal <p>common</p><code>fun asNormal(): TextStyle</code>Convert to a normal style, if standalone. asStandalone <p>common</p><code>fun asStandalone(): TextStyle</code>Convert to a standalone style, if normal. isStandalone <p>common</p><code>fun isStandalone(): Boolean</code>Is this a standalone style?"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/","title":"TimeZoneTextProvider","text":"<p>//core/io.islandtime.format/TimeZoneTextProvider</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/#timezonetextprovider","title":"TimeZoneTextProvider","text":"<p><code>interface TimeZoneTextProvider</code></p> <p>An abstraction that allows localized time zone names to be supplied from different data sources.</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/#inheritors","title":"Inheritors","text":"Companion PlatformTimeZoneTextProvider"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion : TimeZoneTextProvider</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/#functions","title":"Functions","text":"Name Summary timeZoneTextFor <p>common</p><code>open fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: Locale): String?</code>Get the localized time zone text."},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/","title":"timeZoneTextFor","text":"<p>//core/io.islandtime.format/TimeZoneTextProvider/timeZoneTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/#timezonetextfor","title":"timeZoneTextFor","text":"<p>common</p> <p><code>open fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: Locale): String?</code></p> <p>Get the localized time zone text.</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/#return","title":"Return","text":"<p>the localized time zone text or <code>null</code> if unavailable in the specified style</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/time-zone-text-for/#parameters","title":"Parameters","text":"<p>common</p> zone the time zone style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/-companion/","title":"Companion","text":"<p>//core/io.islandtime.format/TimeZoneTextProvider/Companion</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion : TimeZoneTextProvider</code></p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/-companion/#functions","title":"Functions","text":"Name Summary timeZoneTextFor <p>common</p><code>open override fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: Locale): String?</code>Get the localized time zone text."},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/-companion/time-zone-text-for/","title":"timeZoneTextFor","text":"<p>//core/io.islandtime.format/TimeZoneTextProvider/Companion/timeZoneTextFor</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/-companion/time-zone-text-for/#timezonetextfor","title":"timeZoneTextFor","text":"<p>common</p> <p><code>open override fun timeZoneTextFor(zone: TimeZone, style: TimeZoneTextStyle, locale: Locale): String?</code></p> <p>Get the localized time zone text.</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/-companion/time-zone-text-for/#return","title":"Return","text":"<p>the localized time zone text or <code>null</code> if unavailable in the specified style</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-provider/-companion/time-zone-text-for/#parameters","title":"Parameters","text":"<p>common</p> zone the time zone style the style of the text locale the locale"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/","title":"TimeZoneTextStyle","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/#timezonetextstyle","title":"TimeZoneTextStyle","text":"<p>common</p> <p><code>enum TimeZoneTextStyle : Enum&lt;TimeZoneTextStyle&gt; </code></p> <p>A time zone text style.</p> <p>Standard versions indicate the name for standard time, like \"Eastern Standard Time\". Daylight versions indicate the name of daylight savings time, like \"Eastern Daylight Time\". Generic is agnostic to daylight savings -- ie. \"Eastern Time\".</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/#entries","title":"Entries","text":"STANDARD <p>common</p><code>STANDARD</code> SHORT_STANDARD <p>common</p><code>SHORT_STANDARD</code> DAYLIGHT_SAVING <p>common</p><code>DAYLIGHT_SAVING</code> SHORT_DAYLIGHT_SAVING <p>common</p><code>SHORT_DAYLIGHT_SAVING</code> GENERIC <p>common</p><code>GENERIC</code> SHORT_GENERIC <p>common</p><code>SHORT_GENERIC</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;TimeZoneTextStyle&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/#functions","title":"Functions","text":"Name Summary isDaylightSaving <p>common</p><code>fun isDaylightSaving(): Boolean</code>Is this a daylight savings style? isGeneric <p>common</p><code>fun isGeneric(): Boolean</code>Is this a generic style? isShort <p>common</p><code>fun isShort(): Boolean</code>Is this a short style? isStandard <p>common</p><code>fun isStandard(): Boolean</code>Is this a standard style? valueOf <p>common</p><code>fun valueOf(value: String): TimeZoneTextStyle</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;TimeZoneTextStyle&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/entries/","title":"entries","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/entries</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;TimeZoneTextStyle&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-daylight-saving/","title":"isDaylightSaving","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/isDaylightSaving</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-daylight-saving/#isdaylightsaving","title":"isDaylightSaving","text":"<p>common</p> <p><code>fun isDaylightSaving(): Boolean</code></p> <p>Is this a daylight savings style?</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-generic/","title":"isGeneric","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/isGeneric</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-generic/#isgeneric","title":"isGeneric","text":"<p>common</p> <p><code>fun isGeneric(): Boolean</code></p> <p>Is this a generic style?</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-short/","title":"isShort","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/isShort</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-short/#isshort","title":"isShort","text":"<p>common</p> <p><code>fun isShort(): Boolean</code></p> <p>Is this a short style?</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-standard/","title":"isStandard","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/isStandard</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/is-standard/#isstandard","title":"isStandard","text":"<p>common</p> <p><code>fun isStandard(): Boolean</code></p> <p>Is this a standard style?</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/value-of/","title":"valueOf","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/valueOf</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): TimeZoneTextStyle</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/values/","title":"values","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/values</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;TimeZoneTextStyle&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/","title":"DAYLIGHT_SAVING","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/DAYLIGHT_SAVING</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#daylight_saving","title":"DAYLIGHT_SAVING","text":"<p>common</p> <p><code>DAYLIGHT_SAVING <p></p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#functions","title":"Functions","text":"Name Summary isDaylightSaving <p>common</p><code>fun isDaylightSaving(): Boolean</code>Is this a daylight savings style? isGeneric <p>common</p><code>fun isGeneric(): Boolean</code>Is this a generic style? isShort <p>common</p><code>fun isShort(): Boolean</code>Is this a short style? isStandard <p>common</p><code>fun isStandard(): Boolean</code>Is this a standard style?"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-g-e-n-e-r-i-c/","title":"GENERIC","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/GENERIC</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-g-e-n-e-r-i-c/#generic","title":"GENERIC","text":"<p>common</p> <p><code>GENERIC <p></p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-g-e-n-e-r-i-c/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-g-e-n-e-r-i-c/#functions","title":"Functions","text":"Name Summary isDaylightSaving <p>common</p><code>fun isDaylightSaving(): Boolean</code>Is this a daylight savings style? isGeneric <p>common</p><code>fun isGeneric(): Boolean</code>Is this a generic style? isShort <p>common</p><code>fun isShort(): Boolean</code>Is this a short style? isStandard <p>common</p><code>fun isStandard(): Boolean</code>Is this a standard style?"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/","title":"SHORT_DAYLIGHT_SAVING","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/SHORT_DAYLIGHT_SAVING</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#short_daylight_saving","title":"SHORT_DAYLIGHT_SAVING","text":"<p>common</p> <p><code>SHORT_DAYLIGHT_SAVING <p></p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-d-a-y-l-i-g-h-t_-s-a-v-i-n-g/#functions","title":"Functions","text":"Name Summary isDaylightSaving <p>common</p><code>fun isDaylightSaving(): Boolean</code>Is this a daylight savings style? isGeneric <p>common</p><code>fun isGeneric(): Boolean</code>Is this a generic style? isShort <p>common</p><code>fun isShort(): Boolean</code>Is this a short style? isStandard <p>common</p><code>fun isStandard(): Boolean</code>Is this a standard style?"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-g-e-n-e-r-i-c/","title":"SHORT_GENERIC","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/SHORT_GENERIC</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-g-e-n-e-r-i-c/#short_generic","title":"SHORT_GENERIC","text":"<p>common</p> <p><code>SHORT_GENERIC <p></p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-g-e-n-e-r-i-c/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-g-e-n-e-r-i-c/#functions","title":"Functions","text":"Name Summary isDaylightSaving <p>common</p><code>fun isDaylightSaving(): Boolean</code>Is this a daylight savings style? isGeneric <p>common</p><code>fun isGeneric(): Boolean</code>Is this a generic style? isShort <p>common</p><code>fun isShort(): Boolean</code>Is this a short style? isStandard <p>common</p><code>fun isStandard(): Boolean</code>Is this a standard style?"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-s-t-a-n-d-a-r-d/","title":"SHORT_STANDARD","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/SHORT_STANDARD</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-s-t-a-n-d-a-r-d/#short_standard","title":"SHORT_STANDARD","text":"<p>common</p> <p><code>SHORT_STANDARD <p></p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-s-t-a-n-d-a-r-d/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-h-o-r-t_-s-t-a-n-d-a-r-d/#functions","title":"Functions","text":"Name Summary isDaylightSaving <p>common</p><code>fun isDaylightSaving(): Boolean</code>Is this a daylight savings style? isGeneric <p>common</p><code>fun isGeneric(): Boolean</code>Is this a generic style? isShort <p>common</p><code>fun isShort(): Boolean</code>Is this a short style? isStandard <p>common</p><code>fun isStandard(): Boolean</code>Is this a standard style?"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-t-a-n-d-a-r-d/","title":"STANDARD","text":"<p>//core/io.islandtime.format/TimeZoneTextStyle/STANDARD</p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-t-a-n-d-a-r-d/#standard","title":"STANDARD","text":"<p>common</p> <p><code>STANDARD <p></p>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-t-a-n-d-a-r-d/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.format/-time-zone-text-style/-s-t-a-n-d-a-r-d/#functions","title":"Functions","text":"Name Summary isDaylightSaving <p>common</p><code>fun isDaylightSaving(): Boolean</code>Is this a daylight savings style? isGeneric <p>common</p><code>fun isGeneric(): Boolean</code>Is this a generic style? isShort <p>common</p><code>fun isShort(): Boolean</code>Is this a short style? isStandard <p>common</p><code>fun isStandard(): Boolean</code>Is this a standard style?"},{"location":"api/core/core/io.islandtime.jvm/","title":"io.islandtime.jvm","text":"<p>//core/io.islandtime.jvm</p>"},{"location":"api/core/core/io.islandtime.jvm/#package-level-declarations","title":"Package-level declarations","text":"<p>jvm</p> <p>Various extensions specific to the Java platform.</p>"},{"location":"api/core/core/io.islandtime.jvm/#functions","title":"Functions","text":"Name Summary asIslandClock <p>jvm</p><code>@JvmName(name = \"toIslandClock\")fun Clock.asIslandClock(): Clock</code>Makes this clock compatible with Island Time's Clock interface. now <p>jvm</p><code>fun Date.Companion.now(clock: Clock): Date</code>Gets the current Date from the provided clock.<p>jvm</p><code>fun DateTime.Companion.now(clock: Clock): DateTime</code>Gets the current DateTime from the provided clock.<p>jvm</p><code>fun Instant.Companion.now(clock: Clock): Instant</code>Gets the current Instant from the provided clock.<p>jvm</p><code>fun OffsetDateTime.Companion.now(clock: Clock): OffsetDateTime</code>Gets the current OffsetDateTime from the provided clock.<p>jvm</p><code>fun OffsetTime.Companion.now(clock: Clock): OffsetTime</code>Gets the current OffsetTime from the provided clock.<p>jvm</p><code>fun Time.Companion.now(clock: Clock): Time</code>Gets the current Time from the provided clock.<p>jvm</p><code>fun Year.Companion.now(clock: Clock): Year</code>Gets the current Year from the provided clock.<p>jvm</p><code>fun YearMonth.Companion.now(clock: Clock): YearMonth</code>Gets the current YearMonth from the provided clock.<p>jvm</p><code>fun ZonedDateTime.Companion.now(clock: Clock): ZonedDateTime</code>Gets the current ZonedDateTime from the provided clock. toIslandDate <p>jvm</p><code>fun LocalDate.toIslandDate(): Date</code>Converts this date to an equivalent Island Time Date. toIslandDateTime <p>jvm</p><code>fun LocalDateTime.toIslandDateTime(): DateTime</code>Converts this date-time to an equivalent Island Time DateTime. toIslandDuration <p>jvm</p><code>fun Duration.toIslandDuration(): Duration</code>Converts this duration to an equivalent Island Time Duration. toIslandInstant <p>jvm</p><code>fun Instant.toIslandInstant(): Instant</code>Converts this instant to an equivalent Island Time Instant. toIslandOffsetDateTime <p>jvm</p><code>fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime</code>Converts this date-time to an equivalent Island Time OffsetDateTime. toIslandOffsetTime <p>jvm</p><code>fun OffsetTime.toIslandOffsetTime(): OffsetTime</code>Converts this time to an equivalent Island Time OffsetTime. toIslandPeriod <p>jvm</p><code>fun Period.toIslandPeriod(): Period</code>Converts this period to an equivalent Island Time Period. toIslandTime <p>jvm</p><code>fun LocalTime.toIslandTime(): Time</code>Converts this time to an equivalent Island Time Time. toIslandTimeZone <p>jvm</p><code>fun ZoneId.toIslandTimeZone(): TimeZone</code>Converts this time zone to an equivalent Island Time TimeZone. toIslandUtcOffset <p>jvm</p><code>fun ZoneOffset.toIslandUtcOffset(): UtcOffset</code>Converts this UTC offset to an equivalent Island Time UtcOffset. toIslandYear <p>jvm</p><code>fun Year.toIslandYear(): Year</code>Converts this year to an equivalent Island Time Year. toIslandYearMonth <p>jvm</p><code>fun YearMonth.toIslandYearMonth(): YearMonth</code>Converts this year-month to an equivalent Island Time YearMonth. toIslandZonedDateTime <p>jvm</p><code>fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime</code>Converts this date-time to an equivalent Island Time ZonedDateTime. toJavaDuration <p>jvm</p><code>fun Days.toJavaDuration(): Duration</code><code>fun Duration.toJavaDuration(): Duration</code><code>fun Hours.toJavaDuration(): Duration</code><code>fun Microseconds.toJavaDuration(): Duration</code><code>fun Milliseconds.toJavaDuration(): Duration</code><code>fun Minutes.toJavaDuration(): Duration</code><code>fun Nanoseconds.toJavaDuration(): Duration</code><code>fun Seconds.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toJavaInstant <p>jvm</p><code>fun Instant.toJavaInstant(): Instant</code>Converts this instant to an equivalent Java <code>Instant</code>. toJavaLocalDate <p>jvm</p><code>fun Date.toJavaLocalDate(): LocalDate</code>Converts this date to an equivalent Java <code>LocalDate</code>. toJavaLocalDateTime <p>jvm</p><code>fun DateTime.toJavaLocalDateTime(): LocalDateTime</code>Converts this date-time to an equivalent Java <code>LocalDateTime</code>. toJavaLocalTime <p>jvm</p><code>fun Time.toJavaLocalTime(): LocalTime</code>Converts this time to an equivalent Java <code>LocalTime</code>. toJavaOffsetDateTime <p>jvm</p><code>fun OffsetDateTime.toJavaOffsetDateTime(): OffsetDateTime</code>Converts this date-time to an equivalent Java <code>OffsetDateTime</code>. toJavaOffsetTime <p>jvm</p><code>fun OffsetTime.toJavaOffsetTime(): OffsetTime</code>Converts this time to an equivalent Java <code>OffsetTime</code>. toJavaPeriod <p>jvm</p><code>fun Centuries.toJavaPeriod(): Period</code><code>fun Days.toJavaPeriod(): Period</code><code>fun Decades.toJavaPeriod(): Period</code><code>fun Months.toJavaPeriod(): Period</code><code>fun Weeks.toJavaPeriod(): Period</code><code>fun Years.toJavaPeriod(): Period</code>Converts this duration to an equivalent Java <code>Period</code>.<p>jvm</p><code>fun Period.toJavaPeriod(): Period</code>Converts this period to an equivalent Java <code>Period</code>. toJavaYear <p>jvm</p><code>fun Year.toJavaYear(): Year</code>Converts this year to an equivalent Java <code>Year</code>. toJavaYearMonth <p>jvm</p><code>fun YearMonth.toJavaYearMonth(): YearMonth</code>Converts this year-month to an equivalent Java <code>YearMonth</code>. toJavaZonedDateTime <p>jvm</p><code>fun ZonedDateTime.toJavaZonedDateTime(): ZonedDateTime</code>Converts this date-time to an equivalent Java <code>ZonedDateTime</code>. toJavaZoneId <p>jvm</p><code>fun TimeZone.toJavaZoneId(): ZoneId</code>Converts this time zone to an equivalent Java <code>ZoneId</code>. toJavaZoneOffset <p>jvm</p><code>fun UtcOffset.toJavaZoneOffset(): ZoneOffset</code>Converts this UTC offset to an equivalent Java <code>ZoneOffset</code>."},{"location":"api/core/core/io.islandtime.jvm/as-island-clock/","title":"asIslandClock","text":"<p>//core/io.islandtime.jvm/asIslandClock</p>"},{"location":"api/core/core/io.islandtime.jvm/as-island-clock/#asislandclock","title":"asIslandClock","text":"<p>jvm</p> <p><code>@JvmName(name = \"toIslandClock\") <p>fun Clock.asIslandClock(): Clock</p> <p>Makes this clock compatible with Island Time's Clock interface.</p>"},{"location":"api/core/core/io.islandtime.jvm/now/","title":"now","text":"<p>//core/io.islandtime.jvm/now</p>"},{"location":"api/core/core/io.islandtime.jvm/now/#now","title":"now","text":"<p>jvm</p> <p><code>fun Instant.Companion.now(clock: Clock): Instant</code></p> <p>Gets the current Instant from the provided clock.</p> <p>jvm</p> <p><code>fun Year.Companion.now(clock: Clock): Year</code></p> <p>Gets the current Year from the provided clock.</p> <p>jvm</p> <p><code>fun YearMonth.Companion.now(clock: Clock): YearMonth</code></p> <p>Gets the current YearMonth from the provided clock.</p> <p>jvm</p> <p><code>fun Date.Companion.now(clock: Clock): Date</code></p> <p>Gets the current Date from the provided clock.</p> <p>jvm</p> <p><code>fun DateTime.Companion.now(clock: Clock): DateTime</code></p> <p>Gets the current DateTime from the provided clock.</p> <p>jvm</p> <p><code>fun OffsetDateTime.Companion.now(clock: Clock): OffsetDateTime</code></p> <p>Gets the current OffsetDateTime from the provided clock.</p> <p>jvm</p> <p><code>fun ZonedDateTime.Companion.now(clock: Clock): ZonedDateTime</code></p> <p>Gets the current ZonedDateTime from the provided clock.</p> <p>jvm</p> <p><code>fun Time.Companion.now(clock: Clock): Time</code></p> <p>Gets the current Time from the provided clock.</p> <p>jvm</p> <p><code>fun OffsetTime.Companion.now(clock: Clock): OffsetTime</code></p> <p>Gets the current OffsetTime from the provided clock.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-date-time/","title":"toIslandDateTime","text":"<p>//core/io.islandtime.jvm/toIslandDateTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-date-time/#toislanddatetime","title":"toIslandDateTime","text":"<p>jvm</p> <p><code>fun LocalDateTime.toIslandDateTime(): DateTime</code></p> <p>Converts this date-time to an equivalent Island Time DateTime.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-date/","title":"toIslandDate","text":"<p>//core/io.islandtime.jvm/toIslandDate</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-date/#toislanddate","title":"toIslandDate","text":"<p>jvm</p> <p><code>fun LocalDate.toIslandDate(): Date</code></p> <p>Converts this date to an equivalent Island Time Date.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-duration/","title":"toIslandDuration","text":"<p>//core/io.islandtime.jvm/toIslandDuration</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-duration/#toislandduration","title":"toIslandDuration","text":"<p>jvm</p> <p><code>fun Duration.toIslandDuration(): Duration</code></p> <p>Converts this duration to an equivalent Island Time Duration.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-instant/","title":"toIslandInstant","text":"<p>//core/io.islandtime.jvm/toIslandInstant</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-instant/#toislandinstant","title":"toIslandInstant","text":"<p>jvm</p> <p><code>fun Instant.toIslandInstant(): Instant</code></p> <p>Converts this instant to an equivalent Island Time Instant.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-offset-date-time/","title":"toIslandOffsetDateTime","text":"<p>//core/io.islandtime.jvm/toIslandOffsetDateTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-offset-date-time/#toislandoffsetdatetime","title":"toIslandOffsetDateTime","text":"<p>jvm</p> <p><code>fun OffsetDateTime.toIslandOffsetDateTime(): OffsetDateTime</code></p> <p>Converts this date-time to an equivalent Island Time OffsetDateTime.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-offset-time/","title":"toIslandOffsetTime","text":"<p>//core/io.islandtime.jvm/toIslandOffsetTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-offset-time/#toislandoffsettime","title":"toIslandOffsetTime","text":"<p>jvm</p> <p><code>fun OffsetTime.toIslandOffsetTime(): OffsetTime</code></p> <p>Converts this time to an equivalent Island Time OffsetTime.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-period/","title":"toIslandPeriod","text":"<p>//core/io.islandtime.jvm/toIslandPeriod</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-period/#toislandperiod","title":"toIslandPeriod","text":"<p>jvm</p> <p><code>fun Period.toIslandPeriod(): Period</code></p> <p>Converts this period to an equivalent Island Time Period.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-time-zone/","title":"toIslandTimeZone","text":"<p>//core/io.islandtime.jvm/toIslandTimeZone</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-time-zone/#toislandtimezone","title":"toIslandTimeZone","text":"<p>jvm</p> <p><code>fun ZoneId.toIslandTimeZone(): TimeZone</code></p> <p>Converts this time zone to an equivalent Island Time TimeZone.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-time/","title":"toIslandTime","text":"<p>//core/io.islandtime.jvm/toIslandTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-time/#toislandtime","title":"toIslandTime","text":"<p>jvm</p> <p><code>fun LocalTime.toIslandTime(): Time</code></p> <p>Converts this time to an equivalent Island Time Time.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-utc-offset/","title":"toIslandUtcOffset","text":"<p>//core/io.islandtime.jvm/toIslandUtcOffset</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-utc-offset/#toislandutcoffset","title":"toIslandUtcOffset","text":"<p>jvm</p> <p><code>fun ZoneOffset.toIslandUtcOffset(): UtcOffset</code></p> <p>Converts this UTC offset to an equivalent Island Time UtcOffset.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-year-month/","title":"toIslandYearMonth","text":"<p>//core/io.islandtime.jvm/toIslandYearMonth</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-year-month/#toislandyearmonth","title":"toIslandYearMonth","text":"<p>jvm</p> <p><code>fun YearMonth.toIslandYearMonth(): YearMonth</code></p> <p>Converts this year-month to an equivalent Island Time YearMonth.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-year/","title":"toIslandYear","text":"<p>//core/io.islandtime.jvm/toIslandYear</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-year/#toislandyear","title":"toIslandYear","text":"<p>jvm</p> <p><code>fun Year.toIslandYear(): Year</code></p> <p>Converts this year to an equivalent Island Time Year.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-zoned-date-time/","title":"toIslandZonedDateTime","text":"<p>//core/io.islandtime.jvm/toIslandZonedDateTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-island-zoned-date-time/#toislandzoneddatetime","title":"toIslandZonedDateTime","text":"<p>jvm</p> <p><code>fun ZonedDateTime.toIslandZonedDateTime(): ZonedDateTime</code></p> <p>Converts this date-time to an equivalent Island Time ZonedDateTime.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-duration/","title":"toJavaDuration","text":"<p>//core/io.islandtime.jvm/toJavaDuration</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-duration/#tojavaduration","title":"toJavaDuration","text":"<p>jvm</p> <p><code>fun Duration.toJavaDuration(): Duration</code></p> <p><code>fun Days.toJavaDuration(): Duration</code></p> <p><code>fun Hours.toJavaDuration(): Duration</code></p> <p><code>fun Minutes.toJavaDuration(): Duration</code></p> <p><code>fun Seconds.toJavaDuration(): Duration</code></p> <p><code>fun Milliseconds.toJavaDuration(): Duration</code></p> <p><code>fun Microseconds.toJavaDuration(): Duration</code></p> <p><code>fun Nanoseconds.toJavaDuration(): Duration</code></p> <p>Converts this duration to an equivalent Java <code>Duration</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-instant/","title":"toJavaInstant","text":"<p>//core/io.islandtime.jvm/toJavaInstant</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-instant/#tojavainstant","title":"toJavaInstant","text":"<p>jvm</p> <p><code>fun Instant.toJavaInstant(): Instant</code></p> <p>Converts this instant to an equivalent Java <code>Instant</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-local-date-time/","title":"toJavaLocalDateTime","text":"<p>//core/io.islandtime.jvm/toJavaLocalDateTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-local-date-time/#tojavalocaldatetime","title":"toJavaLocalDateTime","text":"<p>jvm</p> <p><code>fun DateTime.toJavaLocalDateTime(): LocalDateTime</code></p> <p>Converts this date-time to an equivalent Java <code>LocalDateTime</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-local-date/","title":"toJavaLocalDate","text":"<p>//core/io.islandtime.jvm/toJavaLocalDate</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-local-date/#tojavalocaldate","title":"toJavaLocalDate","text":"<p>jvm</p> <p><code>fun Date.toJavaLocalDate(): LocalDate</code></p> <p>Converts this date to an equivalent Java <code>LocalDate</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-local-time/","title":"toJavaLocalTime","text":"<p>//core/io.islandtime.jvm/toJavaLocalTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-local-time/#tojavalocaltime","title":"toJavaLocalTime","text":"<p>jvm</p> <p><code>fun Time.toJavaLocalTime(): LocalTime</code></p> <p>Converts this time to an equivalent Java <code>LocalTime</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-offset-date-time/","title":"toJavaOffsetDateTime","text":"<p>//core/io.islandtime.jvm/toJavaOffsetDateTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-offset-date-time/#tojavaoffsetdatetime","title":"toJavaOffsetDateTime","text":"<p>jvm</p> <p><code>fun OffsetDateTime.toJavaOffsetDateTime(): OffsetDateTime</code></p> <p>Converts this date-time to an equivalent Java <code>OffsetDateTime</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-offset-time/","title":"toJavaOffsetTime","text":"<p>//core/io.islandtime.jvm/toJavaOffsetTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-offset-time/#tojavaoffsettime","title":"toJavaOffsetTime","text":"<p>jvm</p> <p><code>fun OffsetTime.toJavaOffsetTime(): OffsetTime</code></p> <p>Converts this time to an equivalent Java <code>OffsetTime</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-period/","title":"toJavaPeriod","text":"<p>//core/io.islandtime.jvm/toJavaPeriod</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-period/#tojavaperiod","title":"toJavaPeriod","text":"<p>jvm</p> <p><code>fun Period.toJavaPeriod(): Period</code></p> <p>Converts this period to an equivalent Java <code>Period</code>.</p> <p>jvm</p> <p><code>fun Centuries.toJavaPeriod(): Period</code></p> <p><code>fun Decades.toJavaPeriod(): Period</code></p> <p><code>fun Years.toJavaPeriod(): Period</code></p> <p><code>fun Months.toJavaPeriod(): Period</code></p> <p><code>fun Weeks.toJavaPeriod(): Period</code></p> <p><code>fun Days.toJavaPeriod(): Period</code></p> <p>Converts this duration to an equivalent Java <code>Period</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-year-month/","title":"toJavaYearMonth","text":"<p>//core/io.islandtime.jvm/toJavaYearMonth</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-year-month/#tojavayearmonth","title":"toJavaYearMonth","text":"<p>jvm</p> <p><code>fun YearMonth.toJavaYearMonth(): YearMonth</code></p> <p>Converts this year-month to an equivalent Java <code>YearMonth</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-year/","title":"toJavaYear","text":"<p>//core/io.islandtime.jvm/toJavaYear</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-year/#tojavayear","title":"toJavaYear","text":"<p>jvm</p> <p><code>fun Year.toJavaYear(): Year</code></p> <p>Converts this year to an equivalent Java <code>Year</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-zone-id/","title":"toJavaZoneId","text":"<p>//core/io.islandtime.jvm/toJavaZoneId</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-zone-id/#tojavazoneid","title":"toJavaZoneId","text":"<p>jvm</p> <p><code>fun TimeZone.toJavaZoneId(): ZoneId</code></p> <p>Converts this time zone to an equivalent Java <code>ZoneId</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-zone-offset/","title":"toJavaZoneOffset","text":"<p>//core/io.islandtime.jvm/toJavaZoneOffset</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-zone-offset/#tojavazoneoffset","title":"toJavaZoneOffset","text":"<p>jvm</p> <p><code>fun UtcOffset.toJavaZoneOffset(): ZoneOffset</code></p> <p>Converts this UTC offset to an equivalent Java <code>ZoneOffset</code>.</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-zoned-date-time/","title":"toJavaZonedDateTime","text":"<p>//core/io.islandtime.jvm/toJavaZonedDateTime</p>"},{"location":"api/core/core/io.islandtime.jvm/to-java-zoned-date-time/#tojavazoneddatetime","title":"toJavaZonedDateTime","text":"<p>jvm</p> <p><code>fun ZonedDateTime.toJavaZonedDateTime(): ZonedDateTime</code></p> <p>Converts this date-time to an equivalent Java <code>ZonedDateTime</code>.</p>"},{"location":"api/core/core/io.islandtime.locale/","title":"io.islandtime.locale","text":"<p>//core/io.islandtime.locale</p>"},{"location":"api/core/core/io.islandtime.locale/#package-level-declarations","title":"Package-level declarations","text":"<p>common darwin jvm</p> <p>Platform-independent locale.</p>"},{"location":"api/core/core/io.islandtime.locale/#types","title":"Types","text":"Name Summary Locale <p>common</p><code>expect class Locale</code>A locale.<p>darwin jvm</p><p>darwin</p><code>actual typealias Locale = &lt;Error class: unknown class&gt;</code><p>jvm</p><code>actual typealias Locale = java.util.Locale</code>"},{"location":"api/core/core/io.islandtime.locale/#functions","title":"Functions","text":"Name Summary defaultLocale <p>common</p><code>expect fun defaultLocale(): Locale</code>Gets the current Locale.<p>darwin jvm</p><p>darwin jvm</p><code>actual fun defaultLocale(): Locale</code> toLocale <p>common</p><code>expect fun String.toLocale(): Locale</code>Converts an IETF BCP 47 language tag, such as \"en-US\" or \"de-DE\", to a Locale.<p>darwin jvm</p><p>darwin jvm</p><code>actual fun String.toLocale(): Locale</code>"},{"location":"api/core/core/io.islandtime.locale/default-locale/","title":"defaultLocale","text":"<p>//core/io.islandtime.locale/defaultLocale</p>"},{"location":"api/core/core/io.islandtime.locale/default-locale/#defaultlocale","title":"defaultLocale","text":"<p>common</p> <p><code>expect fun defaultLocale(): Locale</code></p> <p>Gets the current Locale.</p> <p>On the JVM, the <code>Category</code> is not used in order to support older Android versions.</p> <p>darwin jvm</p> <p>darwin jvm</p> <p><code>actual fun defaultLocale(): Locale</code></p>"},{"location":"api/core/core/io.islandtime.locale/to-locale/","title":"toLocale","text":"<p>//core/io.islandtime.locale/toLocale</p>"},{"location":"api/core/core/io.islandtime.locale/to-locale/#tolocale","title":"toLocale","text":"<p>common</p> <p><code>expect fun String.toLocale(): Locale</code></p> <p>Converts an IETF BCP 47 language tag, such as \"en-US\" or \"de-DE\", to a Locale.</p> <p>darwin jvm</p> <p>darwin jvm</p> <p><code>actual fun String.toLocale(): Locale</code></p>"},{"location":"api/core/core/io.islandtime.locale/-locale/","title":"Locale","text":"<p>//core/io.islandtime.locale/Locale</p>"},{"location":"api/core/core/io.islandtime.locale/-locale/#locale","title":"Locale","text":"<p>common</p> <p><code>expect class Locale</code></p> <p>A locale.</p> <p>On the JVM, this maps to <code>java.util.Locale</code>. On Apple platforms, this maps to <code>NSLocale</code>.</p> <p>darwin</p> <p><code>actual typealias Locale = &lt;Error class: unknown class&gt;</code></p> <p>jvm</p> <p><code>actual typealias Locale = java.util.Locale</code></p>"},{"location":"api/core/core/io.islandtime.locale/-locale/#properties","title":"Properties","text":"Name Summary numberStyle <p>common</p><code>expect val Locale.numberStyle: NumberStyle</code>The NumberStyle associated with this locale. weekSettings <p>common</p><code>expect val Locale.weekSettings: WeekSettings</code>The default WeekSettings associated with this locale."},{"location":"api/core/core/io.islandtime.measures/","title":"io.islandtime.measures","text":"<p>//core/io.islandtime.measures</p>"},{"location":"api/core/core/io.islandtime.measures/#package-level-declarations","title":"Package-level declarations","text":"<p>common</p> <p>Classes related to the measurement of time, including <code>Duration</code>, <code>Period</code>, and more specific units, such as <code>Hours</code> or <code>Years</code>.</p>"},{"location":"api/core/core/io.islandtime.measures/#types","title":"Types","text":"Name Summary Centuries <p>common</p><code>@JvmInlinevalue class Centuries(val value: Long) : Comparable&lt;Centuries&gt; </code> Days <p>common</p><code>@JvmInlinevalue class Days(val value: Long) : Comparable&lt;Days&gt; </code> Decades <p>common</p><code>@JvmInlinevalue class Decades(val value: Long) : Comparable&lt;Decades&gt; </code> Duration <p>common</p><code>@Serializable(with = DurationIsoSerializer::class)class Duration : Comparable&lt;Duration&gt; </code>A duration of time at nanosecond precision. Hours <p>common</p><code>@JvmInlinevalue class Hours(val value: Long) : Comparable&lt;Hours&gt; </code> Microseconds <p>common</p><code>@JvmInlinevalue class Microseconds(val value: Long) : Comparable&lt;Microseconds&gt; </code> Milliseconds <p>common</p><code>@JvmInlinevalue class Milliseconds(val value: Long) : Comparable&lt;Milliseconds&gt; </code> Minutes <p>common</p><code>@JvmInlinevalue class Minutes(val value: Long) : Comparable&lt;Minutes&gt; </code> Months <p>common</p><code>@JvmInlinevalue class Months(val value: Long) : Comparable&lt;Months&gt; </code> Nanoseconds <p>common</p><code>@JvmInlinevalue class Nanoseconds(val value: Long) : Comparable&lt;Nanoseconds&gt; </code> Period <p>common</p><code>@Serializable(with = PeriodIsoSerializer::class)class Period</code>A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration, which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences. Seconds <p>common</p><code>@JvmInlinevalue class Seconds(val value: Long) : Comparable&lt;Seconds&gt; </code> TimeUnit <p>common</p><code>enum TimeUnit : Enum&lt;TimeUnit&gt; </code>A unit of time measurement. Weeks <p>common</p><code>@JvmInlinevalue class Weeks(val value: Long) : Comparable&lt;Weeks&gt; </code> Years <p>common</p><code>@JvmInlinevalue class Years(val value: Long) : Comparable&lt;Years&gt; </code>"},{"location":"api/core/core/io.islandtime.measures/#properties","title":"Properties","text":"Name Summary centuries <p>common</p><code>val Int.centuries: Centuries</code><code>val Long.centuries: Centuries</code>Converts this value to a duration of centuries. days <p>common</p><code>val Int.days: Days</code><code>val Long.days: Days</code>Converts this value to a duration of days. decades <p>common</p><code>val Int.decades: Decades</code><code>val Long.decades: Decades</code>Converts this value to a duration of decades. hours <p>common</p><code>val Int.hours: Hours</code><code>val Long.hours: Hours</code>Converts this value to a duration of hours. microseconds <p>common</p><code>val Int.microseconds: Microseconds</code><code>val Long.microseconds: Microseconds</code>Converts this value to a duration of microseconds. milliseconds <p>common</p><code>val Int.milliseconds: Milliseconds</code><code>val Long.milliseconds: Milliseconds</code>Converts this value to a duration of milliseconds. minutes <p>common</p><code>val Int.minutes: Minutes</code><code>val Long.minutes: Minutes</code>Converts this value to a duration of minutes. months <p>common</p><code>val Int.months: Months</code><code>val Long.months: Months</code>Converts this value to a duration of months. nanoseconds <p>common</p><code>val Int.nanoseconds: Nanoseconds</code><code>val Long.nanoseconds: Nanoseconds</code>Converts this value to a duration of nanoseconds. seconds <p>common</p><code>val Int.seconds: Seconds</code><code>val Long.seconds: Seconds</code>Converts this value to a duration of seconds. weeks <p>common</p><code>val Int.weeks: Weeks</code><code>val Long.weeks: Weeks</code>Converts this value to a duration of weeks. years <p>common</p><code>val Int.years: Years</code><code>val Long.years: Years</code>Converts this value to a duration of years."},{"location":"api/core/core/io.islandtime.measures/#functions","title":"Functions","text":"Name Summary abs <p>common</p><code>fun abs(duration: Duration): Duration</code>Returns the absolute value of a duration. asDuration <p>common</p><code>fun Days.asDuration(): Duration</code><code>fun Hours.asDuration(): Duration</code><code>fun Microseconds.asDuration(): Duration</code><code>fun Milliseconds.asDuration(): Duration</code><code>fun Minutes.asDuration(): Duration</code><code>fun Nanoseconds.asDuration(): Duration</code><code>fun Seconds.asDuration(): Duration</code> asPeriod <p>common</p><code>fun Days.asPeriod(): Period</code>Converts this duration into a Period with the same number of days.<p>common</p><code>fun Months.asPeriod(): Period</code>Converts this duration into a Period with the same number of months.<p>common</p><code>fun Weeks.asPeriod(): Period</code>Converts this duration into a Period with the same number of weeks.<p>common</p><code>fun Years.asPeriod(): Period</code>Converts this duration into a Period with the same number of years. durationOf <p>common</p><code>fun durationOf(days: Days): Duration</code>Creates a Duration of 24-hour days.<p>common</p><code>fun durationOf(hours: Hours): Duration</code>Creates a Duration of hours.<p>common</p><code>fun durationOf(microseconds: Microseconds): Duration</code>Creates a Duration of microseconds.<p>common</p><code>fun durationOf(milliseconds: Milliseconds): Duration</code>Creates a Duration of milliseconds.<p>common</p><code>fun durationOf(minutes: Minutes): Duration</code>Creates a Duration of minutes.<p>common</p><code>fun durationOf(nanoseconds: Nanoseconds): Duration</code>Creates a Duration of nanoseconds.<p>common</p><code>fun durationOf(seconds: Seconds): Duration</code>Creates a Duration of seconds.<p>common</p><code>fun durationOf(seconds: Seconds, nanoseconds: Nanoseconds): Duration</code>Creates a Duration. minus <p>common</p><code>operator fun Days.minus(period: Period): Period</code><code>operator fun Months.minus(period: Period): Period</code><code>operator fun Weeks.minus(period: Period): Period</code><code>operator fun Years.minus(period: Period): Period</code> periodOf <p>common</p><code>fun periodOf(days: Days): Period</code><code>fun periodOf(weeks: Weeks): Period</code><code>fun periodOf(months: Months, days: Days = 0.days): Period</code><code>fun periodOf(years: Years, days: Days): Period</code><code>fun periodOf(years: Years, months: Months = 0.months, days: Days = 0.days): Period</code>Creates a Period. plus <p>common</p><code>operator fun Days.plus(period: Period): Period</code><code>operator fun Months.plus(period: Period): Period</code><code>operator fun Weeks.plus(period: Period): Period</code><code>operator fun Years.plus(period: Period): Period</code> times <p>common</p><code>operator fun Int.times(centuries: Centuries): Centuries</code><code>operator fun Long.times(centuries: Centuries): Centuries</code>Multiplies this value by a duration of centuries.<p>common</p><code>operator fun Int.times(days: Days): Days</code><code>operator fun Long.times(days: Days): Days</code>Multiplies this value by a duration of days.<p>common</p><code>operator fun Int.times(decades: Decades): Decades</code><code>operator fun Long.times(decades: Decades): Decades</code>Multiplies this value by a duration of decades.<p>common</p><code>operator fun Int.times(duration: Duration): Duration</code>Multiplies this value by a duration.<p>common</p><code>operator fun Int.times(hours: Hours): Hours</code><code>operator fun Long.times(hours: Hours): Hours</code>Multiplies this value by a duration of hours.<p>common</p><code>operator fun Int.times(microseconds: Microseconds): Microseconds</code><code>operator fun Long.times(microseconds: Microseconds): Microseconds</code>Multiplies this value by a duration of microseconds.<p>common</p><code>operator fun Int.times(milliseconds: Milliseconds): Milliseconds</code><code>operator fun Long.times(milliseconds: Milliseconds): Milliseconds</code>Multiplies this value by a duration of milliseconds.<p>common</p><code>operator fun Int.times(minutes: Minutes): Minutes</code><code>operator fun Long.times(minutes: Minutes): Minutes</code>Multiplies this value by a duration of minutes.<p>common</p><code>operator fun Int.times(months: Months): Months</code><code>operator fun Long.times(months: Months): Months</code>Multiplies this value by a duration of months.<p>common</p><code>operator fun Int.times(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun Long.times(nanoseconds: Nanoseconds): Nanoseconds</code>Multiplies this value by a duration of nanoseconds.<p>common</p><code>operator fun Int.times(period: Period): Period</code><code>operator fun Long.times(period: Period): Period</code><p>common</p><code>operator fun Int.times(seconds: Seconds): Seconds</code><code>operator fun Long.times(seconds: Seconds): Seconds</code>Multiplies this value by a duration of seconds.<p>common</p><code>operator fun Int.times(weeks: Weeks): Weeks</code><code>operator fun Long.times(weeks: Weeks): Weeks</code>Multiplies this value by a duration of weeks.<p>common</p><code>operator fun Int.times(years: Years): Years</code><code>operator fun Long.times(years: Years): Years</code>Multiplies this value by a duration of years. toDuration <p>common</p><code>fun String.toDuration(): Duration</code>Converts an ISO-8601 duration string to a Duration.<p>common</p><code>fun String.toDuration(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration</code>Converts a string to a Duration using parser. toIslandDays <p>common</p><code>fun Duration.toIslandDays(): Days</code>Converts this duration to Island Time Days. toIslandDuration <p>common</p><code>fun Duration.toIslandDuration(): Duration</code>Converts this duration to an equivalent Island Time Duration. toIslandHours <p>common</p><code>fun Duration.toIslandHours(): Hours</code>Converts this duration to Island Time Hours. toIslandMicroseconds <p>common</p><code>fun Duration.toIslandMicroseconds(): Microseconds</code>Converts this duration to Island Time Microseconds. toIslandMilliseconds <p>common</p><code>fun Duration.toIslandMilliseconds(): Milliseconds</code>Converts this duration to Island Time Milliseconds. toIslandMinutes <p>common</p><code>fun Duration.toIslandMinutes(): Minutes</code>Converts this duration to Island Time Minutes. toIslandNanoseconds <p>common</p><code>fun Duration.toIslandNanoseconds(): Nanoseconds</code>Converts this duration to Island Time Nanoseconds. toIslandSeconds <p>common</p><code>fun Duration.toIslandSeconds(): Seconds</code>Converts this duration to Island Time Seconds. toPeriod <p>common</p><code>fun String.toPeriod(): Period</code><code>fun String.toPeriod(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period</code>"},{"location":"api/core/core/io.islandtime.measures/abs/","title":"abs","text":"<p>//core/io.islandtime.measures/abs</p>"},{"location":"api/core/core/io.islandtime.measures/abs/#abs","title":"abs","text":"<p>common</p> <p><code>fun abs(duration: Duration): Duration</code></p> <p>Returns the absolute value of a duration.</p>"},{"location":"api/core/core/io.islandtime.measures/as-duration/","title":"asDuration","text":"<p>//core/io.islandtime.measures/asDuration</p>"},{"location":"api/core/core/io.islandtime.measures/as-duration/#asduration","title":"asDuration","text":"<p>common</p> <p><code>fun Days.asDuration(): Duration</code></p> <p><code>fun Hours.asDuration(): Duration</code></p> <p><code>fun Minutes.asDuration(): Duration</code></p> <p><code>fun Seconds.asDuration(): Duration</code></p> <p><code>fun Milliseconds.asDuration(): Duration</code></p> <p><code>fun Microseconds.asDuration(): Duration</code></p> <p><code>fun Nanoseconds.asDuration(): Duration</code></p>"},{"location":"api/core/core/io.islandtime.measures/as-period/","title":"asPeriod","text":"<p>//core/io.islandtime.measures/asPeriod</p>"},{"location":"api/core/core/io.islandtime.measures/as-period/#asperiod","title":"asPeriod","text":"<p>common</p> <p><code>fun Years.asPeriod(): Period</code></p> <p>Converts this duration into a Period with the same number of years.</p> <p>common</p> <p><code>fun Months.asPeriod(): Period</code></p> <p>Converts this duration into a Period with the same number of months.</p> <p>common</p> <p><code>fun Weeks.asPeriod(): Period</code></p> <p>Converts this duration into a Period with the same number of weeks.</p>"},{"location":"api/core/core/io.islandtime.measures/as-period/#throws","title":"Throws","text":"ArithmeticException if the resulting Period would overflow <p>common</p> <p><code>fun Days.asPeriod(): Period</code></p> <p>Converts this duration into a Period with the same number of days.</p>"},{"location":"api/core/core/io.islandtime.measures/centuries/","title":"centuries","text":"<p>//core/io.islandtime.measures/centuries</p>"},{"location":"api/core/core/io.islandtime.measures/centuries/#centuries","title":"centuries","text":"<p>common</p> <p><code>val Int.centuries: Centuries</code></p> <p><code>val Long.centuries: Centuries</code></p> <p>Converts this value to a duration of centuries.</p>"},{"location":"api/core/core/io.islandtime.measures/days/","title":"days","text":"<p>//core/io.islandtime.measures/days</p>"},{"location":"api/core/core/io.islandtime.measures/days/#days","title":"days","text":"<p>common</p> <p><code>val Int.days: Days</code></p> <p><code>val Long.days: Days</code></p> <p>Converts this value to a duration of days.</p>"},{"location":"api/core/core/io.islandtime.measures/decades/","title":"decades","text":"<p>//core/io.islandtime.measures/decades</p>"},{"location":"api/core/core/io.islandtime.measures/decades/#decades","title":"decades","text":"<p>common</p> <p><code>val Int.decades: Decades</code></p> <p><code>val Long.decades: Decades</code></p> <p>Converts this value to a duration of decades.</p>"},{"location":"api/core/core/io.islandtime.measures/duration-of/","title":"durationOf","text":"<p>//core/io.islandtime.measures/durationOf</p>"},{"location":"api/core/core/io.islandtime.measures/duration-of/#durationof","title":"durationOf","text":"<p>common</p> <p><code>fun durationOf(seconds: Seconds, nanoseconds: Nanoseconds): Duration</code></p> <p>Creates a Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/duration-of/#parameters","title":"Parameters","text":"<p>common</p> seconds the number of seconds in the duration nanoseconds the number of additional nanoseconds to be applied on top of seconds <p>common</p> <p><code>fun durationOf(days: Days): Duration</code></p> <p>Creates a Duration of 24-hour days.</p>"},{"location":"api/core/core/io.islandtime.measures/duration-of/#throws","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>fun durationOf(hours: Hours): Duration</code></p> <p>Creates a Duration of hours.</p>"},{"location":"api/core/core/io.islandtime.measures/duration-of/#throws_1","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>fun durationOf(minutes: Minutes): Duration</code></p> <p>Creates a Duration of minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/duration-of/#throws_2","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>fun durationOf(seconds: Seconds): Duration</code></p> <p>Creates a Duration of seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/duration-of/#throws_3","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>fun durationOf(milliseconds: Milliseconds): Duration</code></p> <p>Creates a Duration of milliseconds.</p> <p>common</p> <p><code>fun durationOf(microseconds: Microseconds): Duration</code></p> <p>Creates a Duration of microseconds.</p> <p>common</p> <p><code>fun durationOf(nanoseconds: Nanoseconds): Duration</code></p> <p>Creates a Duration of nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/hours/","title":"hours","text":"<p>//core/io.islandtime.measures/hours</p>"},{"location":"api/core/core/io.islandtime.measures/hours/#hours","title":"hours","text":"<p>common</p> <p><code>val Int.hours: Hours</code></p> <p><code>val Long.hours: Hours</code></p> <p>Converts this value to a duration of hours.</p>"},{"location":"api/core/core/io.islandtime.measures/microseconds/","title":"microseconds","text":"<p>//core/io.islandtime.measures/microseconds</p>"},{"location":"api/core/core/io.islandtime.measures/microseconds/#microseconds","title":"microseconds","text":"<p>common</p> <p><code>val Int.microseconds: Microseconds</code></p> <p><code>val Long.microseconds: Microseconds</code></p> <p>Converts this value to a duration of microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/milliseconds/","title":"milliseconds","text":"<p>//core/io.islandtime.measures/milliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/milliseconds/#milliseconds","title":"milliseconds","text":"<p>common</p> <p><code>val Int.milliseconds: Milliseconds</code></p> <p><code>val Long.milliseconds: Milliseconds</code></p> <p>Converts this value to a duration of milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/minus</p>"},{"location":"api/core/core/io.islandtime.measures/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun Years.minus(period: Period): Period</code></p> <p><code>operator fun Months.minus(period: Period): Period</code></p> <p><code>operator fun Weeks.minus(period: Period): Period</code></p> <p><code>operator fun Days.minus(period: Period): Period</code></p>"},{"location":"api/core/core/io.islandtime.measures/minutes/","title":"minutes","text":"<p>//core/io.islandtime.measures/minutes</p>"},{"location":"api/core/core/io.islandtime.measures/minutes/#minutes","title":"minutes","text":"<p>common</p> <p><code>val Int.minutes: Minutes</code></p> <p><code>val Long.minutes: Minutes</code></p> <p>Converts this value to a duration of minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/months/","title":"months","text":"<p>//core/io.islandtime.measures/months</p>"},{"location":"api/core/core/io.islandtime.measures/months/#months","title":"months","text":"<p>common</p> <p><code>val Int.months: Months</code></p> <p><code>val Long.months: Months</code></p> <p>Converts this value to a duration of months.</p>"},{"location":"api/core/core/io.islandtime.measures/nanoseconds/","title":"nanoseconds","text":"<p>//core/io.islandtime.measures/nanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/nanoseconds/#nanoseconds","title":"nanoseconds","text":"<p>common</p> <p><code>val Int.nanoseconds: Nanoseconds</code></p> <p><code>val Long.nanoseconds: Nanoseconds</code></p> <p>Converts this value to a duration of nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/period-of/","title":"periodOf","text":"<p>//core/io.islandtime.measures/periodOf</p>"},{"location":"api/core/core/io.islandtime.measures/period-of/#periodof","title":"periodOf","text":"<p>common</p> <p><code>fun periodOf(years: Years, months: Months = 0.months, days: Days = 0.days): Period</code></p> <p><code>fun periodOf(years: Years, days: Days): Period</code></p> <p><code>fun periodOf(months: Months, days: Days = 0.days): Period</code></p> <p><code>fun periodOf(days: Days): Period</code></p> <p>Creates a Period.</p> <p>common</p> <p><code>fun periodOf(weeks: Weeks): Period</code></p> <p>Creates a Period.</p>"},{"location":"api/core/core/io.islandtime.measures/period-of/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/plus</p>"},{"location":"api/core/core/io.islandtime.measures/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun Years.plus(period: Period): Period</code></p> <p><code>operator fun Months.plus(period: Period): Period</code></p> <p><code>operator fun Weeks.plus(period: Period): Period</code></p> <p><code>operator fun Days.plus(period: Period): Period</code></p>"},{"location":"api/core/core/io.islandtime.measures/seconds/","title":"seconds","text":"<p>//core/io.islandtime.measures/seconds</p>"},{"location":"api/core/core/io.islandtime.measures/seconds/#seconds","title":"seconds","text":"<p>common</p> <p><code>val Int.seconds: Seconds</code></p> <p><code>val Long.seconds: Seconds</code></p> <p>Converts this value to a duration of seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/times/","title":"times","text":"<p>//core/io.islandtime.measures/times</p>"},{"location":"api/core/core/io.islandtime.measures/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun Int.times(centuries: Centuries): Centuries</code></p> <p><code>operator fun Long.times(centuries: Centuries): Centuries</code></p> <p>Multiplies this value by a duration of centuries.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(days: Days): Days</code></p> <p><code>operator fun Long.times(days: Days): Days</code></p> <p>Multiplies this value by a duration of days.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_1","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(decades: Decades): Decades</code></p> <p><code>operator fun Long.times(decades: Decades): Decades</code></p> <p>Multiplies this value by a duration of decades.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_2","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(hours: Hours): Hours</code></p> <p><code>operator fun Long.times(hours: Hours): Hours</code></p> <p>Multiplies this value by a duration of hours.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_3","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun Long.times(microseconds: Microseconds): Microseconds</code></p> <p>Multiplies this value by a duration of microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_4","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun Long.times(milliseconds: Milliseconds): Milliseconds</code></p> <p>Multiplies this value by a duration of milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_5","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(minutes: Minutes): Minutes</code></p> <p><code>operator fun Long.times(minutes: Minutes): Minutes</code></p> <p>Multiplies this value by a duration of minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_6","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(months: Months): Months</code></p> <p><code>operator fun Long.times(months: Months): Months</code></p> <p>Multiplies this value by a duration of months.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_7","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun Long.times(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p>Multiplies this value by a duration of nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_8","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(seconds: Seconds): Seconds</code></p> <p><code>operator fun Long.times(seconds: Seconds): Seconds</code></p> <p>Multiplies this value by a duration of seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_9","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(weeks: Weeks): Weeks</code></p> <p><code>operator fun Long.times(weeks: Weeks): Weeks</code></p> <p>Multiplies this value by a duration of weeks.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_10","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(years: Years): Years</code></p> <p><code>operator fun Long.times(years: Years): Years</code></p> <p>Multiplies this value by a duration of years.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_11","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(duration: Duration): Duration</code></p> <p>Multiplies this value by a duration.</p>"},{"location":"api/core/core/io.islandtime.measures/times/#throws_12","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun Int.times(period: Period): Period</code></p> <p><code>operator fun Long.times(period: Period): Period</code></p>"},{"location":"api/core/core/io.islandtime.measures/to-duration/","title":"toDuration","text":"<p>//core/io.islandtime.measures/toDuration</p>"},{"location":"api/core/core/io.islandtime.measures/to-duration/#toduration","title":"toDuration","text":"<p>common</p> <p><code>fun String.toDuration(): Duration</code></p> <p>Converts an ISO-8601 duration string to a Duration.</p> <p>common</p> <p><code>fun String.toDuration(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Duration</code></p> <p>Converts a string to a Duration using parser.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-days/","title":"toIslandDays","text":"<p>//core/io.islandtime.measures/toIslandDays</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-days/#toislanddays","title":"toIslandDays","text":"<p>common</p> <p><code>fun Duration.toIslandDays(): Days</code></p> <p>Converts this duration to Island Time Days.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-duration/","title":"toIslandDuration","text":"<p>//core/io.islandtime.measures/toIslandDuration</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-duration/#toislandduration","title":"toIslandDuration","text":"<p>common</p> <p><code>fun Duration.toIslandDuration(): Duration</code></p> <p>Converts this duration to an equivalent Island Time Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-hours/","title":"toIslandHours","text":"<p>//core/io.islandtime.measures/toIslandHours</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-hours/#toislandhours","title":"toIslandHours","text":"<p>common</p> <p><code>fun Duration.toIslandHours(): Hours</code></p> <p>Converts this duration to Island Time Hours.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-microseconds/","title":"toIslandMicroseconds","text":"<p>//core/io.islandtime.measures/toIslandMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-microseconds/#toislandmicroseconds","title":"toIslandMicroseconds","text":"<p>common</p> <p><code>fun Duration.toIslandMicroseconds(): Microseconds</code></p> <p>Converts this duration to Island Time Microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-milliseconds/","title":"toIslandMilliseconds","text":"<p>//core/io.islandtime.measures/toIslandMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-milliseconds/#toislandmilliseconds","title":"toIslandMilliseconds","text":"<p>common</p> <p><code>fun Duration.toIslandMilliseconds(): Milliseconds</code></p> <p>Converts this duration to Island Time Milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-minutes/","title":"toIslandMinutes","text":"<p>//core/io.islandtime.measures/toIslandMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-minutes/#toislandminutes","title":"toIslandMinutes","text":"<p>common</p> <p><code>fun Duration.toIslandMinutes(): Minutes</code></p> <p>Converts this duration to Island Time Minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-nanoseconds/","title":"toIslandNanoseconds","text":"<p>//core/io.islandtime.measures/toIslandNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-nanoseconds/#toislandnanoseconds","title":"toIslandNanoseconds","text":"<p>common</p> <p><code>fun Duration.toIslandNanoseconds(): Nanoseconds</code></p> <p>Converts this duration to Island Time Nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-seconds/","title":"toIslandSeconds","text":"<p>//core/io.islandtime.measures/toIslandSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/to-island-seconds/#toislandseconds","title":"toIslandSeconds","text":"<p>common</p> <p><code>fun Duration.toIslandSeconds(): Seconds</code></p> <p>Converts this duration to Island Time Seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/to-period/","title":"toPeriod","text":"<p>//core/io.islandtime.measures/toPeriod</p>"},{"location":"api/core/core/io.islandtime.measures/to-period/#toperiod","title":"toPeriod","text":"<p>common</p> <p><code>fun String.toPeriod(): Period</code></p> <p><code>fun String.toPeriod(parser: DateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): Period</code></p>"},{"location":"api/core/core/io.islandtime.measures/weeks/","title":"weeks","text":"<p>//core/io.islandtime.measures/weeks</p>"},{"location":"api/core/core/io.islandtime.measures/weeks/#weeks","title":"weeks","text":"<p>common</p> <p><code>val Int.weeks: Weeks</code></p> <p><code>val Long.weeks: Weeks</code></p> <p>Converts this value to a duration of weeks.</p>"},{"location":"api/core/core/io.islandtime.measures/years/","title":"years","text":"<p>//core/io.islandtime.measures/years</p>"},{"location":"api/core/core/io.islandtime.measures/years/#years","title":"years","text":"<p>common</p> <p><code>val Int.years: Years</code></p> <p><code>val Long.years: Years</code></p> <p>Converts this value to a duration of years.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/","title":"Centuries","text":"<p>//core/io.islandtime.measures/Centuries</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/#centuries","title":"Centuries","text":"<p>common</p> <p><code>@JvmInline <p>value class Centuries(val value: Long) : Comparable&lt;Centuries&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/#constructors","title":"Constructors","text":"Centuries <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-centuries/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-centuries/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Centuries</code>The absolute value of this duration. inDecades <p>common</p><code>val inDecades: Decades</code>Converts this duration to decades. inMonths <p>common</p><code>val inMonths: Months</code>Converts this duration to months. inYears <p>common</p><code>val inYears: Years</code>Converts this duration to years. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-centuries/#functions","title":"Functions","text":"Name Summary compareTo <p>common</p><code>open operator override fun compareTo(other: Centuries): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Centuries</code><code>operator fun div(scalar: Long): Centuries</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(centuries: Centuries): Centuries</code><code>operator fun minus(decades: Decades): Decades</code><code>operator fun minus(months: Months): Months</code><code>operator fun minus(years: Years): Years</code> plus <p>common</p><code>operator fun plus(centuries: Centuries): Centuries</code><code>operator fun plus(decades: Decades): Decades</code><code>operator fun plus(months: Months): Months</code><code>operator fun plus(years: Years): Years</code> rem <p>common</p><code>operator fun rem(scalar: Int): Centuries</code><code>operator fun rem(scalar: Long): Centuries</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Centuries</code><code>operator fun times(scalar: Long): Centuries</code>Multiplies this duration by a scalar value. toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaPeriod <p>jvm</p><code>fun Centuries.toJavaPeriod(): Period</code>Converts this duration to an equivalent Java <code>Period</code>. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Centuries</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-centuries/-centuries/","title":"Centuries","text":"<p>//core/io.islandtime.measures/Centuries/Centuries</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/-centuries/#centuries","title":"Centuries","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Centuries/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Centuries</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-centuries/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Centuries/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Centuries): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/div/","title":"div","text":"<p>//core/io.islandtime.measures/Centuries/div</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Centuries</code></p> <p><code>operator fun div(scalar: Long): Centuries</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-decades/","title":"inDecades","text":"<p>//core/io.islandtime.measures/Centuries/inDecades</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-decades/#indecades","title":"inDecades","text":"<p>common</p> <p><code>val inDecades: Decades</code></p> <p>Converts this duration to decades.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-decades/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-months/","title":"inMonths","text":"<p>//core/io.islandtime.measures/Centuries/inMonths</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-months/#inmonths","title":"inMonths","text":"<p>common</p> <p><code>val inMonths: Months</code></p> <p>Converts this duration to months.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-months/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-years/","title":"inYears","text":"<p>//core/io.islandtime.measures/Centuries/inYears</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-years/#inyears","title":"inYears","text":"<p>common</p> <p><code>val inYears: Years</code></p> <p>Converts this duration to years.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/in-years/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-centuries/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Centuries/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(months: Months): Months</code></p> <p><code>operator fun minus(years: Years): Years</code></p> <p><code>operator fun minus(decades: Decades): Decades</code></p> <p><code>operator fun minus(centuries: Centuries): Centuries</code></p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Centuries/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(months: Months): Months</code></p> <p><code>operator fun plus(years: Years): Years</code></p> <p><code>operator fun plus(decades: Decades): Decades</code></p> <p><code>operator fun plus(centuries: Centuries): Centuries</code></p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Centuries/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Centuries</code></p> <p><code>operator fun rem(scalar: Long): Centuries</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/times/","title":"times","text":"<p>//core/io.islandtime.measures/Centuries/times</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Centuries</code></p> <p><code>operator fun times(scalar: Long): Centuries</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Centuries/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Centuries/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Centuries/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Centuries/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Centuries/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Centuries</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-centuries/value/","title":"value","text":"<p>//core/io.islandtime.measures/Centuries/value</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Centuries/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Centuries</code>The largest supported value. MIN <p>common</p><code>val MIN: Centuries</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Centuries.Companion.between(start: Date, endExclusive: Date): Centuries</code>Returns the number of whole centuries between two dates.<p>common</p><code>fun Centuries.Companion.between(start: DateTime, endExclusive: DateTime): Centuries</code>Returns the number of whole centuries between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Centuries.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Centuries</code>Returns the number of whole centuries between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Centuries.Companion.between(start: Year, endExclusive: Year): Centuries</code>Returns the number of whole centuries between two years.<p>common</p><code>fun Centuries.Companion.between(start: YearMonth, endExclusive: YearMonth): Centuries</code>Returns the number of whole centuries between two year-months.<p>common</p><code>fun Centuries.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Centuries</code>Returns the number of whole centuries between two date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time."},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Centuries/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Centuries</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Centuries/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-centuries/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Centuries</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/","title":"Days","text":"<p>//core/io.islandtime.measures/Days</p>"},{"location":"api/core/core/io.islandtime.measures/-days/#days","title":"Days","text":"<p>common</p> <p><code>@JvmInline <p>value class Days(val value: Long) : Comparable&lt;Days&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-days/#constructors","title":"Constructors","text":"Days <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-days/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-days/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Days</code>The absolute value of this duration. inHours <p>common</p><code>val inHours: Hours</code>Converts this duration to hours. inMicroseconds <p>common</p><code>val inMicroseconds: Microseconds</code>Converts this duration to microseconds. inMilliseconds <p>common</p><code>val inMilliseconds: Milliseconds</code>Converts this duration to milliseconds. inMinutes <p>common</p><code>val inMinutes: Minutes</code>Converts this duration to minutes. inNanoseconds <p>common</p><code>val inNanoseconds: Nanoseconds</code>Converts this duration to nanoseconds. inSeconds <p>common</p><code>val inSeconds: Seconds</code>Converts this duration to seconds. inWholeWeeks <p>common</p><code>val inWholeWeeks: Weeks</code>Converts this duration to the number of whole weeks. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-days/#functions","title":"Functions","text":"Name Summary asDuration <p>common</p><code>fun Days.asDuration(): Duration</code> asPeriod <p>common</p><code>fun Days.asPeriod(): Period</code>Converts this duration into a Period with the same number of days. compareTo <p>common</p><code>open operator override fun compareTo(other: Days): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Days</code><code>operator fun div(scalar: Long): Days</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Days</code><code>operator fun minus(hours: Hours): Hours</code><code>operator fun minus(microseconds: Microseconds): Microseconds</code><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun minus(minutes: Minutes): Minutes</code><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun minus(seconds: Seconds): Seconds</code><code>operator fun minus(weeks: Weeks): Days</code> minus <p>common</p><code>operator fun Days.minus(period: Period): Period</code> plus <p>common</p><code>operator fun plus(days: Days): Days</code><code>operator fun plus(hours: Hours): Hours</code><code>operator fun plus(microseconds: Microseconds): Microseconds</code><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun plus(minutes: Minutes): Minutes</code><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun plus(seconds: Seconds): Seconds</code><code>operator fun plus(weeks: Weeks): Days</code> plus <p>common</p><code>operator fun Days.plus(period: Period): Period</code> rem <p>common</p><code>operator fun rem(scalar: Int): Days</code><code>operator fun rem(scalar: Long): Days</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Days</code><code>operator fun times(scalar: Long): Days</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (weeks: Weeks, days: Days) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (weeks: Long, days: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaDuration <p>jvm</p><code>fun Days.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toJavaPeriod <p>jvm</p><code>fun Days.toJavaPeriod(): Period</code>Converts this duration to an equivalent Java <code>Period</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toNSTimeInterval <p>darwin</p><code>fun Days.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Days</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-days/-days/","title":"Days","text":"<p>//core/io.islandtime.measures/Days/Days</p>"},{"location":"api/core/core/io.islandtime.measures/-days/-days/#days","title":"Days","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-days/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Days/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-days/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Days</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Days/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-days/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Days): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-days/div/","title":"div","text":"<p>//core/io.islandtime.measures/Days/div</p>"},{"location":"api/core/core/io.islandtime.measures/-days/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Days</code></p> <p><code>operator fun div(scalar: Long): Days</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-days/in-hours/","title":"inHours","text":"<p>//core/io.islandtime.measures/Days/inHours</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-hours/#inhours","title":"inHours","text":"<p>common</p> <p><code>val inHours: Hours</code></p> <p>Converts this duration to hours.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-hours/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/in-microseconds/","title":"inMicroseconds","text":"<p>//core/io.islandtime.measures/Days/inMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-microseconds/#inmicroseconds","title":"inMicroseconds","text":"<p>common</p> <p><code>val inMicroseconds: Microseconds</code></p> <p>Converts this duration to microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-microseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/in-milliseconds/","title":"inMilliseconds","text":"<p>//core/io.islandtime.measures/Days/inMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-milliseconds/#inmilliseconds","title":"inMilliseconds","text":"<p>common</p> <p><code>val inMilliseconds: Milliseconds</code></p> <p>Converts this duration to milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-milliseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/in-minutes/","title":"inMinutes","text":"<p>//core/io.islandtime.measures/Days/inMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-minutes/#inminutes","title":"inMinutes","text":"<p>common</p> <p><code>val inMinutes: Minutes</code></p> <p>Converts this duration to minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-minutes/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/in-nanoseconds/","title":"inNanoseconds","text":"<p>//core/io.islandtime.measures/Days/inNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-nanoseconds/#innanoseconds","title":"inNanoseconds","text":"<p>common</p> <p><code>val inNanoseconds: Nanoseconds</code></p> <p>Converts this duration to nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-nanoseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/in-seconds/","title":"inSeconds","text":"<p>//core/io.islandtime.measures/Days/inSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-seconds/#inseconds","title":"inSeconds","text":"<p>common</p> <p><code>val inSeconds: Seconds</code></p> <p>Converts this duration to seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-seconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/in-whole-weeks/","title":"inWholeWeeks","text":"<p>//core/io.islandtime.measures/Days/inWholeWeeks</p>"},{"location":"api/core/core/io.islandtime.measures/-days/in-whole-weeks/#inwholeweeks","title":"inWholeWeeks","text":"<p>common</p> <p><code>val inWholeWeeks: Weeks</code></p> <p>Converts this duration to the number of whole weeks.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Days/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-days/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun minus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun minus(seconds: Seconds): Seconds</code></p> <p><code>operator fun minus(minutes: Minutes): Minutes</code></p> <p><code>operator fun minus(hours: Hours): Hours</code></p> <p><code>operator fun minus(days: Days): Days</code></p> <p><code>operator fun minus(weeks: Weeks): Days</code></p>"},{"location":"api/core/core/io.islandtime.measures/-days/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Days/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-days/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun plus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun plus(seconds: Seconds): Seconds</code></p> <p><code>operator fun plus(minutes: Minutes): Minutes</code></p> <p><code>operator fun plus(hours: Hours): Hours</code></p> <p><code>operator fun plus(days: Days): Days</code></p> <p><code>operator fun plus(weeks: Weeks): Days</code></p>"},{"location":"api/core/core/io.islandtime.measures/-days/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Days/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-days/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Days</code></p> <p><code>operator fun rem(scalar: Long): Days</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/times/","title":"times","text":"<p>//core/io.islandtime.measures/Days/times</p>"},{"location":"api/core/core/io.islandtime.measures/-days/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Days</code></p> <p><code>operator fun times(scalar: Long): Days</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Days/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (weeks: Long, days: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Days/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (weeks: Weeks, days: Days) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Days/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Days/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Days/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Days/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Days/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-days/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Days/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-days/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Days</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-days/value/","title":"value","text":"<p>//core/io.islandtime.measures/Days/value</p>"},{"location":"api/core/core/io.islandtime.measures/-days/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Days/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-days/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-days/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Days</code>The largest supported value. MIN <p>common</p><code>val MIN: Days</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-days/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Days.Companion.between(start: Date, endExclusive: Date): Days</code>Returns the number of days between two dates.<p>common</p><code>fun Days.Companion.between(start: DateTime, endExclusive: DateTime): Days</code>Returns the number whole days between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Days.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Days</code>Returns the number whole days between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Days.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Days</code>Returns the number of whole days between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time."},{"location":"api/core/core/io.islandtime.measures/-days/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Days/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-days/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Days</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-days/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Days/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-days/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Days</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/","title":"Decades","text":"<p>//core/io.islandtime.measures/Decades</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/#decades","title":"Decades","text":"<p>common</p> <p><code>@JvmInline <p>value class Decades(val value: Long) : Comparable&lt;Decades&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-decades/#constructors","title":"Constructors","text":"Decades <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-decades/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-decades/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Decades</code>The absolute value of this duration. inMonths <p>common</p><code>val inMonths: Months</code>Converts this duration to months. inWholeCenturies <p>common</p><code>val inWholeCenturies: Centuries</code>Converts this duration to the number of whole centuries. inYears <p>common</p><code>val inYears: Years</code>Converts this duration to years. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-decades/#functions","title":"Functions","text":"Name Summary compareTo <p>common</p><code>open operator override fun compareTo(other: Decades): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Decades</code><code>operator fun div(scalar: Long): Decades</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(centuries: Centuries): Decades</code><code>operator fun minus(decades: Decades): Decades</code><code>operator fun minus(months: Months): Months</code><code>operator fun minus(years: Years): Years</code> plus <p>common</p><code>operator fun plus(centuries: Centuries): Decades</code><code>operator fun plus(decades: Decades): Decades</code><code>operator fun plus(months: Months): Months</code><code>operator fun plus(years: Years): Years</code> rem <p>common</p><code>operator fun rem(scalar: Int): Decades</code><code>operator fun rem(scalar: Long): Decades</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Decades</code><code>operator fun times(scalar: Long): Decades</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (centuries: Centuries, decades: Decades) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (centuries: Long, decades: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaPeriod <p>jvm</p><code>fun Decades.toJavaPeriod(): Period</code>Converts this duration to an equivalent Java <code>Period</code>. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Decades</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-decades/-decades/","title":"Decades","text":"<p>//core/io.islandtime.measures/Decades/Decades</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/-decades/#decades","title":"Decades","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-decades/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Decades/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Decades</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-decades/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Decades/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Decades): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-decades/div/","title":"div","text":"<p>//core/io.islandtime.measures/Decades/div</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Decades</code></p> <p><code>operator fun div(scalar: Long): Decades</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-decades/in-months/","title":"inMonths","text":"<p>//core/io.islandtime.measures/Decades/inMonths</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/in-months/#inmonths","title":"inMonths","text":"<p>common</p> <p><code>val inMonths: Months</code></p> <p>Converts this duration to months.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/in-months/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-decades/in-whole-centuries/","title":"inWholeCenturies","text":"<p>//core/io.islandtime.measures/Decades/inWholeCenturies</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/in-whole-centuries/#inwholecenturies","title":"inWholeCenturies","text":"<p>common</p> <p><code>val inWholeCenturies: Centuries</code></p> <p>Converts this duration to the number of whole centuries.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/in-years/","title":"inYears","text":"<p>//core/io.islandtime.measures/Decades/inYears</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/in-years/#inyears","title":"inYears","text":"<p>common</p> <p><code>val inYears: Years</code></p> <p>Converts this duration to years.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/in-years/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-decades/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Decades/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(months: Months): Months</code></p> <p><code>operator fun minus(years: Years): Years</code></p> <p><code>operator fun minus(decades: Decades): Decades</code></p> <p><code>operator fun minus(centuries: Centuries): Decades</code></p>"},{"location":"api/core/core/io.islandtime.measures/-decades/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Decades/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(months: Months): Months</code></p> <p><code>operator fun plus(years: Years): Years</code></p> <p><code>operator fun plus(decades: Decades): Decades</code></p> <p><code>operator fun plus(centuries: Centuries): Decades</code></p>"},{"location":"api/core/core/io.islandtime.measures/-decades/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Decades/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Decades</code></p> <p><code>operator fun rem(scalar: Long): Decades</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/times/","title":"times","text":"<p>//core/io.islandtime.measures/Decades/times</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Decades</code></p> <p><code>operator fun times(scalar: Long): Decades</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-decades/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Decades/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (centuries: Long, decades: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Decades/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (centuries: Centuries, decades: Decades) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Decades/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Decades/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-decades/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Decades/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Decades/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Decades/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Decades</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-decades/value/","title":"value","text":"<p>//core/io.islandtime.measures/Decades/value</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Decades/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Decades</code>The largest supported value. MIN <p>common</p><code>val MIN: Decades</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Decades.Companion.between(start: Date, endExclusive: Date): Decades</code>Returns the number of whole decades between two dates.<p>common</p><code>fun Decades.Companion.between(start: DateTime, endExclusive: DateTime): Decades</code>Returns the number of whole decades between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Decades.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Decades</code>Returns the number of whole decades between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Decades.Companion.between(start: Year, endExclusive: Year): Decades</code>Returns the number of whole decades between two years.<p>common</p><code>fun Decades.Companion.between(start: YearMonth, endExclusive: YearMonth): Decades</code>Returns the number of whole decades between two year-months.<p>common</p><code>fun Decades.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Decades</code>Returns the number of whole decades between two date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time."},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Decades/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Decades</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Decades/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-decades/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Decades</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/","title":"Duration","text":"<p>//core/io.islandtime.measures/Duration</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/#duration","title":"Duration","text":"<p>common</p> <p><code>@Serializable(with = DurationIsoSerializer::class) <p>class Duration : Comparable&lt;Duration&gt; </p> <p>A duration of time at nanosecond precision.</p> <p>For many applications, working with specific units like Hours or Seconds is more efficient and plenty adequate. However, when working with larger durations at sub-second precision, overflow is a very real possibility. <code>Duration</code> is capable of representing fixed, nanosecond-precision durations that span the entire supported time scale, making it more suitable for these use cases.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-duration/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Duration</code>The absolute value of this duration. inDays <p>common</p><code>val inDays: Days</code>Converts this duration into the number of 24-hour days represented by it. inHours <p>common</p><code>val inHours: Hours</code>Converts this duration into the number of whole hours represented by it. inMicroseconds <p>common</p><code>val inMicroseconds: Microseconds</code>Converts this duration into the number of whole microseconds represented by it. inMilliseconds <p>common</p><code>val inMilliseconds: Milliseconds</code>Converts this duration into the number of whole milliseconds represented by it. inMinutes <p>common</p><code>val inMinutes: Minutes</code>Converts this duration into the number of whole minutes represented by it. inNanoseconds <p>common</p><code>val inNanoseconds: Nanoseconds</code>Converts this duration into Nanoseconds. inSeconds <p>common</p><code>val inSeconds: Seconds</code>Returns the number of whole seconds in this duration. nanosecondAdjustment <p>common</p><code>val nanosecondAdjustment: Nanoseconds</code> seconds <p>common</p><code>val seconds: Seconds</code>"},{"location":"api/core/core/io.islandtime.measures/-duration/#functions","title":"Functions","text":"Name Summary compareTo <p>common</p><code>open operator override fun compareTo(other: Duration): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Duration</code>Divides this duration by a scalar value. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isNegative <p>common</p><code>fun isNegative(): Boolean</code>Checks if this duration is negative. isPositive <p>common</p><code>fun isPositive(): Boolean</code>Checks if this duration is positive. isZero <p>common</p><code>fun isZero(): Boolean</code>Checks if this duration is zero. minus <p>common</p><code>operator fun minus(days: Days): Duration</code><code>operator fun minus(other: Duration): Duration</code><code>operator fun minus(hours: Hours): Duration</code><code>operator fun minus(microseconds: Microseconds): Duration</code><code>operator fun minus(milliseconds: Milliseconds): Duration</code><code>operator fun minus(minutes: Minutes): Duration</code><code>operator fun minus(nanoseconds: Nanoseconds): Duration</code><code>operator fun minus(seconds: Seconds): Duration</code> plus <p>common</p><code>operator fun plus(days: Days): Duration</code><code>operator fun plus(other: Duration): Duration</code><code>operator fun plus(hours: Hours): Duration</code><code>operator fun plus(microseconds: Microseconds): Duration</code><code>operator fun plus(milliseconds: Milliseconds): Duration</code><code>operator fun plus(minutes: Minutes): Duration</code><code>operator fun plus(nanoseconds: Nanoseconds): Duration</code><code>operator fun plus(seconds: Seconds): Duration</code> times <p>common</p><code>operator fun times(scalar: Int): Duration</code>Multiples this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code>Breaks this duration down into individual unit components.<p>common</p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code>Breaks this duration down into individual unit components, assuming a 24-hour day length. toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, nanoseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, nanoseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, nanoseconds: Int) -&gt; T): T</code>Breaks this duration down into individual unit components.<p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -&gt; T): T</code>Breaks this duration down into individual unit components, assuming a 24-hour day length. toJavaDuration <p>jvm</p><code>fun Duration.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. Since Kotlin's <code>Duration</code> type can only represent longer durations to the millisecond, precision may be lost. toNSTimeInterval <p>darwin</p><code>fun Duration.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code> truncatedTo <p>common</p><code>fun truncatedTo(unit: TimeUnit): Duration</code>Returns this duration, rounded down to match the precision of a given unit. unaryMinus <p>common</p><code>operator fun unaryMinus(): Duration</code>"},{"location":"api/core/core/io.islandtime.measures/-duration/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Duration/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Duration</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Duration/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Duration): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/div/","title":"div","text":"<p>//core/io.islandtime.measures/Duration/div</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Duration</code></p> <p>Divides this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/div/#throws","title":"Throws","text":"ArithmeticException if division by zero or overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-duration/equals/","title":"equals","text":"<p>//core/io.islandtime.measures/Duration/equals</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.measures/Duration/hashCode</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-days/","title":"inDays","text":"<p>//core/io.islandtime.measures/Duration/inDays</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-days/#indays","title":"inDays","text":"<p>common</p> <p><code>val inDays: Days</code></p> <p>Converts this duration into the number of 24-hour days represented by it.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-hours/","title":"inHours","text":"<p>//core/io.islandtime.measures/Duration/inHours</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-hours/#inhours","title":"inHours","text":"<p>common</p> <p><code>val inHours: Hours</code></p> <p>Converts this duration into the number of whole hours represented by it.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-microseconds/","title":"inMicroseconds","text":"<p>//core/io.islandtime.measures/Duration/inMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-microseconds/#inmicroseconds","title":"inMicroseconds","text":"<p>common</p> <p><code>val inMicroseconds: Microseconds</code></p> <p>Converts this duration into the number of whole microseconds represented by it.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-microseconds/#throws","title":"Throws","text":"ArithmeticException if the duration cannot be represented without overflow"},{"location":"api/core/core/io.islandtime.measures/-duration/in-milliseconds/","title":"inMilliseconds","text":"<p>//core/io.islandtime.measures/Duration/inMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-milliseconds/#inmilliseconds","title":"inMilliseconds","text":"<p>common</p> <p><code>val inMilliseconds: Milliseconds</code></p> <p>Converts this duration into the number of whole milliseconds represented by it.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-milliseconds/#throws","title":"Throws","text":"ArithmeticException if the duration cannot be represented without overflow"},{"location":"api/core/core/io.islandtime.measures/-duration/in-minutes/","title":"inMinutes","text":"<p>//core/io.islandtime.measures/Duration/inMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-minutes/#inminutes","title":"inMinutes","text":"<p>common</p> <p><code>val inMinutes: Minutes</code></p> <p>Converts this duration into the number of whole minutes represented by it.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-nanoseconds/","title":"inNanoseconds","text":"<p>//core/io.islandtime.measures/Duration/inNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-nanoseconds/#innanoseconds","title":"inNanoseconds","text":"<p>common</p> <p><code>val inNanoseconds: Nanoseconds</code></p> <p>Converts this duration into Nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-nanoseconds/#throws","title":"Throws","text":"ArithmeticException if the duration cannot be represented without overflow"},{"location":"api/core/core/io.islandtime.measures/-duration/in-seconds/","title":"inSeconds","text":"<p>//core/io.islandtime.measures/Duration/inSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-seconds/#inseconds","title":"inSeconds","text":"<p>common</p> <p><code>val inSeconds: Seconds</code></p> <p>Returns the number of whole seconds in this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/in-seconds/#see-also","title":"See also","text":"Duration.seconds"},{"location":"api/core/core/io.islandtime.measures/-duration/is-negative/","title":"isNegative","text":"<p>//core/io.islandtime.measures/Duration/isNegative</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/is-negative/#isnegative","title":"isNegative","text":"<p>common</p> <p><code>fun isNegative(): Boolean</code></p> <p>Checks if this duration is negative.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/is-positive/","title":"isPositive","text":"<p>//core/io.islandtime.measures/Duration/isPositive</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/is-positive/#ispositive","title":"isPositive","text":"<p>common</p> <p><code>fun isPositive(): Boolean</code></p> <p>Checks if this duration is positive.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/is-zero/","title":"isZero","text":"<p>//core/io.islandtime.measures/Duration/isZero</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/is-zero/#iszero","title":"isZero","text":"<p>common</p> <p><code>fun isZero(): Boolean</code></p> <p>Checks if this duration is zero.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Duration/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(other: Duration): Duration</code></p> <p><code>operator fun minus(days: Days): Duration</code></p> <p><code>operator fun minus(hours: Hours): Duration</code></p> <p><code>operator fun minus(minutes: Minutes): Duration</code></p> <p><code>operator fun minus(seconds: Seconds): Duration</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Duration</code></p> <p><code>operator fun minus(microseconds: Microseconds): Duration</code></p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Duration</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/nanosecond-adjustment/","title":"nanosecondAdjustment","text":"<p>//core/io.islandtime.measures/Duration/nanosecondAdjustment</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/nanosecond-adjustment/#nanosecondadjustment","title":"nanosecondAdjustment","text":"<p>common</p> <p><code>val nanosecondAdjustment: Nanoseconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Duration/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(other: Duration): Duration</code></p> <p><code>operator fun plus(days: Days): Duration</code></p> <p><code>operator fun plus(hours: Hours): Duration</code></p> <p><code>operator fun plus(minutes: Minutes): Duration</code></p> <p><code>operator fun plus(seconds: Seconds): Duration</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Duration</code></p> <p><code>operator fun plus(microseconds: Microseconds): Duration</code></p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Duration</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/seconds/","title":"seconds","text":"<p>//core/io.islandtime.measures/Duration/seconds</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/seconds/#seconds","title":"seconds","text":"<p>common</p> <p><code>val seconds: Seconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/times/","title":"times","text":"<p>//core/io.islandtime.measures/Duration/times</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Duration</code></p> <p>Multiples this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-duration/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Duration/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -&gt; T): T</code></p> <p>Breaks this duration down into individual unit components, assuming a 24-hour day length.</p> <p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, nanoseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, nanoseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, nanoseconds: Int) -&gt; T): T</code></p> <p>Breaks this duration down into individual unit components.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Duration/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p>Breaks this duration down into individual unit components, assuming a 24-hour day length.</p> <p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p>Breaks this duration down into individual unit components.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Duration/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration. Since Kotlin's <code>Duration</code> type can only represent longer durations to the millisecond, precision may be lost.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Duration/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/truncated-to/","title":"truncatedTo","text":"<p>//core/io.islandtime.measures/Duration/truncatedTo</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/truncated-to/#truncatedto","title":"truncatedTo","text":"<p>common</p> <p><code>fun truncatedTo(unit: TimeUnit): Duration</code></p> <p>Returns this duration, rounded down to match the precision of a given unit.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Duration/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Duration</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Duration/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Duration</code>The maximum supported Duration. MIN <p>common</p><code>val MIN: Duration</code>The minimum supported Duration. ZERO <p>common</p><code>val ZERO: Duration</code>A Duration of zero length."},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Duration.Companion.between(start: DateTime, endExclusive: DateTime): Duration</code>Returns the Duration between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Duration.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Duration</code>Returns the Duration between two time points."},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Duration/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Duration</code></p> <p>The maximum supported Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Duration/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Duration</code></p> <p>The minimum supported Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/-z-e-r-o/","title":"ZERO","text":"<p>//core/io.islandtime.measures/Duration/Companion/ZERO</p>"},{"location":"api/core/core/io.islandtime.measures/-duration/-companion/-z-e-r-o/#zero","title":"ZERO","text":"<p>common</p> <p><code>val ZERO: Duration</code></p> <p>A Duration of zero length.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/","title":"Hours","text":"<p>//core/io.islandtime.measures/Hours</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/#hours","title":"Hours","text":"<p>common</p> <p><code>@JvmInline <p>value class Hours(val value: Long) : Comparable&lt;Hours&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-hours/#constructors","title":"Constructors","text":"Hours <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-hours/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-hours/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Hours</code>The absolute value of this duration. inMicroseconds <p>common</p><code>val inMicroseconds: Microseconds</code>Converts this duration to microseconds. inMilliseconds <p>common</p><code>val inMilliseconds: Milliseconds</code>Converts this duration to milliseconds. inMinutes <p>common</p><code>val inMinutes: Minutes</code>Converts this duration to minutes. inNanoseconds <p>common</p><code>val inNanoseconds: Nanoseconds</code>Converts this duration to nanoseconds. inSeconds <p>common</p><code>val inSeconds: Seconds</code>Converts this duration to seconds. inWholeDays <p>common</p><code>val inWholeDays: Days</code>Converts this duration to the number of whole days. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-hours/#functions","title":"Functions","text":"Name Summary asDuration <p>common</p><code>fun Hours.asDuration(): Duration</code> asUtcOffset <p>common</p><code>fun Hours.asUtcOffset(): UtcOffset</code>Converts a duration of hours into a UtcOffset of the same length. compareTo <p>common</p><code>open operator override fun compareTo(other: Hours): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Hours</code><code>operator fun div(scalar: Long): Hours</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Hours</code><code>operator fun minus(hours: Hours): Hours</code><code>operator fun minus(microseconds: Microseconds): Microseconds</code><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun minus(minutes: Minutes): Minutes</code><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun minus(seconds: Seconds): Seconds</code> plus <p>common</p><code>operator fun plus(days: Days): Hours</code><code>operator fun plus(hours: Hours): Hours</code><code>operator fun plus(microseconds: Microseconds): Microseconds</code><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun plus(minutes: Minutes): Minutes</code><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun plus(seconds: Seconds): Seconds</code> rem <p>common</p><code>operator fun rem(scalar: Int): Hours</code><code>operator fun rem(scalar: Long): Hours</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Hours</code><code>operator fun times(scalar: Long): Hours</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaDuration <p>jvm</p><code>fun Hours.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toNSTimeInterval <p>darwin</p><code>fun Hours.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Hours</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-hours/-hours/","title":"Hours","text":"<p>//core/io.islandtime.measures/Hours/Hours</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/-hours/#hours","title":"Hours","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-hours/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Hours/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Hours</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Hours/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Hours): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-hours/div/","title":"div","text":"<p>//core/io.islandtime.measures/Hours/div</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Hours</code></p> <p><code>operator fun div(scalar: Long): Hours</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-hours/in-microseconds/","title":"inMicroseconds","text":"<p>//core/io.islandtime.measures/Hours/inMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-microseconds/#inmicroseconds","title":"inMicroseconds","text":"<p>common</p> <p><code>val inMicroseconds: Microseconds</code></p> <p>Converts this duration to microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-microseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/in-milliseconds/","title":"inMilliseconds","text":"<p>//core/io.islandtime.measures/Hours/inMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-milliseconds/#inmilliseconds","title":"inMilliseconds","text":"<p>common</p> <p><code>val inMilliseconds: Milliseconds</code></p> <p>Converts this duration to milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-milliseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/in-minutes/","title":"inMinutes","text":"<p>//core/io.islandtime.measures/Hours/inMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-minutes/#inminutes","title":"inMinutes","text":"<p>common</p> <p><code>val inMinutes: Minutes</code></p> <p>Converts this duration to minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-minutes/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/in-nanoseconds/","title":"inNanoseconds","text":"<p>//core/io.islandtime.measures/Hours/inNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-nanoseconds/#innanoseconds","title":"inNanoseconds","text":"<p>common</p> <p><code>val inNanoseconds: Nanoseconds</code></p> <p>Converts this duration to nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-nanoseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/in-seconds/","title":"inSeconds","text":"<p>//core/io.islandtime.measures/Hours/inSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-seconds/#inseconds","title":"inSeconds","text":"<p>common</p> <p><code>val inSeconds: Seconds</code></p> <p>Converts this duration to seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-seconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/in-whole-days/","title":"inWholeDays","text":"<p>//core/io.islandtime.measures/Hours/inWholeDays</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/in-whole-days/#inwholedays","title":"inWholeDays","text":"<p>common</p> <p><code>val inWholeDays: Days</code></p> <p>Converts this duration to the number of whole days.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Hours/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun minus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun minus(seconds: Seconds): Seconds</code></p> <p><code>operator fun minus(minutes: Minutes): Minutes</code></p> <p><code>operator fun minus(hours: Hours): Hours</code></p> <p><code>operator fun minus(days: Days): Hours</code></p>"},{"location":"api/core/core/io.islandtime.measures/-hours/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Hours/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun plus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun plus(seconds: Seconds): Seconds</code></p> <p><code>operator fun plus(minutes: Minutes): Minutes</code></p> <p><code>operator fun plus(hours: Hours): Hours</code></p> <p><code>operator fun plus(days: Days): Hours</code></p>"},{"location":"api/core/core/io.islandtime.measures/-hours/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Hours/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Hours</code></p> <p><code>operator fun rem(scalar: Long): Hours</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/times/","title":"times","text":"<p>//core/io.islandtime.measures/Hours/times</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Hours</code></p> <p><code>operator fun times(scalar: Long): Hours</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Hours/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Hours/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Hours/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Hours/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Hours/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Hours/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Hours/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Hours/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Hours</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-hours/value/","title":"value","text":"<p>//core/io.islandtime.measures/Hours/value</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Hours/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Hours</code>The largest supported value. MIN <p>common</p><code>val MIN: Hours</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Hours.Companion.between(start: DateTime, endExclusive: DateTime): Hours</code>Returns the number of whole hours between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Hours.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Hours</code>Returns the number of whole hours between two time points."},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Hours/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Hours</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Hours/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-hours/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Hours</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/","title":"Microseconds","text":"<p>//core/io.islandtime.measures/Microseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/#microseconds","title":"Microseconds","text":"<p>common</p> <p><code>@JvmInline <p>value class Microseconds(val value: Long) : Comparable&lt;Microseconds&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/#constructors","title":"Constructors","text":"Microseconds <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Microseconds</code>The absolute value of this duration. inNanoseconds <p>common</p><code>val inNanoseconds: Nanoseconds</code>Converts this duration to nanoseconds. inWholeDays <p>common</p><code>val inWholeDays: Days</code>Converts this duration to the number of whole days. inWholeHours <p>common</p><code>val inWholeHours: Hours</code>Converts this duration to the number of whole hours. inWholeMilliseconds <p>common</p><code>val inWholeMilliseconds: Milliseconds</code>Converts this duration to the number of whole milliseconds. inWholeMinutes <p>common</p><code>val inWholeMinutes: Minutes</code>Converts this duration to the number of whole minutes. inWholeSeconds <p>common</p><code>val inWholeSeconds: Seconds</code>Converts this duration to the number of whole seconds. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-microseconds/#functions","title":"Functions","text":"Name Summary asDuration <p>common</p><code>fun Microseconds.asDuration(): Duration</code> compareTo <p>common</p><code>open operator override fun compareTo(other: Microseconds): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Microseconds</code><code>operator fun div(scalar: Long): Microseconds</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Microseconds</code><code>operator fun minus(hours: Hours): Microseconds</code><code>operator fun minus(microseconds: Microseconds): Microseconds</code><code>operator fun minus(milliseconds: Milliseconds): Microseconds</code><code>operator fun minus(minutes: Minutes): Microseconds</code><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun minus(seconds: Seconds): Microseconds</code> plus <p>common</p><code>operator fun plus(days: Days): Microseconds</code><code>operator fun plus(hours: Hours): Microseconds</code><code>operator fun plus(microseconds: Microseconds): Microseconds</code><code>operator fun plus(milliseconds: Milliseconds): Microseconds</code><code>operator fun plus(minutes: Minutes): Microseconds</code><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun plus(seconds: Seconds): Microseconds</code> rem <p>common</p><code>operator fun rem(scalar: Int): Microseconds</code><code>operator fun rem(scalar: Long): Microseconds</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Microseconds</code><code>operator fun times(scalar: Long): Microseconds</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (milliseconds: Long, microseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, milliseconds: Int, microseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, milliseconds: Int, microseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaDuration <p>jvm</p><code>fun Microseconds.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toNSTimeInterval <p>darwin</p><code>fun Microseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Microseconds</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-microseconds/-microseconds/","title":"Microseconds","text":"<p>//core/io.islandtime.measures/Microseconds/Microseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/-microseconds/#microseconds","title":"Microseconds","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Microseconds/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Microseconds</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-microseconds/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Microseconds/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Microseconds): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/div/","title":"div","text":"<p>//core/io.islandtime.measures/Microseconds/div</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Microseconds</code></p> <p><code>operator fun div(scalar: Long): Microseconds</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-nanoseconds/","title":"inNanoseconds","text":"<p>//core/io.islandtime.measures/Microseconds/inNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-nanoseconds/#innanoseconds","title":"inNanoseconds","text":"<p>common</p> <p><code>val inNanoseconds: Nanoseconds</code></p> <p>Converts this duration to nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-nanoseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-days/","title":"inWholeDays","text":"<p>//core/io.islandtime.measures/Microseconds/inWholeDays</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-days/#inwholedays","title":"inWholeDays","text":"<p>common</p> <p><code>val inWholeDays: Days</code></p> <p>Converts this duration to the number of whole days.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-hours/","title":"inWholeHours","text":"<p>//core/io.islandtime.measures/Microseconds/inWholeHours</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-hours/#inwholehours","title":"inWholeHours","text":"<p>common</p> <p><code>val inWholeHours: Hours</code></p> <p>Converts this duration to the number of whole hours.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-milliseconds/","title":"inWholeMilliseconds","text":"<p>//core/io.islandtime.measures/Microseconds/inWholeMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-milliseconds/#inwholemilliseconds","title":"inWholeMilliseconds","text":"<p>common</p> <p><code>val inWholeMilliseconds: Milliseconds</code></p> <p>Converts this duration to the number of whole milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-minutes/","title":"inWholeMinutes","text":"<p>//core/io.islandtime.measures/Microseconds/inWholeMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-minutes/#inwholeminutes","title":"inWholeMinutes","text":"<p>common</p> <p><code>val inWholeMinutes: Minutes</code></p> <p>Converts this duration to the number of whole minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-seconds/","title":"inWholeSeconds","text":"<p>//core/io.islandtime.measures/Microseconds/inWholeSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/in-whole-seconds/#inwholeseconds","title":"inWholeSeconds","text":"<p>common</p> <p><code>val inWholeSeconds: Seconds</code></p> <p>Converts this duration to the number of whole seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Microseconds/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun minus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Microseconds</code></p> <p><code>operator fun minus(seconds: Seconds): Microseconds</code></p> <p><code>operator fun minus(minutes: Minutes): Microseconds</code></p> <p><code>operator fun minus(hours: Hours): Microseconds</code></p> <p><code>operator fun minus(days: Days): Microseconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Microseconds/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun plus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Microseconds</code></p> <p><code>operator fun plus(seconds: Seconds): Microseconds</code></p> <p><code>operator fun plus(minutes: Minutes): Microseconds</code></p> <p><code>operator fun plus(hours: Hours): Microseconds</code></p> <p><code>operator fun plus(days: Days): Microseconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Microseconds/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Microseconds</code></p> <p><code>operator fun rem(scalar: Long): Microseconds</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/times/","title":"times","text":"<p>//core/io.islandtime.measures/Microseconds/times</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Microseconds</code></p> <p><code>operator fun times(scalar: Long): Microseconds</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Microseconds/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (milliseconds: Long, microseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, milliseconds: Int, microseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, milliseconds: Int, microseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Microseconds/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Microseconds/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Microseconds/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Microseconds/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Microseconds/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Microseconds/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Microseconds/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Microseconds</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-microseconds/value/","title":"value","text":"<p>//core/io.islandtime.measures/Microseconds/value</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Microseconds/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Microseconds</code>The largest supported value. MIN <p>common</p><code>val MIN: Microseconds</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Microseconds.Companion.between(start: DateTime, endExclusive: DateTime): Microseconds</code>Returns the number of whole microseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Microseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Microseconds</code>Returns the number of whole microseconds between two time points."},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Microseconds/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Microseconds</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Microseconds/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-microseconds/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Microseconds</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/","title":"Milliseconds","text":"<p>//core/io.islandtime.measures/Milliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/#milliseconds","title":"Milliseconds","text":"<p>common</p> <p><code>@JvmInline <p>value class Milliseconds(val value: Long) : Comparable&lt;Milliseconds&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/#constructors","title":"Constructors","text":"Milliseconds <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Milliseconds</code>The absolute value of this duration. inMicroseconds <p>common</p><code>val inMicroseconds: Microseconds</code>Converts this duration to microseconds. inNanoseconds <p>common</p><code>val inNanoseconds: Nanoseconds</code>Converts this duration to nanoseconds. inWholeDays <p>common</p><code>val inWholeDays: Days</code>Converts this duration to the number of whole days. inWholeHours <p>common</p><code>val inWholeHours: Hours</code>Converts this duration to the number of whole hours. inWholeMinutes <p>common</p><code>val inWholeMinutes: Minutes</code>Converts this duration to the number of whole minutes. inWholeSeconds <p>common</p><code>val inWholeSeconds: Seconds</code>Converts this duration to the number of whole seconds. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-milliseconds/#functions","title":"Functions","text":"Name Summary asDuration <p>common</p><code>fun Milliseconds.asDuration(): Duration</code> compareTo <p>common</p><code>open operator override fun compareTo(other: Milliseconds): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Milliseconds</code><code>operator fun div(scalar: Long): Milliseconds</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Milliseconds</code><code>operator fun minus(hours: Hours): Milliseconds</code><code>operator fun minus(microseconds: Microseconds): Microseconds</code><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun minus(minutes: Minutes): Milliseconds</code><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun minus(seconds: Seconds): Milliseconds</code> plus <p>common</p><code>operator fun plus(days: Days): Milliseconds</code><code>operator fun plus(hours: Hours): Milliseconds</code><code>operator fun plus(microseconds: Microseconds): Microseconds</code><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun plus(minutes: Minutes): Milliseconds</code><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun plus(seconds: Seconds): Milliseconds</code> rem <p>common</p><code>operator fun rem(scalar: Int): Milliseconds</code><code>operator fun rem(scalar: Long): Milliseconds</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Milliseconds</code><code>operator fun times(scalar: Long): Milliseconds</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, milliseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, milliseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, milliseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, milliseconds: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaDuration <p>jvm</p><code>fun Milliseconds.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toNSTimeInterval <p>darwin</p><code>fun Milliseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Milliseconds</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-milliseconds/","title":"Milliseconds","text":"<p>//core/io.islandtime.measures/Milliseconds/Milliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-milliseconds/#milliseconds","title":"Milliseconds","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Milliseconds/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Milliseconds</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Milliseconds/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Milliseconds): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/div/","title":"div","text":"<p>//core/io.islandtime.measures/Milliseconds/div</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Milliseconds</code></p> <p><code>operator fun div(scalar: Long): Milliseconds</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-microseconds/","title":"inMicroseconds","text":"<p>//core/io.islandtime.measures/Milliseconds/inMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-microseconds/#inmicroseconds","title":"inMicroseconds","text":"<p>common</p> <p><code>val inMicroseconds: Microseconds</code></p> <p>Converts this duration to microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-microseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-nanoseconds/","title":"inNanoseconds","text":"<p>//core/io.islandtime.measures/Milliseconds/inNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-nanoseconds/#innanoseconds","title":"inNanoseconds","text":"<p>common</p> <p><code>val inNanoseconds: Nanoseconds</code></p> <p>Converts this duration to nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-nanoseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-days/","title":"inWholeDays","text":"<p>//core/io.islandtime.measures/Milliseconds/inWholeDays</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-days/#inwholedays","title":"inWholeDays","text":"<p>common</p> <p><code>val inWholeDays: Days</code></p> <p>Converts this duration to the number of whole days.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-hours/","title":"inWholeHours","text":"<p>//core/io.islandtime.measures/Milliseconds/inWholeHours</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-hours/#inwholehours","title":"inWholeHours","text":"<p>common</p> <p><code>val inWholeHours: Hours</code></p> <p>Converts this duration to the number of whole hours.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-minutes/","title":"inWholeMinutes","text":"<p>//core/io.islandtime.measures/Milliseconds/inWholeMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-minutes/#inwholeminutes","title":"inWholeMinutes","text":"<p>common</p> <p><code>val inWholeMinutes: Minutes</code></p> <p>Converts this duration to the number of whole minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-seconds/","title":"inWholeSeconds","text":"<p>//core/io.islandtime.measures/Milliseconds/inWholeSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/in-whole-seconds/#inwholeseconds","title":"inWholeSeconds","text":"<p>common</p> <p><code>val inWholeSeconds: Seconds</code></p> <p>Converts this duration to the number of whole seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Milliseconds/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun minus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun minus(seconds: Seconds): Milliseconds</code></p> <p><code>operator fun minus(minutes: Minutes): Milliseconds</code></p> <p><code>operator fun minus(hours: Hours): Milliseconds</code></p> <p><code>operator fun minus(days: Days): Milliseconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Milliseconds/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun plus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun plus(seconds: Seconds): Milliseconds</code></p> <p><code>operator fun plus(minutes: Minutes): Milliseconds</code></p> <p><code>operator fun plus(hours: Hours): Milliseconds</code></p> <p><code>operator fun plus(days: Days): Milliseconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Milliseconds/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Milliseconds</code></p> <p><code>operator fun rem(scalar: Long): Milliseconds</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/times/","title":"times","text":"<p>//core/io.islandtime.measures/Milliseconds/times</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Milliseconds</code></p> <p><code>operator fun times(scalar: Long): Milliseconds</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Milliseconds/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, milliseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, milliseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, milliseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, milliseconds: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Milliseconds/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Milliseconds/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Milliseconds/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Milliseconds/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Milliseconds/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Milliseconds/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Milliseconds/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Milliseconds</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/value/","title":"value","text":"<p>//core/io.islandtime.measures/Milliseconds/value</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Milliseconds/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Milliseconds</code>The largest supported value. MIN <p>common</p><code>val MIN: Milliseconds</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Milliseconds.Companion.between(start: DateTime, endExclusive: DateTime): Milliseconds</code>Returns the number of whole milliseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Milliseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Milliseconds</code>Returns the number of whole milliseconds between two time points."},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Milliseconds/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Milliseconds</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Milliseconds/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-milliseconds/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Milliseconds</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/","title":"Minutes","text":"<p>//core/io.islandtime.measures/Minutes</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/#minutes","title":"Minutes","text":"<p>common</p> <p><code>@JvmInline <p>value class Minutes(val value: Long) : Comparable&lt;Minutes&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/#constructors","title":"Constructors","text":"Minutes <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-minutes/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-minutes/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Minutes</code>The absolute value of this duration. inMicroseconds <p>common</p><code>val inMicroseconds: Microseconds</code>Converts this duration to microseconds. inMilliseconds <p>common</p><code>val inMilliseconds: Milliseconds</code>Converts this duration to milliseconds. inNanoseconds <p>common</p><code>val inNanoseconds: Nanoseconds</code>Converts this duration to nanoseconds. inSeconds <p>common</p><code>val inSeconds: Seconds</code>Converts this duration to seconds. inWholeDays <p>common</p><code>val inWholeDays: Days</code>Converts this duration to the number of whole days. inWholeHours <p>common</p><code>val inWholeHours: Hours</code>Converts this duration to the number of whole hours. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-minutes/#functions","title":"Functions","text":"Name Summary asDuration <p>common</p><code>fun Minutes.asDuration(): Duration</code> asUtcOffset <p>common</p><code>fun Minutes.asUtcOffset(): UtcOffset</code>Converts a duration of minutes into a UtcOffset of the same length. compareTo <p>common</p><code>open operator override fun compareTo(other: Minutes): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Minutes</code><code>operator fun div(scalar: Long): Minutes</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Minutes</code><code>operator fun minus(hours: Hours): Minutes</code><code>operator fun minus(microseconds: Microseconds): Microseconds</code><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun minus(minutes: Minutes): Minutes</code><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun minus(seconds: Seconds): Seconds</code> plus <p>common</p><code>operator fun plus(days: Days): Minutes</code><code>operator fun plus(hours: Hours): Minutes</code><code>operator fun plus(microseconds: Microseconds): Microseconds</code><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun plus(minutes: Minutes): Minutes</code><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun plus(seconds: Seconds): Seconds</code> rem <p>common</p><code>operator fun rem(scalar: Int): Minutes</code><code>operator fun rem(scalar: Long): Minutes</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Minutes</code><code>operator fun times(scalar: Long): Minutes</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaDuration <p>jvm</p><code>fun Minutes.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toNSTimeInterval <p>darwin</p><code>fun Minutes.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Minutes</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-minutes/-minutes/","title":"Minutes","text":"<p>//core/io.islandtime.measures/Minutes/Minutes</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/-minutes/#minutes","title":"Minutes","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Minutes/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Minutes</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Minutes/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Minutes): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/div/","title":"div","text":"<p>//core/io.islandtime.measures/Minutes/div</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Minutes</code></p> <p><code>operator fun div(scalar: Long): Minutes</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-microseconds/","title":"inMicroseconds","text":"<p>//core/io.islandtime.measures/Minutes/inMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-microseconds/#inmicroseconds","title":"inMicroseconds","text":"<p>common</p> <p><code>val inMicroseconds: Microseconds</code></p> <p>Converts this duration to microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-microseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-milliseconds/","title":"inMilliseconds","text":"<p>//core/io.islandtime.measures/Minutes/inMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-milliseconds/#inmilliseconds","title":"inMilliseconds","text":"<p>common</p> <p><code>val inMilliseconds: Milliseconds</code></p> <p>Converts this duration to milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-milliseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-nanoseconds/","title":"inNanoseconds","text":"<p>//core/io.islandtime.measures/Minutes/inNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-nanoseconds/#innanoseconds","title":"inNanoseconds","text":"<p>common</p> <p><code>val inNanoseconds: Nanoseconds</code></p> <p>Converts this duration to nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-nanoseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-seconds/","title":"inSeconds","text":"<p>//core/io.islandtime.measures/Minutes/inSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-seconds/#inseconds","title":"inSeconds","text":"<p>common</p> <p><code>val inSeconds: Seconds</code></p> <p>Converts this duration to seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-seconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-whole-days/","title":"inWholeDays","text":"<p>//core/io.islandtime.measures/Minutes/inWholeDays</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-whole-days/#inwholedays","title":"inWholeDays","text":"<p>common</p> <p><code>val inWholeDays: Days</code></p> <p>Converts this duration to the number of whole days.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-whole-hours/","title":"inWholeHours","text":"<p>//core/io.islandtime.measures/Minutes/inWholeHours</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/in-whole-hours/#inwholehours","title":"inWholeHours","text":"<p>common</p> <p><code>val inWholeHours: Hours</code></p> <p>Converts this duration to the number of whole hours.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Minutes/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun minus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun minus(seconds: Seconds): Seconds</code></p> <p><code>operator fun minus(minutes: Minutes): Minutes</code></p> <p><code>operator fun minus(hours: Hours): Minutes</code></p> <p><code>operator fun minus(days: Days): Minutes</code></p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Minutes/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun plus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun plus(seconds: Seconds): Seconds</code></p> <p><code>operator fun plus(minutes: Minutes): Minutes</code></p> <p><code>operator fun plus(hours: Hours): Minutes</code></p> <p><code>operator fun plus(days: Days): Minutes</code></p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Minutes/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Minutes</code></p> <p><code>operator fun rem(scalar: Long): Minutes</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/times/","title":"times","text":"<p>//core/io.islandtime.measures/Minutes/times</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Minutes</code></p> <p><code>operator fun times(scalar: Long): Minutes</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Minutes/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Minutes/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Minutes/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Minutes/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Minutes/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Minutes/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Minutes/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Minutes/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Minutes</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-minutes/value/","title":"value","text":"<p>//core/io.islandtime.measures/Minutes/value</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Minutes/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Minutes</code>The largest supported value. MIN <p>common</p><code>val MIN: Minutes</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Minutes.Companion.between(start: DateTime, endExclusive: DateTime): Minutes</code>Returns the number of whole minutes between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Minutes.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Minutes</code>Returns the number of whole minutes between two time points."},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Minutes/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Minutes</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Minutes/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-minutes/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Minutes</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/","title":"Months","text":"<p>//core/io.islandtime.measures/Months</p>"},{"location":"api/core/core/io.islandtime.measures/-months/#months","title":"Months","text":"<p>common</p> <p><code>@JvmInline <p>value class Months(val value: Long) : Comparable&lt;Months&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-months/#constructors","title":"Constructors","text":"Months <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-months/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-months/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Months</code>The absolute value of this duration. inWholeCenturies <p>common</p><code>val inWholeCenturies: Centuries</code>Converts this duration to the number of whole centuries. inWholeDecades <p>common</p><code>val inWholeDecades: Decades</code>Converts this duration to the number of whole decades. inWholeYears <p>common</p><code>val inWholeYears: Years</code>Converts this duration to the number of whole years. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-months/#functions","title":"Functions","text":"Name Summary asPeriod <p>common</p><code>fun Months.asPeriod(): Period</code>Converts this duration into a Period with the same number of months. compareTo <p>common</p><code>open operator override fun compareTo(other: Months): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Months</code><code>operator fun div(scalar: Long): Months</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(centuries: Centuries): Months</code><code>operator fun minus(decades: Decades): Months</code><code>operator fun minus(months: Months): Months</code><code>operator fun minus(years: Years): Months</code> minus <p>common</p><code>operator fun Months.minus(period: Period): Period</code> plus <p>common</p><code>operator fun plus(centuries: Centuries): Months</code><code>operator fun plus(decades: Decades): Months</code><code>operator fun plus(months: Months): Months</code><code>operator fun plus(years: Years): Months</code> plus <p>common</p><code>operator fun Months.plus(period: Period): Period</code> rem <p>common</p><code>operator fun rem(scalar: Int): Months</code><code>operator fun rem(scalar: Long): Months</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Months</code><code>operator fun times(scalar: Long): Months</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (years: Years, months: Months) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (decades: Decades, years: Years, months: Months) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (centuries: Centuries, decades: Decades, years: Years, months: Months) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (years: Long, months: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (decades: Long, years: Int, months: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (centuries: Long, decades: Int, years: Int, months: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaPeriod <p>jvm</p><code>fun Months.toJavaPeriod(): Period</code>Converts this duration to an equivalent Java <code>Period</code>. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Months</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-months/-months/","title":"Months","text":"<p>//core/io.islandtime.measures/Months/Months</p>"},{"location":"api/core/core/io.islandtime.measures/-months/-months/#months","title":"Months","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-months/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Months/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-months/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Months</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-months/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Months/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-months/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Months): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-months/div/","title":"div","text":"<p>//core/io.islandtime.measures/Months/div</p>"},{"location":"api/core/core/io.islandtime.measures/-months/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Months</code></p> <p><code>operator fun div(scalar: Long): Months</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-months/in-whole-centuries/","title":"inWholeCenturies","text":"<p>//core/io.islandtime.measures/Months/inWholeCenturies</p>"},{"location":"api/core/core/io.islandtime.measures/-months/in-whole-centuries/#inwholecenturies","title":"inWholeCenturies","text":"<p>common</p> <p><code>val inWholeCenturies: Centuries</code></p> <p>Converts this duration to the number of whole centuries.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/in-whole-decades/","title":"inWholeDecades","text":"<p>//core/io.islandtime.measures/Months/inWholeDecades</p>"},{"location":"api/core/core/io.islandtime.measures/-months/in-whole-decades/#inwholedecades","title":"inWholeDecades","text":"<p>common</p> <p><code>val inWholeDecades: Decades</code></p> <p>Converts this duration to the number of whole decades.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/in-whole-years/","title":"inWholeYears","text":"<p>//core/io.islandtime.measures/Months/inWholeYears</p>"},{"location":"api/core/core/io.islandtime.measures/-months/in-whole-years/#inwholeyears","title":"inWholeYears","text":"<p>common</p> <p><code>val inWholeYears: Years</code></p> <p>Converts this duration to the number of whole years.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Months/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-months/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(months: Months): Months</code></p> <p><code>operator fun minus(years: Years): Months</code></p> <p><code>operator fun minus(decades: Decades): Months</code></p> <p><code>operator fun minus(centuries: Centuries): Months</code></p>"},{"location":"api/core/core/io.islandtime.measures/-months/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Months/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-months/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(months: Months): Months</code></p> <p><code>operator fun plus(years: Years): Months</code></p> <p><code>operator fun plus(decades: Decades): Months</code></p> <p><code>operator fun plus(centuries: Centuries): Months</code></p>"},{"location":"api/core/core/io.islandtime.measures/-months/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Months/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-months/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Months</code></p> <p><code>operator fun rem(scalar: Long): Months</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/times/","title":"times","text":"<p>//core/io.islandtime.measures/Months/times</p>"},{"location":"api/core/core/io.islandtime.measures/-months/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Months</code></p> <p><code>operator fun times(scalar: Long): Months</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-months/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Months/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (years: Long, months: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (decades: Long, years: Int, months: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (centuries: Long, decades: Int, years: Int, months: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Months/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (years: Years, months: Months) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (decades: Decades, years: Years, months: Months) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (centuries: Centuries, decades: Decades, years: Years, months: Months) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Months/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Months/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-months/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Months/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Months/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-months/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Months/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-months/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Months</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-months/value/","title":"value","text":"<p>//core/io.islandtime.measures/Months/value</p>"},{"location":"api/core/core/io.islandtime.measures/-months/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Months/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-months/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-months/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Months</code>The largest supported value. MIN <p>common</p><code>val MIN: Months</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-months/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Months.Companion.between(start: Date, endExclusive: Date): Months</code>Returns the number of whole months between two dates.<p>common</p><code>fun Months.Companion.between(start: DateTime, endExclusive: DateTime): Months</code>Returns the number of whole months between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Months.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Months</code>Returns the number of whole months between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Months.Companion.between(start: YearMonth, endExclusive: YearMonth): Months</code>Returns the number of months between two year-months.<p>common</p><code>fun Months.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Months</code>Returns the number of whole months between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time."},{"location":"api/core/core/io.islandtime.measures/-months/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Months/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-months/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Months</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-months/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Months/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-months/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Months</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/","title":"Nanoseconds","text":"<p>//core/io.islandtime.measures/Nanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/#nanoseconds","title":"Nanoseconds","text":"<p>common</p> <p><code>@JvmInline <p>value class Nanoseconds(val value: Long) : Comparable&lt;Nanoseconds&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/#constructors","title":"Constructors","text":"Nanoseconds <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Nanoseconds</code>The absolute value of this duration. inWholeDays <p>common</p><code>val inWholeDays: Days</code>Converts this duration to the number of whole days. inWholeHours <p>common</p><code>val inWholeHours: Hours</code>Converts this duration to the number of whole hours. inWholeMicroseconds <p>common</p><code>val inWholeMicroseconds: Microseconds</code>Converts this duration to the number of whole microseconds. inWholeMilliseconds <p>common</p><code>val inWholeMilliseconds: Milliseconds</code>Converts this duration to the number of whole milliseconds. inWholeMinutes <p>common</p><code>val inWholeMinutes: Minutes</code>Converts this duration to the number of whole minutes. inWholeSeconds <p>common</p><code>val inWholeSeconds: Seconds</code>Converts this duration to the number of whole seconds. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/#functions","title":"Functions","text":"Name Summary asDuration <p>common</p><code>fun Nanoseconds.asDuration(): Duration</code> compareTo <p>common</p><code>open operator override fun compareTo(other: Nanoseconds): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Nanoseconds</code><code>operator fun div(scalar: Long): Nanoseconds</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Nanoseconds</code><code>operator fun minus(hours: Hours): Nanoseconds</code><code>operator fun minus(microseconds: Microseconds): Nanoseconds</code><code>operator fun minus(milliseconds: Milliseconds): Nanoseconds</code><code>operator fun minus(minutes: Minutes): Nanoseconds</code><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun minus(seconds: Seconds): Nanoseconds</code> plus <p>common</p><code>operator fun plus(days: Days): Nanoseconds</code><code>operator fun plus(hours: Hours): Nanoseconds</code><code>operator fun plus(microseconds: Microseconds): Nanoseconds</code><code>operator fun plus(milliseconds: Milliseconds): Nanoseconds</code><code>operator fun plus(minutes: Minutes): Nanoseconds</code><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun plus(seconds: Seconds): Nanoseconds</code> rem <p>common</p><code>operator fun rem(scalar: Int): Nanoseconds</code><code>operator fun rem(scalar: Long): Nanoseconds</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Nanoseconds</code><code>operator fun times(scalar: Long): Nanoseconds</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (microseconds: Long, nanoseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (milliseconds: Long, microseconds: Int, nanoseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaDuration <p>jvm</p><code>fun Nanoseconds.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toNSTimeInterval <p>darwin</p><code>fun Nanoseconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Nanoseconds</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-nanoseconds/","title":"Nanoseconds","text":"<p>//core/io.islandtime.measures/Nanoseconds/Nanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-nanoseconds/#nanoseconds","title":"Nanoseconds","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Nanoseconds/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Nanoseconds</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Nanoseconds/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Nanoseconds): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/div/","title":"div","text":"<p>//core/io.islandtime.measures/Nanoseconds/div</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Nanoseconds</code></p> <p><code>operator fun div(scalar: Long): Nanoseconds</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-days/","title":"inWholeDays","text":"<p>//core/io.islandtime.measures/Nanoseconds/inWholeDays</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-days/#inwholedays","title":"inWholeDays","text":"<p>common</p> <p><code>val inWholeDays: Days</code></p> <p>Converts this duration to the number of whole days.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-hours/","title":"inWholeHours","text":"<p>//core/io.islandtime.measures/Nanoseconds/inWholeHours</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-hours/#inwholehours","title":"inWholeHours","text":"<p>common</p> <p><code>val inWholeHours: Hours</code></p> <p>Converts this duration to the number of whole hours.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-microseconds/","title":"inWholeMicroseconds","text":"<p>//core/io.islandtime.measures/Nanoseconds/inWholeMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-microseconds/#inwholemicroseconds","title":"inWholeMicroseconds","text":"<p>common</p> <p><code>val inWholeMicroseconds: Microseconds</code></p> <p>Converts this duration to the number of whole microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-milliseconds/","title":"inWholeMilliseconds","text":"<p>//core/io.islandtime.measures/Nanoseconds/inWholeMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-milliseconds/#inwholemilliseconds","title":"inWholeMilliseconds","text":"<p>common</p> <p><code>val inWholeMilliseconds: Milliseconds</code></p> <p>Converts this duration to the number of whole milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-minutes/","title":"inWholeMinutes","text":"<p>//core/io.islandtime.measures/Nanoseconds/inWholeMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-minutes/#inwholeminutes","title":"inWholeMinutes","text":"<p>common</p> <p><code>val inWholeMinutes: Minutes</code></p> <p>Converts this duration to the number of whole minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-seconds/","title":"inWholeSeconds","text":"<p>//core/io.islandtime.measures/Nanoseconds/inWholeSeconds</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/in-whole-seconds/#inwholeseconds","title":"inWholeSeconds","text":"<p>common</p> <p><code>val inWholeSeconds: Seconds</code></p> <p>Converts this duration to the number of whole seconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Nanoseconds/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun minus(microseconds: Microseconds): Nanoseconds</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Nanoseconds</code></p> <p><code>operator fun minus(seconds: Seconds): Nanoseconds</code></p> <p><code>operator fun minus(minutes: Minutes): Nanoseconds</code></p> <p><code>operator fun minus(hours: Hours): Nanoseconds</code></p> <p><code>operator fun minus(days: Days): Nanoseconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Nanoseconds/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun plus(microseconds: Microseconds): Nanoseconds</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Nanoseconds</code></p> <p><code>operator fun plus(seconds: Seconds): Nanoseconds</code></p> <p><code>operator fun plus(minutes: Minutes): Nanoseconds</code></p> <p><code>operator fun plus(hours: Hours): Nanoseconds</code></p> <p><code>operator fun plus(days: Days): Nanoseconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Nanoseconds/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Nanoseconds</code></p> <p><code>operator fun rem(scalar: Long): Nanoseconds</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/times/","title":"times","text":"<p>//core/io.islandtime.measures/Nanoseconds/times</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Nanoseconds</code></p> <p><code>operator fun times(scalar: Long): Nanoseconds</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Nanoseconds/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (microseconds: Long, nanoseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (milliseconds: Long, microseconds: Int, nanoseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (seconds: Long, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int, milliseconds: Int, microseconds: Int, nanoseconds: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Nanoseconds/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds, milliseconds: Milliseconds, microseconds: Microseconds, nanoseconds: Nanoseconds) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Nanoseconds/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Nanoseconds/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Nanoseconds/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Nanoseconds/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Nanoseconds/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Nanoseconds/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Nanoseconds</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/value/","title":"value","text":"<p>//core/io.islandtime.measures/Nanoseconds/value</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Nanoseconds/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Nanoseconds</code>The largest supported value. MIN <p>common</p><code>val MIN: Nanoseconds</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Nanoseconds.Companion.between(start: DateTime, endExclusive: DateTime): Nanoseconds</code>Returns the number of nanoseconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Nanoseconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Nanoseconds</code>Returns the number of nanoseconds between two time points."},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Nanoseconds/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Nanoseconds</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Nanoseconds/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-nanoseconds/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Nanoseconds</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/","title":"Period","text":"<p>//core/io.islandtime.measures/Period</p>"},{"location":"api/core/core/io.islandtime.measures/-period/#period","title":"Period","text":"<p>common</p> <p><code>@Serializable(with = PeriodIsoSerializer::class) <p>class Period</p> <p>A date-based period of time, such as \"2 years, 5 months, 16 days\". Unlike Duration, which uses exact increments, a Period works with conceptual days, months, and years, ignoring daylight savings and length differences.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-period/#properties","title":"Properties","text":"Name Summary days <p>common</p><code>val days: Days</code>The number of days in this period. months <p>common</p><code>val months: Months</code>The number of months in this period. totalMonths <p>common</p><code>val totalMonths: Months</code>The total number of months in this period, including years. years <p>common</p><code>val years: Years</code>The number of years in this period."},{"location":"api/core/core/io.islandtime.measures/-period/#functions","title":"Functions","text":"Name Summary component1 <p>common</p><code>operator fun component1(): Years</code> component2 <p>common</p><code>operator fun component2(): Months</code> component3 <p>common</p><code>operator fun component3(): Days</code> copy <p>common</p><code>fun copy(years: Years = this.years, months: Months = this.months, days: Days = this.days): Period</code>Returns a new Period, replacing the years, months, and days components with new values, as desired equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isNegative <p>common</p><code>fun isNegative(): Boolean</code>Checks if any component of this period is negative. isZero <p>common</p><code>fun isZero(): Boolean</code>Checks if this period is zero. minus <p>common</p><code>operator fun minus(days: Days): Period</code><code>operator fun minus(months: Months): Period</code><code>operator fun minus(weeks: Weeks): Period</code><code>operator fun minus(years: Years): Period</code><p>common</p><code>operator fun minus(other: Period): Period</code>Subtracts each component of another period from this period. normalized <p>common</p><code>fun normalized(): Period</code>Normalizes the number of years and months such that \"1 year, 15 months\" becomes \"2 years, 3 months\". Only the months and years components are combined. Days are never adjusted. plus <p>common</p><code>operator fun plus(days: Days): Period</code><code>operator fun plus(months: Months): Period</code><code>operator fun plus(weeks: Weeks): Period</code><code>operator fun plus(years: Years): Period</code><p>common</p><code>operator fun plus(other: Period): Period</code>Adds each component of another period to each component of this period. times <p>common</p><code>operator fun times(scalar: Int): Period</code><code>operator fun times(scalar: Long): Period</code>Multiplies each component of this period by a scalar value. toJavaPeriod <p>jvm</p><code>fun Period.toJavaPeriod(): Period</code>Converts this period to an equivalent Java <code>Period</code>. toString <p>common</p><code>open override fun toString(): String</code>Returns an ISO-8601 duration representation, such as \"P1Y10M3D\". unaryMinus <p>common</p><code>operator fun unaryMinus(): Period</code>Reverses the sign of each component in the period."},{"location":"api/core/core/io.islandtime.measures/-period/component1/","title":"component1","text":"<p>//core/io.islandtime.measures/Period/component1</p>"},{"location":"api/core/core/io.islandtime.measures/-period/component1/#component1","title":"component1","text":"<p>common</p> <p><code>operator fun component1(): Years</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/component2/","title":"component2","text":"<p>//core/io.islandtime.measures/Period/component2</p>"},{"location":"api/core/core/io.islandtime.measures/-period/component2/#component2","title":"component2","text":"<p>common</p> <p><code>operator fun component2(): Months</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/component3/","title":"component3","text":"<p>//core/io.islandtime.measures/Period/component3</p>"},{"location":"api/core/core/io.islandtime.measures/-period/component3/#component3","title":"component3","text":"<p>common</p> <p><code>operator fun component3(): Days</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/copy/","title":"copy","text":"<p>//core/io.islandtime.measures/Period/copy</p>"},{"location":"api/core/core/io.islandtime.measures/-period/copy/#copy","title":"copy","text":"<p>common</p> <p><code>fun copy(years: Years = this.years, months: Months = this.months, days: Days = this.days): Period</code></p> <p>Returns a new Period, replacing the years, months, and days components with new values, as desired</p>"},{"location":"api/core/core/io.islandtime.measures/-period/copy/#return","title":"Return","text":"<p>a new Period with the supplied values</p>"},{"location":"api/core/core/io.islandtime.measures/-period/copy/#parameters","title":"Parameters","text":"<p>common</p> years new years value months new months value days new days value"},{"location":"api/core/core/io.islandtime.measures/-period/days/","title":"days","text":"<p>//core/io.islandtime.measures/Period/days</p>"},{"location":"api/core/core/io.islandtime.measures/-period/days/#days","title":"days","text":"<p>common</p> <p><code>val days: Days</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/equals/","title":"equals","text":"<p>//core/io.islandtime.measures/Period/equals</p>"},{"location":"api/core/core/io.islandtime.measures/-period/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.measures/Period/hashCode</p>"},{"location":"api/core/core/io.islandtime.measures/-period/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/is-negative/","title":"isNegative","text":"<p>//core/io.islandtime.measures/Period/isNegative</p>"},{"location":"api/core/core/io.islandtime.measures/-period/is-negative/#isnegative","title":"isNegative","text":"<p>common</p> <p><code>fun isNegative(): Boolean</code></p> <p>Checks if any component of this period is negative.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/is-zero/","title":"isZero","text":"<p>//core/io.islandtime.measures/Period/isZero</p>"},{"location":"api/core/core/io.islandtime.measures/-period/is-zero/#iszero","title":"isZero","text":"<p>common</p> <p><code>fun isZero(): Boolean</code></p> <p>Checks if this period is zero.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Period/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-period/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(other: Period): Period</code></p> <p>Subtracts each component of another period from this period.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun minus(years: Years): Period</code></p> <p><code>operator fun minus(months: Months): Period</code></p> <p><code>operator fun minus(weeks: Weeks): Period</code></p> <p><code>operator fun minus(days: Days): Period</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/months/","title":"months","text":"<p>//core/io.islandtime.measures/Period/months</p>"},{"location":"api/core/core/io.islandtime.measures/-period/months/#months","title":"months","text":"<p>common</p> <p><code>val months: Months</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/normalized/","title":"normalized","text":"<p>//core/io.islandtime.measures/Period/normalized</p>"},{"location":"api/core/core/io.islandtime.measures/-period/normalized/#normalized","title":"normalized","text":"<p>common</p> <p><code>fun normalized(): Period</code></p> <p>Normalizes the number of years and months such that \"1 year, 15 months\" becomes \"2 years, 3 months\". Only the months and years components are combined. Days are never adjusted.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Period/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-period/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(other: Period): Period</code></p> <p>Adds each component of another period to each component of this period.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/plus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs <p>common</p> <p><code>operator fun plus(years: Years): Period</code></p> <p><code>operator fun plus(months: Months): Period</code></p> <p><code>operator fun plus(weeks: Weeks): Period</code></p> <p><code>operator fun plus(days: Days): Period</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/times/","title":"times","text":"<p>//core/io.islandtime.measures/Period/times</p>"},{"location":"api/core/core/io.islandtime.measures/-period/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Period</code></p> <p><code>operator fun times(scalar: Long): Period</code></p> <p>Multiplies each component of this period by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-period/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Period/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-period/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Returns an ISO-8601 duration representation, such as \"P1Y10M3D\".</p>"},{"location":"api/core/core/io.islandtime.measures/-period/total-months/","title":"totalMonths","text":"<p>//core/io.islandtime.measures/Period/totalMonths</p>"},{"location":"api/core/core/io.islandtime.measures/-period/total-months/#totalmonths","title":"totalMonths","text":"<p>common</p> <p><code>val totalMonths: Months</code></p> <p>The total number of months in this period, including years.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Period/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-period/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Period</code></p> <p>Reverses the sign of each component in the period.</p>"},{"location":"api/core/core/io.islandtime.measures/-period/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-period/years/","title":"years","text":"<p>//core/io.islandtime.measures/Period/years</p>"},{"location":"api/core/core/io.islandtime.measures/-period/years/#years","title":"years","text":"<p>common</p> <p><code>val years: Years</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Period/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-period/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-period/-companion/#properties","title":"Properties","text":"Name Summary ZERO <p>common</p><code>val ZERO: Period</code>A Period of zero length."},{"location":"api/core/core/io.islandtime.measures/-period/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Period.Companion.between(start: Date, endExclusive: Date): Period</code>Returns the Period between two dates.<p>common</p><code>fun Period.Companion.between(start: DateTime, endExclusive: DateTime): Period</code>Returns the Period between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Period.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Period</code>Returns the Period between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Period.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Period</code>Returns the Period between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time."},{"location":"api/core/core/io.islandtime.measures/-period/-companion/-z-e-r-o/","title":"ZERO","text":"<p>//core/io.islandtime.measures/Period/Companion/ZERO</p>"},{"location":"api/core/core/io.islandtime.measures/-period/-companion/-z-e-r-o/#zero","title":"ZERO","text":"<p>common</p> <p><code>val ZERO: Period</code></p> <p>A Period of zero length.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/","title":"Seconds","text":"<p>//core/io.islandtime.measures/Seconds</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/#seconds","title":"Seconds","text":"<p>common</p> <p><code>@JvmInline <p>value class Seconds(val value: Long) : Comparable&lt;Seconds&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/#constructors","title":"Constructors","text":"Seconds <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-seconds/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-seconds/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Seconds</code>The absolute value of this duration. inMicroseconds <p>common</p><code>val inMicroseconds: Microseconds</code>Converts this duration to microseconds. inMilliseconds <p>common</p><code>val inMilliseconds: Milliseconds</code>Converts this duration to milliseconds. inNanoseconds <p>common</p><code>val inNanoseconds: Nanoseconds</code>Converts this duration to nanoseconds. inWholeDays <p>common</p><code>val inWholeDays: Days</code>Converts this duration to the number of whole days. inWholeHours <p>common</p><code>val inWholeHours: Hours</code>Converts this duration to the number of whole hours. inWholeMinutes <p>common</p><code>val inWholeMinutes: Minutes</code>Converts this duration to the number of whole minutes. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-seconds/#functions","title":"Functions","text":"Name Summary asDuration <p>common</p><code>fun Seconds.asDuration(): Duration</code> asUtcOffset <p>common</p><code>fun Seconds.asUtcOffset(): UtcOffset</code>Converts a duration of seconds into a UtcOffset of the same length. compareTo <p>common</p><code>open operator override fun compareTo(other: Seconds): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Seconds</code><code>operator fun div(scalar: Long): Seconds</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Seconds</code><code>operator fun minus(hours: Hours): Seconds</code><code>operator fun minus(microseconds: Microseconds): Microseconds</code><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun minus(minutes: Minutes): Seconds</code><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun minus(seconds: Seconds): Seconds</code> plus <p>common</p><code>operator fun plus(days: Days): Seconds</code><code>operator fun plus(hours: Hours): Seconds</code><code>operator fun plus(microseconds: Microseconds): Microseconds</code><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code><code>operator fun plus(minutes: Minutes): Seconds</code><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code><code>operator fun plus(seconds: Seconds): Seconds</code> rem <p>common</p><code>operator fun rem(scalar: Int): Seconds</code><code>operator fun rem(scalar: Long): Seconds</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Seconds</code><code>operator fun times(scalar: Long): Seconds</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaDuration <p>jvm</p><code>fun Seconds.toJavaDuration(): Duration</code>Converts this duration to an equivalent Java <code>Duration</code>. toKotlinDuration <p>common</p><code>fun toKotlinDuration(): Duration</code>Converts this duration to a kotlin.time.Duration. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toNSTimeInterval <p>darwin</p><code>fun Seconds.toNSTimeInterval(): &lt;Error class: unknown class&gt;</code>Converts this duration to an equivalent <code>NSTimeInterval</code>. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Seconds</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-seconds/-seconds/","title":"Seconds","text":"<p>//core/io.islandtime.measures/Seconds/Seconds</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/-seconds/#seconds","title":"Seconds","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Seconds/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Seconds</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-seconds/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Seconds/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Seconds): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/div/","title":"div","text":"<p>//core/io.islandtime.measures/Seconds/div</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Seconds</code></p> <p><code>operator fun div(scalar: Long): Seconds</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-microseconds/","title":"inMicroseconds","text":"<p>//core/io.islandtime.measures/Seconds/inMicroseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-microseconds/#inmicroseconds","title":"inMicroseconds","text":"<p>common</p> <p><code>val inMicroseconds: Microseconds</code></p> <p>Converts this duration to microseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-microseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-milliseconds/","title":"inMilliseconds","text":"<p>//core/io.islandtime.measures/Seconds/inMilliseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-milliseconds/#inmilliseconds","title":"inMilliseconds","text":"<p>common</p> <p><code>val inMilliseconds: Milliseconds</code></p> <p>Converts this duration to milliseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-milliseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-nanoseconds/","title":"inNanoseconds","text":"<p>//core/io.islandtime.measures/Seconds/inNanoseconds</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-nanoseconds/#innanoseconds","title":"inNanoseconds","text":"<p>common</p> <p><code>val inNanoseconds: Nanoseconds</code></p> <p>Converts this duration to nanoseconds.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-nanoseconds/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-whole-days/","title":"inWholeDays","text":"<p>//core/io.islandtime.measures/Seconds/inWholeDays</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-whole-days/#inwholedays","title":"inWholeDays","text":"<p>common</p> <p><code>val inWholeDays: Days</code></p> <p>Converts this duration to the number of whole days.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-whole-hours/","title":"inWholeHours","text":"<p>//core/io.islandtime.measures/Seconds/inWholeHours</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-whole-hours/#inwholehours","title":"inWholeHours","text":"<p>common</p> <p><code>val inWholeHours: Hours</code></p> <p>Converts this duration to the number of whole hours.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-whole-minutes/","title":"inWholeMinutes","text":"<p>//core/io.islandtime.measures/Seconds/inWholeMinutes</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/in-whole-minutes/#inwholeminutes","title":"inWholeMinutes","text":"<p>common</p> <p><code>val inWholeMinutes: Minutes</code></p> <p>Converts this duration to the number of whole minutes.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Seconds/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun minus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun minus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun minus(seconds: Seconds): Seconds</code></p> <p><code>operator fun minus(minutes: Minutes): Seconds</code></p> <p><code>operator fun minus(hours: Hours): Seconds</code></p> <p><code>operator fun minus(days: Days): Seconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Seconds/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(nanoseconds: Nanoseconds): Nanoseconds</code></p> <p><code>operator fun plus(microseconds: Microseconds): Microseconds</code></p> <p><code>operator fun plus(milliseconds: Milliseconds): Milliseconds</code></p> <p><code>operator fun plus(seconds: Seconds): Seconds</code></p> <p><code>operator fun plus(minutes: Minutes): Seconds</code></p> <p><code>operator fun plus(hours: Hours): Seconds</code></p> <p><code>operator fun plus(days: Days): Seconds</code></p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Seconds/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Seconds</code></p> <p><code>operator fun rem(scalar: Long): Seconds</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/times/","title":"times","text":"<p>//core/io.islandtime.measures/Seconds/times</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Seconds</code></p> <p><code>operator fun times(scalar: Long): Seconds</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Seconds/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (minutes: Long, seconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (hours: Long, minutes: Int, seconds: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (days: Long, hours: Int, minutes: Int, seconds: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Seconds/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (minutes: Minutes, seconds: Seconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (days: Days, hours: Hours, minutes: Minutes, seconds: Seconds) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Seconds/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Seconds/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-kotlin-duration/","title":"toKotlinDuration","text":"<p>//core/io.islandtime.measures/Seconds/toKotlinDuration</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-kotlin-duration/#tokotlinduration","title":"toKotlinDuration","text":"<p>common</p> <p><code>fun toKotlinDuration(): Duration</code></p> <p>Converts this duration to a kotlin.time.Duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Seconds/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Seconds/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Seconds/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Seconds</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-seconds/value/","title":"value","text":"<p>//core/io.islandtime.measures/Seconds/value</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Seconds/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Seconds</code>The largest supported value. MIN <p>common</p><code>val MIN: Seconds</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Seconds.Companion.between(start: DateTime, endExclusive: DateTime): Seconds</code>Returns the number of whole seconds between two date-times, which are assumed to be at the same UTC offset. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun Seconds.Companion.between(start: TimePoint&lt;*&gt;, endExclusive: TimePoint&lt;*&gt;): Seconds</code>Returns the number of whole seconds between two time points."},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Seconds/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Seconds</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Seconds/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-seconds/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Seconds</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/","title":"TimeUnit","text":"<p>//core/io.islandtime.measures/TimeUnit</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/#timeunit","title":"TimeUnit","text":"<p>common</p> <p><code>enum TimeUnit : Enum&lt;TimeUnit&gt; </code></p> <p>A unit of time measurement.</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/#entries","title":"Entries","text":"NANOSECONDS <p>common</p><code>NANOSECONDS</code> MICROSECONDS <p>common</p><code>MICROSECONDS</code> MILLISECONDS <p>common</p><code>MILLISECONDS</code> SECONDS <p>common</p><code>SECONDS</code> MINUTES <p>common</p><code>MINUTES</code> HOURS <p>common</p><code>HOURS</code> DAYS <p>common</p><code>DAYS</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;TimeUnit&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/#functions","title":"Functions","text":"Name Summary valueOf <p>common</p><code>fun valueOf(value: String): TimeUnit</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;TimeUnit&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime.measures/-time-unit/entries/","title":"entries","text":"<p>//core/io.islandtime.measures/TimeUnit/entries</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;TimeUnit&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/value-of/","title":"valueOf","text":"<p>//core/io.islandtime.measures/TimeUnit/valueOf</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): TimeUnit</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime.measures/-time-unit/values/","title":"values","text":"<p>//core/io.islandtime.measures/TimeUnit/values</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;TimeUnit&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-d-a-y-s/","title":"DAYS","text":"<p>//core/io.islandtime.measures/TimeUnit/DAYS</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-d-a-y-s/#days","title":"DAYS","text":"<p>common</p> <p><code>DAYS <p></p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-d-a-y-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-h-o-u-r-s/","title":"HOURS","text":"<p>//core/io.islandtime.measures/TimeUnit/HOURS</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-h-o-u-r-s/#hours","title":"HOURS","text":"<p>common</p> <p><code>HOURS <p></p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-h-o-u-r-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-c-r-o-s-e-c-o-n-d-s/","title":"MICROSECONDS","text":"<p>//core/io.islandtime.measures/TimeUnit/MICROSECONDS</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-c-r-o-s-e-c-o-n-d-s/#microseconds","title":"MICROSECONDS","text":"<p>common</p> <p><code>MICROSECONDS <p></p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-c-r-o-s-e-c-o-n-d-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-l-l-i-s-e-c-o-n-d-s/","title":"MILLISECONDS","text":"<p>//core/io.islandtime.measures/TimeUnit/MILLISECONDS</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-l-l-i-s-e-c-o-n-d-s/#milliseconds","title":"MILLISECONDS","text":"<p>common</p> <p><code>MILLISECONDS <p></p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-l-l-i-s-e-c-o-n-d-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-n-u-t-e-s/","title":"MINUTES","text":"<p>//core/io.islandtime.measures/TimeUnit/MINUTES</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-n-u-t-e-s/#minutes","title":"MINUTES","text":"<p>common</p> <p><code>MINUTES <p></p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-m-i-n-u-t-e-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-n-a-n-o-s-e-c-o-n-d-s/","title":"NANOSECONDS","text":"<p>//core/io.islandtime.measures/TimeUnit/NANOSECONDS</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-n-a-n-o-s-e-c-o-n-d-s/#nanoseconds","title":"NANOSECONDS","text":"<p>common</p> <p><code>NANOSECONDS <p></p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-n-a-n-o-s-e-c-o-n-d-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-s-e-c-o-n-d-s/","title":"SECONDS","text":"<p>//core/io.islandtime.measures/TimeUnit/SECONDS</p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-s-e-c-o-n-d-s/#seconds","title":"SECONDS","text":"<p>common</p> <p><code>SECONDS <p></p>"},{"location":"api/core/core/io.islandtime.measures/-time-unit/-s-e-c-o-n-d-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.measures/-weeks/","title":"Weeks","text":"<p>//core/io.islandtime.measures/Weeks</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/#weeks","title":"Weeks","text":"<p>common</p> <p><code>@JvmInline <p>value class Weeks(val value: Long) : Comparable&lt;Weeks&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/#constructors","title":"Constructors","text":"Weeks <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-weeks/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-weeks/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Weeks</code>The absolute value of this duration. inDays <p>common</p><code>val inDays: Days</code>Converts this duration to days. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-weeks/#functions","title":"Functions","text":"Name Summary asPeriod <p>common</p><code>fun Weeks.asPeriod(): Period</code>Converts this duration into a Period with the same number of weeks. compareTo <p>common</p><code>open operator override fun compareTo(other: Weeks): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Weeks</code><code>operator fun div(scalar: Long): Weeks</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(days: Days): Days</code><code>operator fun minus(weeks: Weeks): Weeks</code> minus <p>common</p><code>operator fun Weeks.minus(period: Period): Period</code> plus <p>common</p><code>operator fun plus(days: Days): Days</code><code>operator fun plus(weeks: Weeks): Weeks</code> plus <p>common</p><code>operator fun Weeks.plus(period: Period): Period</code> rem <p>common</p><code>operator fun rem(scalar: Int): Weeks</code><code>operator fun rem(scalar: Long): Weeks</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Weeks</code><code>operator fun times(scalar: Long): Weeks</code>Multiplies this duration by a scalar value. toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaPeriod <p>jvm</p><code>fun Weeks.toJavaPeriod(): Period</code>Converts this duration to an equivalent Java <code>Period</code>. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Weeks</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-weeks/-weeks/","title":"Weeks","text":"<p>//core/io.islandtime.measures/Weeks/Weeks</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/-weeks/#weeks","title":"Weeks","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Weeks/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Weeks</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-weeks/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Weeks/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Weeks): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/div/","title":"div","text":"<p>//core/io.islandtime.measures/Weeks/div</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Weeks</code></p> <p><code>operator fun div(scalar: Long): Weeks</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-weeks/in-days/","title":"inDays","text":"<p>//core/io.islandtime.measures/Weeks/inDays</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/in-days/#indays","title":"inDays","text":"<p>common</p> <p><code>val inDays: Days</code></p> <p>Converts this duration to days.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/in-days/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-weeks/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Weeks/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(days: Days): Days</code></p> <p><code>operator fun minus(weeks: Weeks): Weeks</code></p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Weeks/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(days: Days): Days</code></p> <p><code>operator fun plus(weeks: Weeks): Weeks</code></p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Weeks/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Weeks</code></p> <p><code>operator fun rem(scalar: Long): Weeks</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/times/","title":"times","text":"<p>//core/io.islandtime.measures/Weeks/times</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Weeks</code></p> <p><code>operator fun times(scalar: Long): Weeks</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Weeks/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Weeks/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Weeks/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Weeks/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Weeks/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Weeks</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-weeks/value/","title":"value","text":"<p>//core/io.islandtime.measures/Weeks/value</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Weeks/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Weeks</code>The largest supported value. MIN <p>common</p><code>val MIN: Weeks</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Weeks.Companion.between(start: Date, endExclusive: Date): Weeks</code>Returns the number of whole weeks between two dates.<p>common</p><code>fun Weeks.Companion.between(start: DateTime, endExclusive: DateTime): Weeks</code>Returns the number whole weeks between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Weeks.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Weeks</code>Returns the number whole weeks between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Weeks.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Weeks</code>Returns the number of whole weeks between two zoned date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time."},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Weeks/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Weeks</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Weeks/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-weeks/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Weeks</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/","title":"Years","text":"<p>//core/io.islandtime.measures/Years</p>"},{"location":"api/core/core/io.islandtime.measures/-years/#years","title":"Years","text":"<p>common</p> <p><code>@JvmInline <p>value class Years(val value: Long) : Comparable&lt;Years&gt; </p>"},{"location":"api/core/core/io.islandtime.measures/-years/#constructors","title":"Constructors","text":"Years <p>common</p><code>constructor(value: Int)</code><code>constructor(value: Long)</code>"},{"location":"api/core/core/io.islandtime.measures/-years/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.measures/-years/#properties","title":"Properties","text":"Name Summary absoluteValue <p>common</p><code>val absoluteValue: Years</code>The absolute value of this duration. inMonths <p>common</p><code>val inMonths: Months</code>Converts this duration to months. inWholeCenturies <p>common</p><code>val inWholeCenturies: Centuries</code>Converts this duration to the number of whole centuries. inWholeDecades <p>common</p><code>val inWholeDecades: Decades</code>Converts this duration to the number of whole decades. value <p>common</p><code>val value: Long</code>The underlying value."},{"location":"api/core/core/io.islandtime.measures/-years/#functions","title":"Functions","text":"Name Summary asPeriod <p>common</p><code>fun Years.asPeriod(): Period</code>Converts this duration into a Period with the same number of years. compareTo <p>common</p><code>open operator override fun compareTo(other: Years): Int</code> div <p>common</p><code>operator fun div(scalar: Int): Years</code><code>operator fun div(scalar: Long): Years</code>Returns this duration divided by a scalar value. minus <p>common</p><code>operator fun minus(centuries: Centuries): Years</code><code>operator fun minus(decades: Decades): Years</code><code>operator fun minus(months: Months): Months</code><code>operator fun minus(years: Years): Years</code> minus <p>common</p><code>operator fun Years.minus(period: Period): Period</code> plus <p>common</p><code>operator fun plus(centuries: Centuries): Years</code><code>operator fun plus(decades: Decades): Years</code><code>operator fun plus(months: Months): Months</code><code>operator fun plus(years: Years): Years</code> plus <p>common</p><code>operator fun Years.plus(period: Period): Period</code> rem <p>common</p><code>operator fun rem(scalar: Int): Years</code><code>operator fun rem(scalar: Long): Years</code>Returns the remainder of this duration divided by a scalar value. times <p>common</p><code>operator fun times(scalar: Int): Years</code><code>operator fun times(scalar: Long): Years</code>Multiplies this duration by a scalar value. toComponents <p>common</p><code>inline fun &lt;T&gt; toComponents(action: (decades: Decades, years: Years) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponents(action: (centuries: Centuries, decades: Decades, years: Years) -&gt; T): T</code> toComponentValues <p>common</p><code>inline fun &lt;T&gt; toComponentValues(action: (decades: Long, years: Int) -&gt; T): T</code><code>inline fun &lt;T&gt; toComponentValues(action: (centuries: Long, decades: Int, years: Int) -&gt; T): T</code> toDouble <p>common</p><code>fun toDouble(): Double</code>Converts this duration to a <code>Double</code> value. toInt <p>common</p><code>fun toInt(): Int</code>Converts this duration to an <code>Int</code> value. toJavaPeriod <p>jvm</p><code>fun Years.toJavaPeriod(): Period</code>Converts this duration to an equivalent Java <code>Period</code>. toLong <p>common</p><code>fun toLong(): Long</code>Converts this duration to a <code>Long</code> value. toString <p>common</p><code>open override fun toString(): String</code>Converts this duration to an ISO-8601 time interval representation. unaryMinus <p>common</p><code>operator fun unaryMinus(): Years</code>Negates this duration."},{"location":"api/core/core/io.islandtime.measures/-years/-years/","title":"Years","text":"<p>//core/io.islandtime.measures/Years/Years</p>"},{"location":"api/core/core/io.islandtime.measures/-years/-years/#years","title":"Years","text":"<p>common</p> <p><code>constructor(value: Int)</code></p> <p><code>constructor(value: Long)</code></p>"},{"location":"api/core/core/io.islandtime.measures/-years/absolute-value/","title":"absoluteValue","text":"<p>//core/io.islandtime.measures/Years/absoluteValue</p>"},{"location":"api/core/core/io.islandtime.measures/-years/absolute-value/#absolutevalue","title":"absoluteValue","text":"<p>common</p> <p><code>val absoluteValue: Years</code></p> <p>The absolute value of this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/absolute-value/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-years/compare-to/","title":"compareTo","text":"<p>//core/io.islandtime.measures/Years/compareTo</p>"},{"location":"api/core/core/io.islandtime.measures/-years/compare-to/#compareto","title":"compareTo","text":"<p>common</p> <p><code>open operator override fun compareTo(other: Years): Int</code></p>"},{"location":"api/core/core/io.islandtime.measures/-years/div/","title":"div","text":"<p>//core/io.islandtime.measures/Years/div</p>"},{"location":"api/core/core/io.islandtime.measures/-years/div/#div","title":"div","text":"<p>common</p> <p><code>operator fun div(scalar: Int): Years</code></p> <p><code>operator fun div(scalar: Long): Years</code></p> <p>Returns this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/div/#throws","title":"Throws","text":"ArithmeticException if overflow occurs or the scalar is zero"},{"location":"api/core/core/io.islandtime.measures/-years/in-months/","title":"inMonths","text":"<p>//core/io.islandtime.measures/Years/inMonths</p>"},{"location":"api/core/core/io.islandtime.measures/-years/in-months/#inmonths","title":"inMonths","text":"<p>common</p> <p><code>val inMonths: Months</code></p> <p>Converts this duration to months.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/in-months/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-years/in-whole-centuries/","title":"inWholeCenturies","text":"<p>//core/io.islandtime.measures/Years/inWholeCenturies</p>"},{"location":"api/core/core/io.islandtime.measures/-years/in-whole-centuries/#inwholecenturies","title":"inWholeCenturies","text":"<p>common</p> <p><code>val inWholeCenturies: Centuries</code></p> <p>Converts this duration to the number of whole centuries.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/in-whole-decades/","title":"inWholeDecades","text":"<p>//core/io.islandtime.measures/Years/inWholeDecades</p>"},{"location":"api/core/core/io.islandtime.measures/-years/in-whole-decades/#inwholedecades","title":"inWholeDecades","text":"<p>common</p> <p><code>val inWholeDecades: Decades</code></p> <p>Converts this duration to the number of whole decades.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/minus/","title":"minus","text":"<p>//core/io.islandtime.measures/Years/minus</p>"},{"location":"api/core/core/io.islandtime.measures/-years/minus/#minus","title":"minus","text":"<p>common</p> <p><code>operator fun minus(months: Months): Months</code></p> <p><code>operator fun minus(years: Years): Years</code></p> <p><code>operator fun minus(decades: Decades): Years</code></p> <p><code>operator fun minus(centuries: Centuries): Years</code></p>"},{"location":"api/core/core/io.islandtime.measures/-years/plus/","title":"plus","text":"<p>//core/io.islandtime.measures/Years/plus</p>"},{"location":"api/core/core/io.islandtime.measures/-years/plus/#plus","title":"plus","text":"<p>common</p> <p><code>operator fun plus(months: Months): Months</code></p> <p><code>operator fun plus(years: Years): Years</code></p> <p><code>operator fun plus(decades: Decades): Years</code></p> <p><code>operator fun plus(centuries: Centuries): Years</code></p>"},{"location":"api/core/core/io.islandtime.measures/-years/rem/","title":"rem","text":"<p>//core/io.islandtime.measures/Years/rem</p>"},{"location":"api/core/core/io.islandtime.measures/-years/rem/#rem","title":"rem","text":"<p>common</p> <p><code>operator fun rem(scalar: Int): Years</code></p> <p><code>operator fun rem(scalar: Long): Years</code></p> <p>Returns the remainder of this duration divided by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/times/","title":"times","text":"<p>//core/io.islandtime.measures/Years/times</p>"},{"location":"api/core/core/io.islandtime.measures/-years/times/#times","title":"times","text":"<p>common</p> <p><code>operator fun times(scalar: Int): Years</code></p> <p><code>operator fun times(scalar: Long): Years</code></p> <p>Multiplies this duration by a scalar value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/times/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-years/to-component-values/","title":"toComponentValues","text":"<p>//core/io.islandtime.measures/Years/toComponentValues</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-component-values/#tocomponentvalues","title":"toComponentValues","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (decades: Long, years: Int) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponentValues(action: (centuries: Long, decades: Int, years: Int) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-components/","title":"toComponents","text":"<p>//core/io.islandtime.measures/Years/toComponents</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-components/#tocomponents","title":"toComponents","text":"<p>common</p> <p><code>inline fun &lt;T&gt; toComponents(action: (decades: Decades, years: Years) -&gt; T): T</code></p> <p><code>inline fun &lt;T&gt; toComponents(action: (centuries: Centuries, decades: Decades, years: Years) -&gt; T): T</code></p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-double/","title":"toDouble","text":"<p>//core/io.islandtime.measures/Years/toDouble</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-double/#todouble","title":"toDouble","text":"<p>common</p> <p><code>fun toDouble(): Double</code></p> <p>Converts this duration to a <code>Double</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-int/","title":"toInt","text":"<p>//core/io.islandtime.measures/Years/toInt</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-int/#toint","title":"toInt","text":"<p>common</p> <p><code>fun toInt(): Int</code></p> <p>Converts this duration to an <code>Int</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-int/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-years/to-long/","title":"toLong","text":"<p>//core/io.islandtime.measures/Years/toLong</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-long/#tolong","title":"toLong","text":"<p>common</p> <p><code>fun toLong(): Long</code></p> <p>Converts this duration to a <code>Long</code> value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-string/","title":"toString","text":"<p>//core/io.islandtime.measures/Years/toString</p>"},{"location":"api/core/core/io.islandtime.measures/-years/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this duration to an ISO-8601 time interval representation.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/unary-minus/","title":"unaryMinus","text":"<p>//core/io.islandtime.measures/Years/unaryMinus</p>"},{"location":"api/core/core/io.islandtime.measures/-years/unary-minus/#unaryminus","title":"unaryMinus","text":"<p>common</p> <p><code>operator fun unaryMinus(): Years</code></p> <p>Negates this duration.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/unary-minus/#throws","title":"Throws","text":"ArithmeticException if overflow occurs"},{"location":"api/core/core/io.islandtime.measures/-years/value/","title":"value","text":"<p>//core/io.islandtime.measures/Years/value</p>"},{"location":"api/core/core/io.islandtime.measures/-years/value/#value","title":"value","text":"<p>common</p> <p><code>val value: Long</code></p> <p>The underlying value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/-companion/","title":"Companion","text":"<p>//core/io.islandtime.measures/Years/Companion</p>"},{"location":"api/core/core/io.islandtime.measures/-years/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.measures/-years/-companion/#properties","title":"Properties","text":"Name Summary MAX <p>common</p><code>val MAX: Years</code>The largest supported value. MIN <p>common</p><code>val MIN: Years</code>The smallest supported value."},{"location":"api/core/core/io.islandtime.measures/-years/-companion/#functions","title":"Functions","text":"Name Summary between <p>common</p><code>fun Years.Companion.between(start: Date, endExclusive: Date): Years</code>Returns the number of whole years between two dates.<p>common</p><code>fun Years.Companion.between(start: DateTime, endExclusive: DateTime): Years</code>Returns the number of whole years between two date-times, which are assumed to be in the same time zone.<p>common</p><code>fun Years.Companion.between(start: OffsetDateTime, endExclusive: OffsetDateTime): Years</code>Returns the number of whole years between two date-times, adjusting the offset of endExclusive if necessary to match the starting date-time.<p>common</p><code>fun Years.Companion.between(start: Year, endExclusive: Year): Years</code>Returns the number of years between two years.<p>common</p><code>fun Years.Companion.between(start: YearMonth, endExclusive: YearMonth): Years</code>Returns the number of whole years between two year-months.<p>common</p><code>fun Years.Companion.between(start: ZonedDateTime, endExclusive: ZonedDateTime): Years</code>Returns the number of whole years between date-times, adjusting the time zone of endExclusive if necessary to match the starting date-time."},{"location":"api/core/core/io.islandtime.measures/-years/-companion/-m-a-x/","title":"MAX","text":"<p>//core/io.islandtime.measures/Years/Companion/MAX</p>"},{"location":"api/core/core/io.islandtime.measures/-years/-companion/-m-a-x/#max","title":"MAX","text":"<p>common</p> <p><code>val MAX: Years</code></p> <p>The largest supported value.</p>"},{"location":"api/core/core/io.islandtime.measures/-years/-companion/-m-i-n/","title":"MIN","text":"<p>//core/io.islandtime.measures/Years/Companion/MIN</p>"},{"location":"api/core/core/io.islandtime.measures/-years/-companion/-m-i-n/#min","title":"MIN","text":"<p>common</p> <p><code>val MIN: Years</code></p> <p>The smallest supported value.</p>"},{"location":"api/core/core/io.islandtime.parser/","title":"io.islandtime.parser","text":"<p>//core/io.islandtime.parser</p>"},{"location":"api/core/core/io.islandtime.parser/#package-level-declarations","title":"Package-level declarations","text":"<p>common</p> <p>Parsing of dates, times, durations, and intervals from textual representations.</p>"},{"location":"api/core/core/io.islandtime.parser/#types","title":"Types","text":"Name Summary DateTimeParseException <p>common</p><code>class DateTimeParseException(message: String? = null, val parsedString: String? = null, val errorIndex: Int = 0, cause: Throwable? = null) : DateTimeException</code> DateTimeParser <p>common</p><code>abstract class DateTimeParser</code>A parser that converts text into a collection of date-time fields that are understood throughout Island Time. DateTimeParserBuilder <p>common</p><code>interface DateTimeParserBuilder</code> DateTimeParserDsl <p>common</p><code>@DslMarkerannotation class DateTimeParserDsl</code> DateTimeParseResult <p>common</p><code>data class DateTimeParseResult(val fields: MutableMap&lt;DateTimeField, Long&gt; = hashMapOf(), var timeZoneId: String? = null)</code>The result of a parsing operation. DateTimeParsers <p>common</p><code>object DateTimeParsers</code>A set of predefined parsers. DateTimeParserSettings <p>common</p><code>data class DateTimeParserSettings(val numberStyle: NumberStyle = NumberStyle.DEFAULT, val locale: () -&gt; Locale = { defaultLocale() }, val isCaseSensitive: Boolean = true)</code>Settings that control the parsing behavior. DecimalNumberParserBuilder <p>common</p><code>interface DecimalNumberParserBuilder : NumberParserBuilder</code> GroupedDateTimeParser <p>common</p><code>class GroupedDateTimeParser</code> GroupedDateTimeParserBuilder <p>common</p><code>interface GroupedDateTimeParserBuilder</code> LiteralParserBuilder <p>common</p><code>interface LiteralParserBuilder</code> NumberParserBuilder <p>common</p><code>interface NumberParserBuilder</code> SignParserBuilder <p>common</p><code>interface SignParserBuilder</code> SignStyle <p>common</p><code>enum SignStyle : Enum&lt;SignStyle&gt; </code> StringParseAction <p>common</p><code>enum StringParseAction : Enum&lt;StringParseAction&gt; </code> StringParserBuilder <p>common</p><code>interface StringParserBuilder</code> WholeNumberParserBuilder <p>common</p><code>interface WholeNumberParserBuilder : NumberParserBuilder</code>"},{"location":"api/core/core/io.islandtime.parser/#functions","title":"Functions","text":"Name Summary amPm <p>common</p><code>fun DateTimeParserBuilder.amPm()</code>Parse the AM or PM of the day from its textual representation. dateTimeParser <p>common</p><code>inline fun dateTimeParser(builder: DateTimeParserBuilder.() -&gt; Unit): DateTimeParser</code>Define a custom DateTimeParser. dayOfMonth <p>common</p><code>inline fun DateTimeParserBuilder.dayOfMonth(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the month value with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.dayOfMonth(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the month value with a variable number of digits. dayOfWeekNumber <p>common</p><code>inline fun DateTimeParserBuilder.dayOfWeekNumber(length: Int = 1, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of week number with a fixed number of digits. dayOfYear <p>common</p><code>inline fun DateTimeParserBuilder.dayOfYear(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the year value with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.dayOfYear(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the year value with a variable number of digits. durationOfFractionalSeconds <p>common</p><code>inline fun DateTimeParserBuilder.durationOfFractionalSeconds(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of fractional seconds. durationOfHours <p>common</p><code>inline fun DateTimeParserBuilder.durationOfHours(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of whole hours. durationOfMinutes <p>common</p><code>inline fun DateTimeParserBuilder.durationOfMinutes(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of whole minutes. durationOfSeconds <p>common</p><code>inline fun DateTimeParserBuilder.durationOfSeconds(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of whole seconds. era <p>common</p><code>fun DateTimeParserBuilder.era(style: TextStyle)</code>Parse an era from its textual representation in a specific style.<p>common</p><code>fun DateTimeParserBuilder.era(styles: Set&lt;TextStyle&gt;)</code>Parse an era from its textual representation in any of the specified styles. fractionalSecondOfMinute <p>common</p><code>inline fun DateTimeParserBuilder.fractionalSecondOfMinute(wholeLength: Int, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code>Parse a fractional second of the minute with a fixed number of characters representing the whole second.<p>common</p><code>inline fun DateTimeParserBuilder.fractionalSecondOfMinute(wholeLength: IntRange = 1..2, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code>Parse a fractional second of the minute. groupedDateTimeParser <p>common</p><code>inline fun groupedDateTimeParser(builder: GroupedDateTimeParserBuilder.() -&gt; Unit): GroupedDateTimeParser</code>Creates a GroupedDateTimeParser. hourOfDay <p>common</p><code>inline fun DateTimeParserBuilder.hourOfDay(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse an hour of the day with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.hourOfDay(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse an hour of the day with a variable number of digits. localizedDayOfWeek <p>common</p><code>fun DateTimeParserBuilder.localizedDayOfWeek(style: TextStyle)</code>Parse a day of the week from its textual representation in a specific style.<p>common</p><code>fun DateTimeParserBuilder.localizedDayOfWeek(styles: Set&lt;TextStyle&gt;)</code>Parse a day of the week from its textual representation in any of the specified styles. localizedMonth <p>common</p><code>fun DateTimeParserBuilder.localizedMonth(style: TextStyle)</code>Parse a month from its textual representation in a specific style.<p>common</p><code>fun DateTimeParserBuilder.localizedMonth(styles: Set&lt;TextStyle&gt;)</code>Parse a month from its textual representation in any of the specified styles. minuteOfHour <p>common</p><code>inline fun DateTimeParserBuilder.minuteOfHour(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a minute of the hour with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.minuteOfHour(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a minute of the hour with a variable number of digits. monthNumber <p>common</p><code>inline fun DateTimeParserBuilder.monthNumber(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a month of year number with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.monthNumber(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a month of year value with a variable number of digits. periodOfDays <p>common</p><code>inline fun DateTimeParserBuilder.periodOfDays(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole days. periodOfMonths <p>common</p><code>inline fun DateTimeParserBuilder.periodOfMonths(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole months. periodOfWeeks <p>common</p><code>inline fun DateTimeParserBuilder.periodOfWeeks(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole weeks. periodOfYears <p>common</p><code>inline fun DateTimeParserBuilder.periodOfYears(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole years. periodSign <p>common</p><code>fun DateTimeParserBuilder.periodSign()</code>Parses a number's sign and populates DateTimeField.PERIOD_SIGN with <code>-1L</code>, if negative or <code>1L</code>, if positive. secondOfMinute <p>common</p><code>inline fun DateTimeParserBuilder.secondOfMinute(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a second of the minute with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.secondOfMinute(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a second of the minute with a variable number of digits. timeZoneId <p>common</p><code>fun DateTimeParserBuilder.timeZoneId()</code>Parse a time zone region ID. unboundedDesignator <p>common</p><code>fun DateTimeParserBuilder.unboundedDesignator()</code>Parses the string \"..\" and populates DateTimeField.IS_UNBOUNDED with <code>1L</code>. utcDesignator <p>common</p><code>fun DateTimeParserBuilder.utcDesignator()</code>Parses the character 'Z' and populates DateTimeField.UTC_OFFSET_TOTAL_SECONDS with <code>0L</code>. utcOffsetHours <p>common</p><code>inline fun DateTimeParserBuilder.utcOffsetHours(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code> utcOffsetMinutes <p>common</p><code>inline fun DateTimeParserBuilder.utcOffsetMinutes(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code> utcOffsetSeconds <p>common</p><code>inline fun DateTimeParserBuilder.utcOffsetSeconds(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code> utcOffsetSign <p>common</p><code>fun DateTimeParserBuilder.utcOffsetSign()</code>Parses a number's sign and populates DateTimeField.UTC_OFFSET_SIGN with <code>-1L</code>, if negative or <code>1L</code>, if positive. year <p>common</p><code>inline fun DateTimeParserBuilder.year(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.year(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year with a variable number of digits. yearOfEra <p>common</p><code>inline fun DateTimeParserBuilder.yearOfEra(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year of era with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.yearOfEra(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year of era with a variable number of digits."},{"location":"api/core/core/io.islandtime.parser/am-pm/","title":"amPm","text":"<p>//core/io.islandtime.parser/amPm</p>"},{"location":"api/core/core/io.islandtime.parser/am-pm/#ampm","title":"amPm","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.amPm()</code></p> <p>Parse the AM or PM of the day from its textual representation.</p> <p>The result will be associated with DateTimeField.AM_PM_OF_DAY.</p>"},{"location":"api/core/core/io.islandtime.parser/date-time-parser/","title":"dateTimeParser","text":"<p>//core/io.islandtime.parser/dateTimeParser</p>"},{"location":"api/core/core/io.islandtime.parser/date-time-parser/#datetimeparser","title":"dateTimeParser","text":"<p>common</p> <p><code>inline fun dateTimeParser(builder: DateTimeParserBuilder.() -&gt; Unit): DateTimeParser</code></p> <p>Define a custom DateTimeParser.</p>"},{"location":"api/core/core/io.islandtime.parser/date-time-parser/#see-also","title":"See also","text":"DateTimeParsers"},{"location":"api/core/core/io.islandtime.parser/day-of-month/","title":"dayOfMonth","text":"<p>//core/io.islandtime.parser/dayOfMonth</p>"},{"location":"api/core/core/io.islandtime.parser/day-of-month/#dayofmonth","title":"dayOfMonth","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.dayOfMonth(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a day of the month value with a variable number of digits.</p> <p>The result will be associated with DateTimeField.DAY_OF_MONTH.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.dayOfMonth(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a day of the month value with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.DAY_OF_MONTH.</p>"},{"location":"api/core/core/io.islandtime.parser/day-of-week-number/","title":"dayOfWeekNumber","text":"<p>//core/io.islandtime.parser/dayOfWeekNumber</p>"},{"location":"api/core/core/io.islandtime.parser/day-of-week-number/#dayofweeknumber","title":"dayOfWeekNumber","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.dayOfWeekNumber(length: Int = 1, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a day of week number with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.DAY_OF_WEEK.</p>"},{"location":"api/core/core/io.islandtime.parser/day-of-year/","title":"dayOfYear","text":"<p>//core/io.islandtime.parser/dayOfYear</p>"},{"location":"api/core/core/io.islandtime.parser/day-of-year/#dayofyear","title":"dayOfYear","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.dayOfYear(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a day of the year value with a variable number of digits.</p> <p>The result will be associated with DateTimeField.DAY_OF_YEAR.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.dayOfYear(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a day of the year value with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.DAY_OF_YEAR.</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-fractional-seconds/","title":"durationOfFractionalSeconds","text":"<p>//core/io.islandtime.parser/durationOfFractionalSeconds</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-fractional-seconds/#durationoffractionalseconds","title":"durationOfFractionalSeconds","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.durationOfFractionalSeconds(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a duration of fractional seconds.</p> <p>The number of whole seconds will be associated with DateTimeField.DURATION_OF_SECONDS while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND. The decimal separator character will be determined by the DateTimeParserSettings.</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-hours/","title":"durationOfHours","text":"<p>//core/io.islandtime.parser/durationOfHours</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-hours/#durationofhours","title":"durationOfHours","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.durationOfHours(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a duration of whole hours.</p> <p>The number of hours will be associated with DateTimeField.DURATION_OF_HOURS.</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-minutes/","title":"durationOfMinutes","text":"<p>//core/io.islandtime.parser/durationOfMinutes</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-minutes/#durationofminutes","title":"durationOfMinutes","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.durationOfMinutes(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a duration of whole minutes.</p> <p>The number of minutes will be associated with DateTimeField.DURATION_OF_MINUTES.</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-seconds/","title":"durationOfSeconds","text":"<p>//core/io.islandtime.parser/durationOfSeconds</p>"},{"location":"api/core/core/io.islandtime.parser/duration-of-seconds/#durationofseconds","title":"durationOfSeconds","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.durationOfSeconds(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a duration of whole seconds.</p> <p>The number of seconds will be associated with DateTimeField.DURATION_OF_SECONDS.</p>"},{"location":"api/core/core/io.islandtime.parser/era/","title":"era","text":"<p>//core/io.islandtime.parser/era</p>"},{"location":"api/core/core/io.islandtime.parser/era/#era","title":"era","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.era(styles: Set&lt;TextStyle&gt;)</code></p> <p>Parse an era from its textual representation in any of the specified styles.</p> <p>The result will be associated with DateTimeField.ERA.</p> <p>common</p> <p><code>fun DateTimeParserBuilder.era(style: TextStyle)</code></p> <p>Parse an era from its textual representation in a specific style.</p> <p>The result will be associated with DateTimeField.ERA.</p>"},{"location":"api/core/core/io.islandtime.parser/fractional-second-of-minute/","title":"fractionalSecondOfMinute","text":"<p>//core/io.islandtime.parser/fractionalSecondOfMinute</p>"},{"location":"api/core/core/io.islandtime.parser/fractional-second-of-minute/#fractionalsecondofminute","title":"fractionalSecondOfMinute","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.fractionalSecondOfMinute(wholeLength: IntRange = 1..2, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a fractional second of the minute.</p> <p>The number of whole seconds will be associated with DateTimeField.SECOND_OF_MINUTE while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND. The decimal separator character will be determined by the DateTimeParserSettings.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.fractionalSecondOfMinute(wholeLength: Int, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a fractional second of the minute with a fixed number of characters representing the whole second.</p> <p>The number of whole seconds will be associated with DateTimeField.SECOND_OF_MINUTE while any fractional part will be associated with DateTimeField.NANOSECOND_OF_SECOND. The decimal separator character will be determined by the DateTimeParserSettings.</p>"},{"location":"api/core/core/io.islandtime.parser/grouped-date-time-parser/","title":"groupedDateTimeParser","text":"<p>//core/io.islandtime.parser/groupedDateTimeParser</p>"},{"location":"api/core/core/io.islandtime.parser/grouped-date-time-parser/#groupeddatetimeparser","title":"groupedDateTimeParser","text":"<p>common</p> <p><code>inline fun groupedDateTimeParser(builder: GroupedDateTimeParserBuilder.() -&gt; Unit): GroupedDateTimeParser</code></p> <p>Creates a GroupedDateTimeParser.</p> <p>A grouped parser is capable of grouping the parsed fields into separate results, allowing fields to be reused within the same character sequence.</p>"},{"location":"api/core/core/io.islandtime.parser/hour-of-day/","title":"hourOfDay","text":"<p>//core/io.islandtime.parser/hourOfDay</p>"},{"location":"api/core/core/io.islandtime.parser/hour-of-day/#hourofday","title":"hourOfDay","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.hourOfDay(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse an hour of the day with a variable number of digits.</p> <p>The result will be associated with DateTimeField.HOUR_OF_DAY.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.hourOfDay(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse an hour of the day with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.HOUR_OF_DAY.</p>"},{"location":"api/core/core/io.islandtime.parser/localized-day-of-week/","title":"localizedDayOfWeek","text":"<p>//core/io.islandtime.parser/localizedDayOfWeek</p>"},{"location":"api/core/core/io.islandtime.parser/localized-day-of-week/#localizeddayofweek","title":"localizedDayOfWeek","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.localizedDayOfWeek(styles: Set&lt;TextStyle&gt;)</code></p> <p>Parse a day of the week from its textual representation in any of the specified styles.</p> <p>The result will be associated with DateTimeField.DAY_OF_WEEK.</p> <p>common</p> <p><code>fun DateTimeParserBuilder.localizedDayOfWeek(style: TextStyle)</code></p> <p>Parse a day of the week from its textual representation in a specific style.</p> <p>The result will be associated with DateTimeField.DAY_OF_WEEK.</p>"},{"location":"api/core/core/io.islandtime.parser/localized-month/","title":"localizedMonth","text":"<p>//core/io.islandtime.parser/localizedMonth</p>"},{"location":"api/core/core/io.islandtime.parser/localized-month/#localizedmonth","title":"localizedMonth","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.localizedMonth(styles: Set&lt;TextStyle&gt;)</code></p> <p>Parse a month from its textual representation in any of the specified styles.</p> <p>The result will be associated with DateTimeField.MONTH_OF_YEAR.</p> <p>common</p> <p><code>fun DateTimeParserBuilder.localizedMonth(style: TextStyle)</code></p> <p>Parse a month from its textual representation in a specific style.</p> <p>The result will be associated with DateTimeField.MONTH_OF_YEAR.</p>"},{"location":"api/core/core/io.islandtime.parser/minute-of-hour/","title":"minuteOfHour","text":"<p>//core/io.islandtime.parser/minuteOfHour</p>"},{"location":"api/core/core/io.islandtime.parser/minute-of-hour/#minuteofhour","title":"minuteOfHour","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.minuteOfHour(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a minute of the hour with a variable number of digits.</p> <p>The result will be associated with DateTimeField.MINUTE_OF_HOUR.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.minuteOfHour(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a minute of the hour with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.MINUTE_OF_HOUR.</p>"},{"location":"api/core/core/io.islandtime.parser/month-number/","title":"monthNumber","text":"<p>//core/io.islandtime.parser/monthNumber</p>"},{"location":"api/core/core/io.islandtime.parser/month-number/#monthnumber","title":"monthNumber","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.monthNumber(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a month of year value with a variable number of digits.</p> <p>The result will be associated with DateTimeField.MONTH_OF_YEAR.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.monthNumber(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a month of year number with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.MONTH_OF_YEAR.</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-days/","title":"periodOfDays","text":"<p>//core/io.islandtime.parser/periodOfDays</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-days/#periodofdays","title":"periodOfDays","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.periodOfDays(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a period of whole days.</p> <p>The number of days will be associated with DateTimeField.PERIOD_OF_DAYS.</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-months/","title":"periodOfMonths","text":"<p>//core/io.islandtime.parser/periodOfMonths</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-months/#periodofmonths","title":"periodOfMonths","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.periodOfMonths(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a period of whole months.</p> <p>The number of months will be associated with DateTimeField.PERIOD_OF_MONTHS.</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-weeks/","title":"periodOfWeeks","text":"<p>//core/io.islandtime.parser/periodOfWeeks</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-weeks/#periodofweeks","title":"periodOfWeeks","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.periodOfWeeks(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a period of whole weeks.</p> <p>The number of weeks will be associated with DateTimeField.PERIOD_OF_WEEKS.</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-years/","title":"periodOfYears","text":"<p>//core/io.islandtime.parser/periodOfYears</p>"},{"location":"api/core/core/io.islandtime.parser/period-of-years/#periodofyears","title":"periodOfYears","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.periodOfYears(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a period of whole years.</p> <p>The number of years will be associated with DateTimeField.PERIOD_OF_YEARS.</p>"},{"location":"api/core/core/io.islandtime.parser/period-sign/","title":"periodSign","text":"<p>//core/io.islandtime.parser/periodSign</p>"},{"location":"api/core/core/io.islandtime.parser/period-sign/#periodsign","title":"periodSign","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.periodSign()</code></p> <p>Parses a number's sign and populates DateTimeField.PERIOD_SIGN with <code>-1L</code>, if negative or <code>1L</code>, if positive.</p>"},{"location":"api/core/core/io.islandtime.parser/second-of-minute/","title":"secondOfMinute","text":"<p>//core/io.islandtime.parser/secondOfMinute</p>"},{"location":"api/core/core/io.islandtime.parser/second-of-minute/#secondofminute","title":"secondOfMinute","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.secondOfMinute(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a second of the minute with a variable number of digits.</p> <p>The result will be associated with DateTimeField.SECOND_OF_MINUTE.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.secondOfMinute(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a second of the minute with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.SECOND_OF_MINUTE.</p>"},{"location":"api/core/core/io.islandtime.parser/time-zone-id/","title":"timeZoneId","text":"<p>//core/io.islandtime.parser/timeZoneId</p>"},{"location":"api/core/core/io.islandtime.parser/time-zone-id/#timezoneid","title":"timeZoneId","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.timeZoneId()</code></p> <p>Parse a time zone region ID.</p> <p>The format should match that defined in the IANA time zone database. The parsed string will be associated with DateTimeParseResult.timeZoneId.</p>"},{"location":"api/core/core/io.islandtime.parser/unbounded-designator/","title":"unboundedDesignator","text":"<p>//core/io.islandtime.parser/unboundedDesignator</p>"},{"location":"api/core/core/io.islandtime.parser/unbounded-designator/#unboundeddesignator","title":"unboundedDesignator","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.unboundedDesignator()</code></p> <p>Parses the string \"..\" and populates DateTimeField.IS_UNBOUNDED with <code>1L</code>.</p>"},{"location":"api/core/core/io.islandtime.parser/utc-designator/","title":"utcDesignator","text":"<p>//core/io.islandtime.parser/utcDesignator</p>"},{"location":"api/core/core/io.islandtime.parser/utc-designator/#utcdesignator","title":"utcDesignator","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.utcDesignator()</code></p> <p>Parses the character 'Z' and populates DateTimeField.UTC_OFFSET_TOTAL_SECONDS with <code>0L</code>.</p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-hours/","title":"utcOffsetHours","text":"<p>//core/io.islandtime.parser/utcOffsetHours</p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-hours/#utcoffsethours","title":"utcOffsetHours","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.utcOffsetHours(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-minutes/","title":"utcOffsetMinutes","text":"<p>//core/io.islandtime.parser/utcOffsetMinutes</p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-minutes/#utcoffsetminutes","title":"utcOffsetMinutes","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.utcOffsetMinutes(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-seconds/","title":"utcOffsetSeconds","text":"<p>//core/io.islandtime.parser/utcOffsetSeconds</p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-seconds/#utcoffsetseconds","title":"utcOffsetSeconds","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.utcOffsetSeconds(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-sign/","title":"utcOffsetSign","text":"<p>//core/io.islandtime.parser/utcOffsetSign</p>"},{"location":"api/core/core/io.islandtime.parser/utc-offset-sign/#utcoffsetsign","title":"utcOffsetSign","text":"<p>common</p> <p><code>fun DateTimeParserBuilder.utcOffsetSign()</code></p> <p>Parses a number's sign and populates DateTimeField.UTC_OFFSET_SIGN with <code>-1L</code>, if negative or <code>1L</code>, if positive.</p>"},{"location":"api/core/core/io.islandtime.parser/year-of-era/","title":"yearOfEra","text":"<p>//core/io.islandtime.parser/yearOfEra</p>"},{"location":"api/core/core/io.islandtime.parser/year-of-era/#yearofera","title":"yearOfEra","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.yearOfEra(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a year of era with a variable number of digits.</p> <p>The result will be associated with DateTimeField.YEAR_OF_ERA.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.yearOfEra(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a year of era with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.YEAR_OF_ERA.</p>"},{"location":"api/core/core/io.islandtime.parser/year/","title":"year","text":"<p>//core/io.islandtime.parser/year</p>"},{"location":"api/core/core/io.islandtime.parser/year/#year","title":"year","text":"<p>common</p> <p><code>inline fun DateTimeParserBuilder.year(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a year with a variable number of digits.</p> <p>The result will be associated with DateTimeField.YEAR.</p> <p>common</p> <p><code>inline fun DateTimeParserBuilder.year(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a year with a fixed number of digits.</p> <p>The result will be associated with DateTimeField.YEAR.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/","title":"DateTimeParseException","text":"<p>//core/io.islandtime.parser/DateTimeParseException</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/#datetimeparseexception","title":"DateTimeParseException","text":"<p>common</p> <p><code>class DateTimeParseException(message: String? = null, val parsedString: String? = null, val errorIndex: Int = 0, cause: Throwable? = null) : DateTimeException</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/#constructors","title":"Constructors","text":"DateTimeParseException <p>common</p><code>constructor(message: String? = null, parsedString: String? = null, errorIndex: Int = 0, cause: Throwable? = null)</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/#properties","title":"Properties","text":"Name Summary cause <p>common</p><code>open val cause: Throwable?</code> errorIndex <p>common</p><code>val errorIndex: Int = 0</code> message <p>common</p><code>open val message: String?</code> parsedString <p>common</p><code>val parsedString: String? = null</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/-date-time-parse-exception/","title":"DateTimeParseException","text":"<p>//core/io.islandtime.parser/DateTimeParseException/DateTimeParseException</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/-date-time-parse-exception/#datetimeparseexception","title":"DateTimeParseException","text":"<p>common</p> <p><code>constructor(message: String? = null, parsedString: String? = null, errorIndex: Int = 0, cause: Throwable? = null)</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/error-index/","title":"errorIndex","text":"<p>//core/io.islandtime.parser/DateTimeParseException/errorIndex</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/error-index/#errorindex","title":"errorIndex","text":"<p>common</p> <p><code>val errorIndex: Int = 0</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/parsed-string/","title":"parsedString","text":"<p>//core/io.islandtime.parser/DateTimeParseException/parsedString</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-exception/parsed-string/#parsedstring","title":"parsedString","text":"<p>common</p> <p><code>val parsedString: String? = null</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/","title":"DateTimeParseResult","text":"<p>//core/io.islandtime.parser/DateTimeParseResult</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/#datetimeparseresult","title":"DateTimeParseResult","text":"<p>common</p> <p><code>data class DateTimeParseResult(val fields: MutableMap&lt;DateTimeField, Long&gt; = hashMapOf(), var timeZoneId: String? = null)</code></p> <p>The result of a parsing operation.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/#constructors","title":"Constructors","text":"DateTimeParseResult <p>common</p><code>constructor(fields: MutableMap&lt;DateTimeField, Long&gt; = hashMapOf(), timeZoneId: String? = null)</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/#properties","title":"Properties","text":"Name Summary fields <p>common</p><code>val fields: MutableMap&lt;DateTimeField, Long&gt;</code> timeZoneId <p>common</p><code>var timeZoneId: String?</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/#functions","title":"Functions","text":"Name Summary isEmpty <p>common</p><code>fun isEmpty(): Boolean</code> isNotEmpty <p>common</p><code>fun isNotEmpty(): Boolean</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/-date-time-parse-result/","title":"DateTimeParseResult","text":"<p>//core/io.islandtime.parser/DateTimeParseResult/DateTimeParseResult</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/-date-time-parse-result/#datetimeparseresult","title":"DateTimeParseResult","text":"<p>common</p> <p><code>constructor(fields: MutableMap&lt;DateTimeField, Long&gt; = hashMapOf(), timeZoneId: String? = null)</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/fields/","title":"fields","text":"<p>//core/io.islandtime.parser/DateTimeParseResult/fields</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/fields/#fields","title":"fields","text":"<p>common</p> <p><code>val fields: MutableMap&lt;DateTimeField, Long&gt;</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.parser/DateTimeParseResult/isEmpty</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>fun isEmpty(): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/is-not-empty/","title":"isNotEmpty","text":"<p>//core/io.islandtime.parser/DateTimeParseResult/isNotEmpty</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/is-not-empty/#isnotempty","title":"isNotEmpty","text":"<p>common</p> <p><code>fun isNotEmpty(): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/time-zone-id/","title":"timeZoneId","text":"<p>//core/io.islandtime.parser/DateTimeParseResult/timeZoneId</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parse-result/time-zone-id/#timezoneid","title":"timeZoneId","text":"<p>common</p> <p><code>var timeZoneId: String?</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/","title":"DateTimeParser","text":"<p>//core/io.islandtime.parser/DateTimeParser</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/#datetimeparser","title":"DateTimeParser","text":"<p>common</p> <p><code>abstract class DateTimeParser</code></p> <p>A parser that converts text into a collection of date-time fields that are understood throughout Island Time.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/#functions","title":"Functions","text":"Name Summary parse <p>common</p><code>fun parse(text: CharSequence, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeParseResult</code>Parse text into a DateTimeParseResult containing all parsed fields."},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/parse/","title":"parse","text":"<p>//core/io.islandtime.parser/DateTimeParser/parse</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/parse/#parse","title":"parse","text":"<p>common</p> <p><code>fun parse(text: CharSequence, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeParseResult</code></p> <p>Parse text into a DateTimeParseResult containing all parsed fields.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/parse/#return","title":"Return","text":"<p>a result containing all of the parsed fields</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/parse/#parameters","title":"Parameters","text":"<p>common</p> text text to parse settings customize parsing behavior"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser/parse/#throws","title":"Throws","text":"DateTimeParseException if parsing failed"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/","title":"DateTimeParserBuilder","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/#datetimeparserbuilder","title":"DateTimeParserBuilder","text":"<p>common</p> <p><code>interface DateTimeParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/#functions","title":"Functions","text":"Name Summary amPm <p>common</p><code>fun DateTimeParserBuilder.amPm()</code>Parse the AM or PM of the day from its textual representation. anyOf <p>common</p><code>abstract fun anyOf(vararg childParsers: DateTimeParser)</code>Try each of the parsers defined by childParsers until one succeeds. If none succeed, parsing is considered to have failed.<p>common</p><code>abstract fun anyOf(vararg builders: DateTimeParserBuilder.() -&gt; Unit)</code>Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. caseInsensitive <p>common</p><code>abstract fun caseInsensitive(builder: DateTimeParserBuilder.() -&gt; Unit)</code>Force parsing to be case-insensitive within this block. caseSensitive <p>common</p><code>abstract fun caseSensitive(builder: DateTimeParserBuilder.() -&gt; Unit)</code>Force parsing to be case-sensitive within this block. childParser <p>common</p><code>abstract fun childParser(childParser: DateTimeParser)</code>Use a parser that has been defined outside of this builder. dayOfMonth <p>common</p><code>inline fun DateTimeParserBuilder.dayOfMonth(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the month value with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.dayOfMonth(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the month value with a variable number of digits. dayOfWeekNumber <p>common</p><code>inline fun DateTimeParserBuilder.dayOfWeekNumber(length: Int = 1, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of week number with a fixed number of digits. dayOfYear <p>common</p><code>inline fun DateTimeParserBuilder.dayOfYear(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the year value with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.dayOfYear(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a day of the year value with a variable number of digits. decimalNumber <p>common</p><code>abstract fun decimalNumber(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code>Parse a decimal number. durationOfFractionalSeconds <p>common</p><code>inline fun DateTimeParserBuilder.durationOfFractionalSeconds(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of fractional seconds. durationOfHours <p>common</p><code>inline fun DateTimeParserBuilder.durationOfHours(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of whole hours. durationOfMinutes <p>common</p><code>inline fun DateTimeParserBuilder.durationOfMinutes(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of whole minutes. durationOfSeconds <p>common</p><code>inline fun DateTimeParserBuilder.durationOfSeconds(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a duration of whole seconds. era <p>common</p><code>fun DateTimeParserBuilder.era(style: TextStyle)</code>Parse an era from its textual representation in a specific style.<p>common</p><code>fun DateTimeParserBuilder.era(styles: Set&lt;TextStyle&gt;)</code>Parse an era from its textual representation in any of the specified styles. fractionalSecondOfMinute <p>common</p><code>inline fun DateTimeParserBuilder.fractionalSecondOfMinute(wholeLength: Int, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code>Parse a fractional second of the minute with a fixed number of characters representing the whole second.<p>common</p><code>inline fun DateTimeParserBuilder.fractionalSecondOfMinute(wholeLength: IntRange = 1..2, fractionLength: IntRange = 0..9, fractionScale: Int = 9, crossinline builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code>Parse a fractional second of the minute. hourOfDay <p>common</p><code>inline fun DateTimeParserBuilder.hourOfDay(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse an hour of the day with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.hourOfDay(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse an hour of the day with a variable number of digits. literal <p>common</p><code>abstract fun literal(char: Char, builder: LiteralParserBuilder.() -&gt; Unit = {})</code>Parse a Char literal.<p>common</p><code>abstract fun literal(string: String, builder: LiteralParserBuilder.() -&gt; Unit = {})</code>Parse a String literal. localizedDayOfWeek <p>common</p><code>fun DateTimeParserBuilder.localizedDayOfWeek(style: TextStyle)</code>Parse a day of the week from its textual representation in a specific style.<p>common</p><code>fun DateTimeParserBuilder.localizedDayOfWeek(styles: Set&lt;TextStyle&gt;)</code>Parse a day of the week from its textual representation in any of the specified styles. localizedMonth <p>common</p><code>fun DateTimeParserBuilder.localizedMonth(style: TextStyle)</code>Parse a month from its textual representation in a specific style.<p>common</p><code>fun DateTimeParserBuilder.localizedMonth(styles: Set&lt;TextStyle&gt;)</code>Parse a month from its textual representation in any of the specified styles. localizedText <p>common</p><code>abstract fun localizedText(field: DateTimeField, styles: Set&lt;TextStyle&gt;)</code>Parse localized text associated with a particular DateTimeField in any of the specified styles. If successful, the field's value will be populated. If no text is known for the field or a match can't be found, the parsing operation will return an error. minuteOfHour <p>common</p><code>inline fun DateTimeParserBuilder.minuteOfHour(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a minute of the hour with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.minuteOfHour(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a minute of the hour with a variable number of digits. monthNumber <p>common</p><code>inline fun DateTimeParserBuilder.monthNumber(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a month of year number with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.monthNumber(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a month of year value with a variable number of digits. optional <p>common</p><code>abstract fun optional(builder: DateTimeParserBuilder.() -&gt; Unit)</code>Make parsing optional within a block. periodOfDays <p>common</p><code>inline fun DateTimeParserBuilder.periodOfDays(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole days. periodOfMonths <p>common</p><code>inline fun DateTimeParserBuilder.periodOfMonths(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole months. periodOfWeeks <p>common</p><code>inline fun DateTimeParserBuilder.periodOfWeeks(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole weeks. periodOfYears <p>common</p><code>inline fun DateTimeParserBuilder.periodOfYears(length: IntRange = 1..10, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a period of whole years. periodSign <p>common</p><code>fun DateTimeParserBuilder.periodSign()</code>Parses a number's sign and populates DateTimeField.PERIOD_SIGN with <code>-1L</code>, if negative or <code>1L</code>, if positive. secondOfMinute <p>common</p><code>inline fun DateTimeParserBuilder.secondOfMinute(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a second of the minute with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.secondOfMinute(length: IntRange = 1..2, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a second of the minute with a variable number of digits. sign <p>common</p><code>abstract fun sign(builder: SignParserBuilder.() -&gt; Unit = {})</code>Parse a character indicating the sign of a number. string <p>common</p><code>abstract fun string(length: IntRange = IntRange.EMPTY, builder: StringParserBuilder.() -&gt; Unit)</code>Parse a variable length string. timeZoneId <p>common</p><code>fun DateTimeParserBuilder.timeZoneId()</code>Parse a time zone region ID. unaryPlus <p>common</p><code>open operator fun Char.unaryPlus()</code>Parse a Char literal.<p>common</p><code>open operator fun String.unaryPlus()</code>Parse a String literal. unboundedDesignator <p>common</p><code>fun DateTimeParserBuilder.unboundedDesignator()</code>Parses the string \"..\" and populates DateTimeField.IS_UNBOUNDED with <code>1L</code>. utcDesignator <p>common</p><code>fun DateTimeParserBuilder.utcDesignator()</code>Parses the character 'Z' and populates DateTimeField.UTC_OFFSET_TOTAL_SECONDS with <code>0L</code>. utcOffsetHours <p>common</p><code>inline fun DateTimeParserBuilder.utcOffsetHours(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code> utcOffsetMinutes <p>common</p><code>inline fun DateTimeParserBuilder.utcOffsetMinutes(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code> utcOffsetSeconds <p>common</p><code>inline fun DateTimeParserBuilder.utcOffsetSeconds(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code> utcOffsetSign <p>common</p><code>fun DateTimeParserBuilder.utcOffsetSign()</code>Parses a number's sign and populates DateTimeField.UTC_OFFSET_SIGN with <code>-1L</code>, if negative or <code>1L</code>, if positive. wholeNumber <p>common</p><code>abstract fun wholeNumber(length: Int, builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a whole number of fixed length.<p>common</p><code>abstract fun wholeNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a whole number of variable length. year <p>common</p><code>inline fun DateTimeParserBuilder.year(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.year(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year with a variable number of digits. yearOfEra <p>common</p><code>inline fun DateTimeParserBuilder.yearOfEra(length: Int, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year of era with a fixed number of digits.<p>common</p><code>inline fun DateTimeParserBuilder.yearOfEra(length: IntRange = 1..19, crossinline builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code>Parse a year of era with a variable number of digits."},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/any-of/","title":"anyOf","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/anyOf</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/any-of/#anyof","title":"anyOf","text":"<p>common</p> <p><code>abstract fun anyOf(vararg builders: DateTimeParserBuilder.() -&gt; Unit)</code></p> <p>Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed.</p> <p>common</p> <p><code>abstract fun anyOf(vararg childParsers: DateTimeParser)</code></p> <p>Try each of the parsers defined by childParsers until one succeeds. If none succeed, parsing is considered to have failed.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/case-insensitive/","title":"caseInsensitive","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/caseInsensitive</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/case-insensitive/#caseinsensitive","title":"caseInsensitive","text":"<p>common</p> <p><code>abstract fun caseInsensitive(builder: DateTimeParserBuilder.() -&gt; Unit)</code></p> <p>Force parsing to be case-insensitive within this block.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/case-sensitive/","title":"caseSensitive","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/caseSensitive</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/case-sensitive/#casesensitive","title":"caseSensitive","text":"<p>common</p> <p><code>abstract fun caseSensitive(builder: DateTimeParserBuilder.() -&gt; Unit)</code></p> <p>Force parsing to be case-sensitive within this block.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/child-parser/","title":"childParser","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/childParser</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/child-parser/#childparser","title":"childParser","text":"<p>common</p> <p><code>abstract fun childParser(childParser: DateTimeParser)</code></p> <p>Use a parser that has been defined outside of this builder.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/decimal-number/","title":"decimalNumber","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/decimalNumber</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/decimal-number/#decimalnumber","title":"decimalNumber","text":"<p>common</p> <p><code>abstract fun decimalNumber(wholeLength: IntRange = 1..19, fractionLength: IntRange = 0..9, fractionScale: Int = 9, builder: DecimalNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a decimal number.</p> <p>If the minimum fractionLength is zero, a decimal separator isn't required.</p> <p>The characters associated with a decimal separator are controlled by the DateTimeParserSettings. By default, this is '.' or ',' as specified in ISO-8601. The characters may be overridden by using a different NumberStyle.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/decimal-number/#parameters","title":"Parameters","text":"<p>common</p> wholeLength the number of digits to parse from the whole part, excluding sign fractionLength the number of digits to parse from the fraction part fractionScale the number of digits to normalize the fraction to -- by default 9, indicating nanoseconds builder configure parser behavior"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/decimal-number/#see-also","title":"See also","text":"NumberStyle"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/literal/","title":"literal","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/literal</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/literal/#literal","title":"literal","text":"<p>common</p> <p><code>abstract fun literal(char: Char, builder: LiteralParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a Char literal.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/literal/#parameters","title":"Parameters","text":"<p>common</p> char the character to match builder configure the parser behavior <p>common</p> <p><code>abstract fun literal(string: String, builder: LiteralParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a String literal.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/literal/#parameters_1","title":"Parameters","text":"<p>common</p> string the string to match builder configure the parser behavior"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/localized-text/","title":"localizedText","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/localizedText</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/localized-text/#localizedtext","title":"localizedText","text":"<p>common</p> <p><code>abstract fun localizedText(field: DateTimeField, styles: Set&lt;TextStyle&gt;)</code></p> <p>Parse localized text associated with a particular DateTimeField in any of the specified styles. If successful, the field's value will be populated. If no text is known for the field or a match can't be found, the parsing operation will return an error.</p> <p>The locale used when matching text is determined by the DateTimeParserSettings in use. Text is provided by the configured DateTimeTextProvider. Be mindful that this text may differ between platforms and devices. If at all possible, non-localized representations should be used instead.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/localized-text/#parameters","title":"Parameters","text":"<p>common</p> field the field to match text for styles the styles of text to match"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/localized-text/#see-also","title":"See also","text":"DateTimeParserSettings.locale DateTimeTextProvider"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/optional/","title":"optional","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/optional</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/optional/#optional","title":"optional","text":"<p>common</p> <p><code>abstract fun optional(builder: DateTimeParserBuilder.() -&gt; Unit)</code></p> <p>Make parsing optional within a block.</p> <p>If any of the parsers defined within builder fail, the parse result will be reset to its state before the block started and parsing will continue on, assuming there are additional parsers remaining.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/optional/#parameters","title":"Parameters","text":"<p>common</p> builder define the parsers that should be considered 'optional'"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/sign/","title":"sign","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/sign</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/sign/#sign","title":"sign","text":"<p>common</p> <p><code>abstract fun sign(builder: SignParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a character indicating the sign of a number.</p> <p>The characters associated with a number's sign are controlled by the DateTimeParserSettings. By default, this is '+', '-', or '\u2212' as specified in ISO-8601. The characters may be overridden by using a different NumberStyle.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/sign/#parameters","title":"Parameters","text":"<p>common</p> builder configure parser behavior"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/sign/#see-also","title":"See also","text":"NumberStyle"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/string/","title":"string","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/string</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/string/#string","title":"string","text":"<p>common</p> <p><code>abstract fun string(length: IntRange = IntRange.EMPTY, builder: StringParserBuilder.() -&gt; Unit)</code></p> <p>Parse a variable length string.</p> <p>Each character will be parsed starting from the current position until either the maximum number of characters allowed by length is reached or parsing is stopped by a StringParserBuilder.onEachChar handler.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/string/#parameters","title":"Parameters","text":"<p>common</p> length restricts the length of the string to a certain range -- no restrictions if the range is empty builder configure the parser behavior"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/unary-plus/","title":"unaryPlus","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/unaryPlus</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/unary-plus/#unaryplus","title":"unaryPlus","text":"<p>common</p> <p><code>open operator fun Char.unaryPlus()</code></p> <p>Parse a Char literal.</p> <p>common</p> <p><code>open operator fun String.unaryPlus()</code></p> <p>Parse a String literal.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/whole-number/","title":"wholeNumber","text":"<p>//core/io.islandtime.parser/DateTimeParserBuilder/wholeNumber</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/whole-number/#wholenumber","title":"wholeNumber","text":"<p>common</p> <p><code>abstract fun wholeNumber(length: Int, builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a whole number of fixed length.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/whole-number/#parameters","title":"Parameters","text":"<p>common</p> length the number of characters to parse, excluding any sign builder configure parser behavior <p>common</p> <p><code>abstract fun wholeNumber(length: IntRange = 1..19, builder: WholeNumberParserBuilder.() -&gt; Unit = {})</code></p> <p>Parse a whole number of variable length.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-builder/whole-number/#parameters_1","title":"Parameters","text":"<p>common</p> length the number of characters to parse, excluding any sign builder configure parser behavior"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-dsl/","title":"DateTimeParserDsl","text":"<p>//core/io.islandtime.parser/DateTimeParserDsl</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-dsl/#datetimeparserdsl","title":"DateTimeParserDsl","text":"<p>common</p> <p><code>@DslMarker <p>annotation class DateTimeParserDsl</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/","title":"DateTimeParserSettings","text":"<p>//core/io.islandtime.parser/DateTimeParserSettings</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/#datetimeparsersettings","title":"DateTimeParserSettings","text":"<p>common</p> <p><code>data class DateTimeParserSettings(val numberStyle: NumberStyle = NumberStyle.DEFAULT, val locale: () -&gt; Locale = { defaultLocale() }, val isCaseSensitive: Boolean = true)</code></p> <p>Settings that control the parsing behavior.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/#constructors","title":"Constructors","text":"DateTimeParserSettings <p>common</p><code>constructor(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: Locale, isCaseSensitive: Boolean = true)</code><code>constructor(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -&gt; Locale = { defaultLocale() }, isCaseSensitive: Boolean = true)</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/#properties","title":"Properties","text":"Name Summary isCaseSensitive <p>common</p><code>val isCaseSensitive: Boolean = true</code> locale <p>common</p><code>val locale: () -&gt; Locale</code>A function that will be invoked to provide a locale if one is needed during parsing. numberStyle <p>common</p><code>val numberStyle: NumberStyle</code>Defines the set of characters that should be used when parsing numbers."},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/-date-time-parser-settings/","title":"DateTimeParserSettings","text":"<p>//core/io.islandtime.parser/DateTimeParserSettings/DateTimeParserSettings</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/-date-time-parser-settings/#datetimeparsersettings","title":"DateTimeParserSettings","text":"<p>common</p> <p><code>constructor(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: Locale, isCaseSensitive: Boolean = true)</code></p> <p><code>constructor(numberStyle: NumberStyle = NumberStyle.DEFAULT, locale: () -&gt; Locale = { defaultLocale() }, isCaseSensitive: Boolean = true)</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/is-case-sensitive/","title":"isCaseSensitive","text":"<p>//core/io.islandtime.parser/DateTimeParserSettings/isCaseSensitive</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/is-case-sensitive/#iscasesensitive","title":"isCaseSensitive","text":"<p>common</p> <p><code>val isCaseSensitive: Boolean = true</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/locale/","title":"locale","text":"<p>//core/io.islandtime.parser/DateTimeParserSettings/locale</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/locale/#locale","title":"locale","text":"<p>common</p> <p><code>val locale: () -&gt; Locale</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/number-style/","title":"numberStyle","text":"<p>//core/io.islandtime.parser/DateTimeParserSettings/numberStyle</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/number-style/#numberstyle","title":"numberStyle","text":"<p>common</p> <p><code>val numberStyle: NumberStyle</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/-companion/","title":"Companion","text":"<p>//core/io.islandtime.parser/DateTimeParserSettings/Companion</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/-companion/#properties","title":"Properties","text":"Name Summary DEFAULT <p>common</p><code>val DEFAULT: DateTimeParserSettings</code>The default parser settings."},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/-companion/-d-e-f-a-u-l-t/","title":"DEFAULT","text":"<p>//core/io.islandtime.parser/DateTimeParserSettings/Companion/DEFAULT</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parser-settings/-companion/-d-e-f-a-u-l-t/#default","title":"DEFAULT","text":"<p>common</p> <p><code>val DEFAULT: DateTimeParserSettings</code></p> <p>The default parser settings.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/","title":"DateTimeParsers","text":"<p>//core/io.islandtime.parser/DateTimeParsers</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/#datetimeparsers","title":"DateTimeParsers","text":"<p>common</p> <p><code>object DateTimeParsers</code></p> <p>A set of predefined parsers.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/#types","title":"Types","text":"Name Summary Iso <p>common</p><code>object Iso</code>ISO-8601 parsers."},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/","title":"Iso","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/#iso","title":"Iso","text":"<p>common</p> <p><code>object Iso</code></p> <p>ISO-8601 parsers.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/#types","title":"Types","text":"Name Summary Basic <p>common</p><code>object Basic</code> Extended <p>common</p><code>object Extended</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/#properties","title":"Properties","text":"Name Summary CALENDAR_DATE <p>common</p><code>val CALENDAR_DATE: DateTimeParser</code>Parse ISO-8601 calendar dates in either basic or extended format. DATE <p>common</p><code>val DATE: DateTimeParser</code>Parse ISO-8601 calendar or ordinal dates in either basic or extended format. DATE_RANGE <p>common</p><code>val DATE_RANGE: GroupedDateTimeParser</code>Parse an ISO-8601 time interval between two dates in either basic or extended format. DATE_TIME <p>common</p><code>val DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date and time of day in either basic or extended format. DATE_TIME_INTERVAL <p>common</p><code>val DATE_TIME_INTERVAL: GroupedDateTimeParser</code> DURATION <p>common</p><code>val DURATION: DateTimeParser</code>Parse an ISO-8601 period containing only the day and time components. INSTANT <p>common</p><code>val INSTANT: DateTimeParser</code>Parse an ISO-8601 date-time with the zero UTC offset designator in either basic or extended format. INSTANT_INTERVAL <p>common</p><code>val INSTANT_INTERVAL: GroupedDateTimeParser</code> OFFSET_DATE_TIME <p>common</p><code>val OFFSET_DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date, time of day, and UTC offset in either basic or extended format. OFFSET_DATE_TIME_INTERVAL <p>common</p><code>val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser</code> OFFSET_TIME <p>common</p><code>val OFFSET_TIME: DateTimeParser</code>Parse an ISO-8601 time of day and UTC offset in either basic or extended format. ORDINAL_DATE <p>common</p><code>val ORDINAL_DATE: DateTimeParser</code>Parse ISO-8601 ordinal dates in either basic or extended format. PERIOD <p>common</p><code>val PERIOD: DateTimeParser</code>Parse an ISO-8601 period without any time components. TIME <p>common</p><code>val TIME: DateTimeParser</code>Parse an ISO-8601 time of day in either basic or extended format. UTC_OFFSET <p>common</p><code>val UTC_OFFSET: DateTimeParser</code>Parse an ISO-8601 UTC offset in either basic or extended format. YEAR <p>common</p><code>val YEAR: DateTimeParser</code>Parse an ISO-8601 standalone year. Note that not all formats supported by this parser are valid when a year is combined with other fields. YEAR_MONTH <p>common</p><code>val YEAR_MONTH: DateTimeParser</code>Parse an ISO-8601 year-month. The standard supports only extended format. ZONED_DATE_TIME <p>common</p><code>val ZONED_DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in either basic or extended format. ZONED_DATE_TIME_INTERVAL <p>common</p><code>val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-c-a-l-e-n-d-a-r_-d-a-t-e/","title":"CALENDAR_DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/CALENDAR_DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-c-a-l-e-n-d-a-r_-d-a-t-e/#calendar_date","title":"CALENDAR_DATE","text":"<p>common</p> <p><code>val CALENDAR_DATE: DateTimeParser</code></p> <p>Parse ISO-8601 calendar dates in either basic or extended format.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e/","title":"DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e/#date","title":"DATE","text":"<p>common</p> <p><code>val DATE: DateTimeParser</code></p> <p>Parse ISO-8601 calendar or ordinal dates in either basic or extended format.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-r-a-n-g-e/","title":"DATE_RANGE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/DATE_RANGE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-r-a-n-g-e/#date_range","title":"DATE_RANGE","text":"<p>common</p> <p><code>val DATE_RANGE: GroupedDateTimeParser</code></p> <p>Parse an ISO-8601 time interval between two dates in either basic or extended format.</p> <p>Examples:</p> <ul><li>`1990-01-04/1991-08-30`</li><li>`../19910830`</li><li>`19900104/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e/","title":"DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e/#date_time","title":"DATE_TIME","text":"<p>common</p> <p><code>val DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date and time of day in either basic or extended format.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#date_time_interval","title":"DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-u-r-a-t-i-o-n/","title":"DURATION","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/DURATION</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-d-u-r-a-t-i-o-n/#duration","title":"DURATION","text":"<p>common</p> <p><code>val DURATION: DateTimeParser</code></p> <p>Parse an ISO-8601 period containing only the day and time components.</p> <p>Examples:</p> <ul><li>`P1DT5H6.123S`</li><li>`PT15H20M`</li><li>`PT0S`</li><li>`-PT1S`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t/","title":"INSTANT","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/INSTANT</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t/#instant","title":"INSTANT","text":"<p>common</p> <p><code>val INSTANT: DateTimeParser</code></p> <p>Parse an ISO-8601 date-time with the zero UTC offset designator in either basic or extended format.</p> <p>Examples:</p> <ul><li>`2001-05-10T00:24:00.00000Z`</li><li>`2001-05-10T00:24Z`</li><li>`20010510 0024Z`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/","title":"INSTANT_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/INSTANT_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/#instant_interval","title":"INSTANT_INTERVAL","text":"<p>common</p> <p><code>val INSTANT_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/","title":"OFFSET_DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/OFFSET_DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/#offset_date_time","title":"OFFSET_DATE_TIME","text":"<p>common</p> <p><code>val OFFSET_DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date, time of day, and UTC offset in either basic or extended format.</p> <p>Examples:</p> <ul><li>`2008-09-01T18:30-4:00`</li><li>`2008-09-01 18:30:00Z`</li><li>`20080901 1830-04`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"OFFSET_DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/OFFSET_DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#offset_date_time_interval","title":"OFFSET_DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-t-i-m-e/","title":"OFFSET_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/OFFSET_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-f-f-s-e-t_-t-i-m-e/#offset_time","title":"OFFSET_TIME","text":"<p>common</p> <p><code>val OFFSET_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 time of day and UTC offset in either basic or extended format.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-r-d-i-n-a-l_-d-a-t-e/","title":"ORDINAL_DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/ORDINAL_DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-o-r-d-i-n-a-l_-d-a-t-e/#ordinal_date","title":"ORDINAL_DATE","text":"<p>common</p> <p><code>val ORDINAL_DATE: DateTimeParser</code></p> <p>Parse ISO-8601 ordinal dates in either basic or extended format.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-p-e-r-i-o-d/","title":"PERIOD","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/PERIOD</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-p-e-r-i-o-d/#period","title":"PERIOD","text":"<p>common</p> <p><code>val PERIOD: DateTimeParser</code></p> <p>Parse an ISO-8601 period without any time components.</p> <p>Examples:</p> <ul><li>`P5Y16M3D`</li><li>`P5M-15D`</li><li>`P0D`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-t-i-m-e/","title":"TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-t-i-m-e/#time","title":"TIME","text":"<p>common</p> <p><code>val TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 time of day in either basic or extended format.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-u-t-c_-o-f-f-s-e-t/","title":"UTC_OFFSET","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/UTC_OFFSET</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-u-t-c_-o-f-f-s-e-t/#utc_offset","title":"UTC_OFFSET","text":"<p>common</p> <p><code>val UTC_OFFSET: DateTimeParser</code></p> <p>Parse an ISO-8601 UTC offset in either basic or extended format.</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r/","title":"YEAR","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/YEAR</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r/#year","title":"YEAR","text":"<p>common</p> <p><code>val YEAR: DateTimeParser</code></p> <p>Parse an ISO-8601 standalone year. Note that not all formats supported by this parser are valid when a year is combined with other fields.</p> <p>Examples:</p> <ul><li>`2008`</li><li>`0001`</li><li>`0000`</li><li>`-0001`</li><li>`+0123456789`</li><li>`Y12345`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r_-m-o-n-t-h/","title":"YEAR_MONTH","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/YEAR_MONTH</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-y-e-a-r_-m-o-n-t-h/#year_month","title":"YEAR_MONTH","text":"<p>common</p> <p><code>val YEAR_MONTH: DateTimeParser</code></p> <p>Parse an ISO-8601 year-month. The standard supports only extended format.</p> <p>Example:</p> <ul><li>`2008-09`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/","title":"ZONED_DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/ZONED_DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/#zoned_date_time","title":"ZONED_DATE_TIME","text":"<p>common</p> <p><code>val ZONED_DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in either basic or extended format.</p> <p>Examples:</p> <ul><li>`2008-09-01T18:30-4:00[America/New_York]`</li><li>`2008-09-01 18:30:00Z`</li><li>`20080901 1830-04[America/New_York]`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"ZONED_DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/ZONED_DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#zoned_date_time_interval","title":"ZONED_DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/","title":"Basic","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/#basic","title":"Basic","text":"<p>common</p> <p><code>object Basic</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/#properties","title":"Properties","text":"Name Summary CALENDAR_DATE <p>common</p><code>val CALENDAR_DATE: DateTimeParser</code> DATE <p>common</p><code>val DATE: DateTimeParser</code> DATE_RANGE <p>common</p><code>val DATE_RANGE: GroupedDateTimeParser</code>Parse an ISO-8601 time interval between two dates in basic format. DATE_TIME <p>common</p><code>val DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date and time of day in basic format. DATE_TIME_INTERVAL <p>common</p><code>val DATE_TIME_INTERVAL: GroupedDateTimeParser</code> INSTANT <p>common</p><code>val INSTANT: DateTimeParser</code>Parse an ISO-8601 date-time with the zero UTC offset designator in basic format. INSTANT_INTERVAL <p>common</p><code>val INSTANT_INTERVAL: GroupedDateTimeParser</code> OFFSET_DATE_TIME <p>common</p><code>val OFFSET_DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date, time of day, and UTC offset in basic format. OFFSET_DATE_TIME_INTERVAL <p>common</p><code>val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser</code> OFFSET_TIME <p>common</p><code>val OFFSET_TIME: DateTimeParser</code> ORDINAL_DATE <p>common</p><code>val ORDINAL_DATE: DateTimeParser</code> TIME <p>common</p><code>val TIME: DateTimeParser</code> UTC_OFFSET <p>common</p><code>val UTC_OFFSET: DateTimeParser</code> ZONED_DATE_TIME <p>common</p><code>val ZONED_DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in basic format. ZONED_DATE_TIME_INTERVAL <p>common</p><code>val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-c-a-l-e-n-d-a-r_-d-a-t-e/","title":"CALENDAR_DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/CALENDAR_DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-c-a-l-e-n-d-a-r_-d-a-t-e/#calendar_date","title":"CALENDAR_DATE","text":"<p>common</p> <p><code>val CALENDAR_DATE: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e/","title":"DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e/#date","title":"DATE","text":"<p>common</p> <p><code>val DATE: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-r-a-n-g-e/","title":"DATE_RANGE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/DATE_RANGE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-r-a-n-g-e/#date_range","title":"DATE_RANGE","text":"<p>common</p> <p><code>val DATE_RANGE: GroupedDateTimeParser</code></p> <p>Parse an ISO-8601 time interval between two dates in basic format.</p> <p>Examples:</p> <ul><li>`19900104/19910830`</li><li>`../19910830`</li><li>`19900104/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e/","title":"DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e/#date_time","title":"DATE_TIME","text":"<p>common</p> <p><code>val DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date and time of day in basic format.</p> <p>Examples:</p> <ul><li>`20080901T1830`</li><li>`20080901 183000`</li><li>`20080901 1830`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#date_time_interval","title":"DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t/","title":"INSTANT","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/INSTANT</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t/#instant","title":"INSTANT","text":"<p>common</p> <p><code>val INSTANT: DateTimeParser</code></p> <p>Parse an ISO-8601 date-time with the zero UTC offset designator in basic format.</p> <p>Examples:</p> <ul><li>`20010510T002400.00000Z`</li><li>`20010510T0024Z`</li><li>`20010510 0024Z`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/","title":"INSTANT_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/INSTANT_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/#instant_interval","title":"INSTANT_INTERVAL","text":"<p>common</p> <p><code>val INSTANT_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/","title":"OFFSET_DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/OFFSET_DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/#offset_date_time","title":"OFFSET_DATE_TIME","text":"<p>common</p> <p><code>val OFFSET_DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date, time of day, and UTC offset in basic format.</p> <p>Examples:</p> <ul><li>`20080901T1830-400`</li><li>`20080901 183000Z`</li><li>`20080901 1830-04`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"OFFSET_DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/OFFSET_DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#offset_date_time_interval","title":"OFFSET_DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-t-i-m-e/","title":"OFFSET_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/OFFSET_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-f-f-s-e-t_-t-i-m-e/#offset_time","title":"OFFSET_TIME","text":"<p>common</p> <p><code>val OFFSET_TIME: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-r-d-i-n-a-l_-d-a-t-e/","title":"ORDINAL_DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/ORDINAL_DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-o-r-d-i-n-a-l_-d-a-t-e/#ordinal_date","title":"ORDINAL_DATE","text":"<p>common</p> <p><code>val ORDINAL_DATE: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-t-i-m-e/","title":"TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-t-i-m-e/#time","title":"TIME","text":"<p>common</p> <p><code>val TIME: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-u-t-c_-o-f-f-s-e-t/","title":"UTC_OFFSET","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/UTC_OFFSET</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-u-t-c_-o-f-f-s-e-t/#utc_offset","title":"UTC_OFFSET","text":"<p>common</p> <p><code>val UTC_OFFSET: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/","title":"ZONED_DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/ZONED_DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/#zoned_date_time","title":"ZONED_DATE_TIME","text":"<p>common</p> <p><code>val ZONED_DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in basic format.</p> <p>Examples:</p> <ul><li>`20080901T1830-400[America/New_York]`</li><li>`20080901 183000Z`</li><li>`20080901 1830-04[America/New_York]`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"ZONED_DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Basic/ZONED_DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-basic/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#zoned_date_time_interval","title":"ZONED_DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/","title":"Extended","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/#extended","title":"Extended","text":"<p>common</p> <p><code>object Extended</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/#properties","title":"Properties","text":"Name Summary CALENDAR_DATE <p>common</p><code>val CALENDAR_DATE: DateTimeParser</code> DATE <p>common</p><code>val DATE: DateTimeParser</code> DATE_RANGE <p>common</p><code>val DATE_RANGE: GroupedDateTimeParser</code>Parse an ISO-8601 time interval between two dates in extended format. DATE_TIME <p>common</p><code>val DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date and time of day in extended format. DATE_TIME_INTERVAL <p>common</p><code>val DATE_TIME_INTERVAL: GroupedDateTimeParser</code> INSTANT <p>common</p><code>val INSTANT: DateTimeParser</code>Parse an ISO-8601 date-time with the zero UTC offset designator in extended format. INSTANT_INTERVAL <p>common</p><code>val INSTANT_INTERVAL: GroupedDateTimeParser</code> OFFSET_DATE_TIME <p>common</p><code>val OFFSET_DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date, time of day, and UTC offset in extended format. OFFSET_DATE_TIME_INTERVAL <p>common</p><code>val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser</code> OFFSET_TIME <p>common</p><code>val OFFSET_TIME: DateTimeParser</code> ORDINAL_DATE <p>common</p><code>val ORDINAL_DATE: DateTimeParser</code> TIME <p>common</p><code>val TIME: DateTimeParser</code> UTC_OFFSET <p>common</p><code>val UTC_OFFSET: DateTimeParser</code> ZONED_DATE_TIME <p>common</p><code>val ZONED_DATE_TIME: DateTimeParser</code>Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in extended format. ZONED_DATE_TIME_INTERVAL <p>common</p><code>val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser</code>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-c-a-l-e-n-d-a-r_-d-a-t-e/","title":"CALENDAR_DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/CALENDAR_DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-c-a-l-e-n-d-a-r_-d-a-t-e/#calendar_date","title":"CALENDAR_DATE","text":"<p>common</p> <p><code>val CALENDAR_DATE: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e/","title":"DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e/#date","title":"DATE","text":"<p>common</p> <p><code>val DATE: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-r-a-n-g-e/","title":"DATE_RANGE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/DATE_RANGE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-r-a-n-g-e/#date_range","title":"DATE_RANGE","text":"<p>common</p> <p><code>val DATE_RANGE: GroupedDateTimeParser</code></p> <p>Parse an ISO-8601 time interval between two dates in extended format.</p> <p>Examples:</p> <ul><li>`1990-01-04/1991-08-30`</li><li>`../1991-08-30`</li><li>`1990-01-04/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e/","title":"DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e/#date_time","title":"DATE_TIME","text":"<p>common</p> <p><code>val DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date and time of day in extended format.</p> <p>Examples:</p> <ul><li>`2008-09-01T18:30`</li><li>`2008-09-01 18:30:00`</li><li>`2008-09-01 18:30`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#date_time_interval","title":"DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t/","title":"INSTANT","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/INSTANT</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t/#instant","title":"INSTANT","text":"<p>common</p> <p><code>val INSTANT: DateTimeParser</code></p> <p>Parse an ISO-8601 date-time with the zero UTC offset designator in extended format.</p> <p>Examples:</p> <ul><li>`2001-05-10T00:24:00.00000Z`</li><li>`2001-05-10T00:24Z`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/","title":"INSTANT_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/INSTANT_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-i-n-s-t-a-n-t_-i-n-t-e-r-v-a-l/#instant_interval","title":"INSTANT_INTERVAL","text":"<p>common</p> <p><code>val INSTANT_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/","title":"OFFSET_DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/OFFSET_DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e/#offset_date_time","title":"OFFSET_DATE_TIME","text":"<p>common</p> <p><code>val OFFSET_DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date, time of day, and UTC offset in extended format.</p> <p>Examples:</p> <ul><li>`2008-09-01T18:30-4:00`</li><li>`2008-09-01 18:30:00Z`</li><li>`2008-09-01 18:30-04`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"OFFSET_DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/OFFSET_DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#offset_date_time_interval","title":"OFFSET_DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val OFFSET_DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-t-i-m-e/","title":"OFFSET_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/OFFSET_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-f-f-s-e-t_-t-i-m-e/#offset_time","title":"OFFSET_TIME","text":"<p>common</p> <p><code>val OFFSET_TIME: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-r-d-i-n-a-l_-d-a-t-e/","title":"ORDINAL_DATE","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/ORDINAL_DATE</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-o-r-d-i-n-a-l_-d-a-t-e/#ordinal_date","title":"ORDINAL_DATE","text":"<p>common</p> <p><code>val ORDINAL_DATE: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-t-i-m-e/","title":"TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-t-i-m-e/#time","title":"TIME","text":"<p>common</p> <p><code>val TIME: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-u-t-c_-o-f-f-s-e-t/","title":"UTC_OFFSET","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/UTC_OFFSET</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-u-t-c_-o-f-f-s-e-t/#utc_offset","title":"UTC_OFFSET","text":"<p>common</p> <p><code>val UTC_OFFSET: DateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/","title":"ZONED_DATE_TIME","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/ZONED_DATE_TIME</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e/#zoned_date_time","title":"ZONED_DATE_TIME","text":"<p>common</p> <p><code>val ZONED_DATE_TIME: DateTimeParser</code></p> <p>Parse an ISO-8601 date, time of day, UTC offset, and optionally, a non-standard region ID in extended format.</p> <p>Examples:</p> <ul><li>`2008-09-01T18:30-4:00[America/New_York]`</li><li>`2008-09-01 18:30:00Z`</li></ul>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/","title":"ZONED_DATE_TIME_INTERVAL","text":"<p>//core/io.islandtime.parser/DateTimeParsers/Iso/Extended/ZONED_DATE_TIME_INTERVAL</p>"},{"location":"api/core/core/io.islandtime.parser/-date-time-parsers/-iso/-extended/-z-o-n-e-d_-d-a-t-e_-t-i-m-e_-i-n-t-e-r-v-a-l/#zoned_date_time_interval","title":"ZONED_DATE_TIME_INTERVAL","text":"<p>common</p> <p><code>val ZONED_DATE_TIME_INTERVAL: GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-decimal-number-parser-builder/","title":"DecimalNumberParserBuilder","text":"<p>//core/io.islandtime.parser/DecimalNumberParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-decimal-number-parser-builder/#decimalnumberparserbuilder","title":"DecimalNumberParserBuilder","text":"<p>common</p> <p><code>interface DecimalNumberParserBuilder : NumberParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-decimal-number-parser-builder/#functions","title":"Functions","text":"Name Summary associateWith <p>common</p><code>open fun associateWith(wholeField: DateTimeField, fractionField: DateTimeField)</code>Associate both the whole and fractional part of the result with a particular DateTimeField, populating their values when parsing succeeds. enforceSignStyle <p>common</p><code>abstract fun enforceSignStyle(signStyle: SignStyle)</code>Enforce a particular sign style. onParsed <p>common</p><code>abstract fun onParsed(action: DateTimeParseResult.(whole: Long, fraction: Long) -&gt; Unit)</code>Perform an action when parsing succeeds."},{"location":"api/core/core/io.islandtime.parser/-decimal-number-parser-builder/associate-with/","title":"associateWith","text":"<p>//core/io.islandtime.parser/DecimalNumberParserBuilder/associateWith</p>"},{"location":"api/core/core/io.islandtime.parser/-decimal-number-parser-builder/associate-with/#associatewith","title":"associateWith","text":"<p>common</p> <p><code>open fun associateWith(wholeField: DateTimeField, fractionField: DateTimeField)</code></p> <p>Associate both the whole and fractional part of the result with a particular DateTimeField, populating their values when parsing succeeds.</p>"},{"location":"api/core/core/io.islandtime.parser/-decimal-number-parser-builder/on-parsed/","title":"onParsed","text":"<p>//core/io.islandtime.parser/DecimalNumberParserBuilder/onParsed</p>"},{"location":"api/core/core/io.islandtime.parser/-decimal-number-parser-builder/on-parsed/#onparsed","title":"onParsed","text":"<p>common</p> <p><code>abstract fun onParsed(action: DateTimeParseResult.(whole: Long, fraction: Long) -&gt; Unit)</code></p> <p>Perform an action when parsing succeeds.</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/","title":"GroupedDateTimeParser","text":"<p>//core/io.islandtime.parser/GroupedDateTimeParser</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/#groupeddatetimeparser","title":"GroupedDateTimeParser","text":"<p>common</p> <p><code>class GroupedDateTimeParser</code></p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/#functions","title":"Functions","text":"Name Summary parse <p>common</p><code>fun parse(text: CharSequence, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): List&lt;DateTimeParseResult&gt;</code>Parse text into a list of results, each containing the parsed fields associated with a particular group."},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/parse/","title":"parse","text":"<p>//core/io.islandtime.parser/GroupedDateTimeParser/parse</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/parse/#parse","title":"parse","text":"<p>common</p> <p><code>fun parse(text: CharSequence, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): List&lt;DateTimeParseResult&gt;</code></p> <p>Parse text into a list of results, each containing the parsed fields associated with a particular group.</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/parse/#return","title":"Return","text":"<p>a list of results, matching the number of groups defined in the parser</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/parse/#parameters","title":"Parameters","text":"<p>common</p> text text to parse settings customize parsing behavior"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser/parse/#throws","title":"Throws","text":"DateTimeParseException if parsing failed"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/","title":"GroupedDateTimeParserBuilder","text":"<p>//core/io.islandtime.parser/GroupedDateTimeParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/#groupeddatetimeparserbuilder","title":"GroupedDateTimeParserBuilder","text":"<p>common</p> <p><code>interface GroupedDateTimeParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/#functions","title":"Functions","text":"Name Summary anyOf <p>common</p><code>abstract fun anyOf(vararg childParsers: GroupedDateTimeParser)</code>Try each of the parsers defined by childParsers until one succeeds and include all of its groups in the parsing results. If none of the parsers succeed, parsing is considered to have failed at the starting index.<p>common</p><code>abstract fun anyOf(vararg builders: GroupedDateTimeParserBuilder.() -&gt; Unit)</code>Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed. group <p>common</p><code>abstract fun group(builder: DateTimeParserBuilder.() -&gt; Unit)</code>Create a distinct parse result and associate any parsed data with it. literal <p>common</p><code>abstract fun literal(char: Char)</code>Parse a Char literal.<p>common</p><code>abstract fun literal(string: String)</code>Parse a String literal. unaryPlus <p>common</p><code>open operator fun Char.unaryPlus()</code>Parse a Char literal.<p>common</p><code>open operator fun String.unaryPlus()</code>Parse a String literal."},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/any-of/","title":"anyOf","text":"<p>//core/io.islandtime.parser/GroupedDateTimeParserBuilder/anyOf</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/any-of/#anyof","title":"anyOf","text":"<p>common</p> <p><code>abstract fun anyOf(vararg builders: GroupedDateTimeParserBuilder.() -&gt; Unit)</code></p> <p>Try each of the parsers defined by builders until one succeeds. If none succeed, parsing is considered to have failed.</p> <p>common</p> <p><code>abstract fun anyOf(vararg childParsers: GroupedDateTimeParser)</code></p> <p>Try each of the parsers defined by childParsers until one succeeds and include all of its groups in the parsing results. If none of the parsers succeed, parsing is considered to have failed at the starting index.</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/group/","title":"group","text":"<p>//core/io.islandtime.parser/GroupedDateTimeParserBuilder/group</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/group/#group","title":"group","text":"<p>common</p> <p><code>abstract fun group(builder: DateTimeParserBuilder.() -&gt; Unit)</code></p> <p>Create a distinct parse result and associate any parsed data with it.</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/group/#parameters","title":"Parameters","text":"<p>common</p> builder define the parsers that should be associated with this result"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/","title":"literal","text":"<p>//core/io.islandtime.parser/GroupedDateTimeParserBuilder/literal</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/#literal","title":"literal","text":"<p>common</p> <p><code>abstract fun literal(char: Char)</code></p> <p>Parse a Char literal.</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/#parameters","title":"Parameters","text":"<p>common</p> char the character to match <p>common</p> <p><code>abstract fun literal(string: String)</code></p> <p>Parse a String literal.</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/literal/#parameters_1","title":"Parameters","text":"<p>common</p> string the string to match"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/unary-plus/","title":"unaryPlus","text":"<p>//core/io.islandtime.parser/GroupedDateTimeParserBuilder/unaryPlus</p>"},{"location":"api/core/core/io.islandtime.parser/-grouped-date-time-parser-builder/unary-plus/#unaryplus","title":"unaryPlus","text":"<p>common</p> <p><code>open operator fun Char.unaryPlus()</code></p> <p>Parse a Char literal.</p> <p>common</p> <p><code>open operator fun String.unaryPlus()</code></p> <p>Parse a String literal.</p>"},{"location":"api/core/core/io.islandtime.parser/-literal-parser-builder/","title":"LiteralParserBuilder","text":"<p>//core/io.islandtime.parser/LiteralParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-literal-parser-builder/#literalparserbuilder","title":"LiteralParserBuilder","text":"<p>common</p> <p><code>interface LiteralParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-literal-parser-builder/#functions","title":"Functions","text":"Name Summary associateWith <p>common</p><code>open fun associateWith(field: DateTimeField)</code>Associate the result with a particular DateTimeField, setting its value to <code>1L</code> when parsing succeeds. onParsed <p>common</p><code>abstract fun onParsed(action: DateTimeParseResult.() -&gt; Unit)</code>Perform an action when parsing succeeds."},{"location":"api/core/core/io.islandtime.parser/-literal-parser-builder/associate-with/","title":"associateWith","text":"<p>//core/io.islandtime.parser/LiteralParserBuilder/associateWith</p>"},{"location":"api/core/core/io.islandtime.parser/-literal-parser-builder/associate-with/#associatewith","title":"associateWith","text":"<p>common</p> <p><code>open fun associateWith(field: DateTimeField)</code></p> <p>Associate the result with a particular DateTimeField, setting its value to <code>1L</code> when parsing succeeds.</p>"},{"location":"api/core/core/io.islandtime.parser/-literal-parser-builder/on-parsed/","title":"onParsed","text":"<p>//core/io.islandtime.parser/LiteralParserBuilder/onParsed</p>"},{"location":"api/core/core/io.islandtime.parser/-literal-parser-builder/on-parsed/#onparsed","title":"onParsed","text":"<p>common</p> <p><code>abstract fun onParsed(action: DateTimeParseResult.() -&gt; Unit)</code></p> <p>Perform an action when parsing succeeds.</p>"},{"location":"api/core/core/io.islandtime.parser/-number-parser-builder/","title":"NumberParserBuilder","text":"<p>//core/io.islandtime.parser/NumberParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-number-parser-builder/#numberparserbuilder","title":"NumberParserBuilder","text":"<p><code>interface NumberParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-number-parser-builder/#inheritors","title":"Inheritors","text":"WholeNumberParserBuilder DecimalNumberParserBuilder"},{"location":"api/core/core/io.islandtime.parser/-number-parser-builder/#functions","title":"Functions","text":"Name Summary enforceSignStyle <p>common</p><code>abstract fun enforceSignStyle(signStyle: SignStyle)</code>Enforce a particular sign style."},{"location":"api/core/core/io.islandtime.parser/-number-parser-builder/enforce-sign-style/","title":"enforceSignStyle","text":"<p>//core/io.islandtime.parser/NumberParserBuilder/enforceSignStyle</p>"},{"location":"api/core/core/io.islandtime.parser/-number-parser-builder/enforce-sign-style/#enforcesignstyle","title":"enforceSignStyle","text":"<p>common</p> <p><code>abstract fun enforceSignStyle(signStyle: SignStyle)</code></p> <p>Enforce a particular sign style.</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-parser-builder/","title":"SignParserBuilder","text":"<p>//core/io.islandtime.parser/SignParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-parser-builder/#signparserbuilder","title":"SignParserBuilder","text":"<p>common</p> <p><code>interface SignParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-sign-parser-builder/#functions","title":"Functions","text":"Name Summary associateWith <p>common</p><code>open fun associateWith(field: DateTimeField)</code>Associate the result with a particular DateTimeField, setting it to <code>-1L</code> when negative or <code>1L</code> when positive. onParsed <p>common</p><code>abstract fun onParsed(action: DateTimeParseResult.(parsed: Int) -&gt; Unit)</code>Perform an action when a number's sign has been successfully parsed"},{"location":"api/core/core/io.islandtime.parser/-sign-parser-builder/associate-with/","title":"associateWith","text":"<p>//core/io.islandtime.parser/SignParserBuilder/associateWith</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-parser-builder/associate-with/#associatewith","title":"associateWith","text":"<p>common</p> <p><code>open fun associateWith(field: DateTimeField)</code></p> <p>Associate the result with a particular DateTimeField, setting it to <code>-1L</code> when negative or <code>1L</code> when positive.</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-parser-builder/on-parsed/","title":"onParsed","text":"<p>//core/io.islandtime.parser/SignParserBuilder/onParsed</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-parser-builder/on-parsed/#onparsed","title":"onParsed","text":"<p>common</p> <p><code>abstract fun onParsed(action: DateTimeParseResult.(parsed: Int) -&gt; Unit)</code></p> <p>Perform an action when a number's sign has been successfully parsed</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/","title":"SignStyle","text":"<p>//core/io.islandtime.parser/SignStyle</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/#signstyle","title":"SignStyle","text":"<p>common</p> <p><code>enum SignStyle : Enum&lt;SignStyle&gt; </code></p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/#entries","title":"Entries","text":"NEGATIVE_ONLY <p>common</p><code>NEGATIVE_ONLY</code> NEVER <p>common</p><code>NEVER</code> ALWAYS <p>common</p><code>ALWAYS</code>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;SignStyle&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/#functions","title":"Functions","text":"Name Summary valueOf <p>common</p><code>fun valueOf(value: String): SignStyle</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;SignStyle&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime.parser/-sign-style/entries/","title":"entries","text":"<p>//core/io.islandtime.parser/SignStyle/entries</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;SignStyle&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/value-of/","title":"valueOf","text":"<p>//core/io.islandtime.parser/SignStyle/valueOf</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): SignStyle</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime.parser/-sign-style/values/","title":"values","text":"<p>//core/io.islandtime.parser/SignStyle/values</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;SignStyle&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-a-l-w-a-y-s/","title":"ALWAYS","text":"<p>//core/io.islandtime.parser/SignStyle/ALWAYS</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-a-l-w-a-y-s/#always","title":"ALWAYS","text":"<p>common</p> <p><code>ALWAYS <p></p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-a-l-w-a-y-s/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-n-e-g-a-t-i-v-e_-o-n-l-y/","title":"NEGATIVE_ONLY","text":"<p>//core/io.islandtime.parser/SignStyle/NEGATIVE_ONLY</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-n-e-g-a-t-i-v-e_-o-n-l-y/#negative_only","title":"NEGATIVE_ONLY","text":"<p>common</p> <p><code>NEGATIVE_ONLY <p></p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-n-e-g-a-t-i-v-e_-o-n-l-y/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-n-e-v-e-r/","title":"NEVER","text":"<p>//core/io.islandtime.parser/SignStyle/NEVER</p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-n-e-v-e-r/#never","title":"NEVER","text":"<p>common</p> <p><code>NEVER <p></p>"},{"location":"api/core/core/io.islandtime.parser/-sign-style/-n-e-v-e-r/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/","title":"StringParseAction","text":"<p>//core/io.islandtime.parser/StringParseAction</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/#stringparseaction","title":"StringParseAction","text":"<p>common</p> <p><code>enum StringParseAction : Enum&lt;StringParseAction&gt; </code></p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/#entries","title":"Entries","text":"ACCEPT_AND_CONTINUE <p>common</p><code>ACCEPT_AND_CONTINUE</code> REJECT_AND_STOP <p>common</p><code>REJECT_AND_STOP</code>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/#properties","title":"Properties","text":"Name Summary entries <p>common</p><code>val entries: EnumEntries&lt;StringParseAction&gt;</code>Returns a representation of an immutable list of all enum entries, in the order they're declared. name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/#functions","title":"Functions","text":"Name Summary valueOf <p>common</p><code>fun valueOf(value: String): StringParseAction</code>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values <p>common</p><code>fun values(): Array&lt;StringParseAction&gt;</code>Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/entries/","title":"entries","text":"<p>//core/io.islandtime.parser/StringParseAction/entries</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/entries/#entries","title":"entries","text":"<p>common</p> <p><code>val entries: EnumEntries&lt;StringParseAction&gt;</code></p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/value-of/","title":"valueOf","text":"<p>//core/io.islandtime.parser/StringParseAction/valueOf</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/value-of/#valueof","title":"valueOf","text":"<p>common</p> <p><code>fun valueOf(value: String): StringParseAction</code></p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/values/","title":"values","text":"<p>//core/io.islandtime.parser/StringParseAction/values</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/values/#values","title":"values","text":"<p>common</p> <p><code>fun values(): Array&lt;StringParseAction&gt;</code></p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/-a-c-c-e-p-t_-a-n-d_-c-o-n-t-i-n-u-e/","title":"ACCEPT_AND_CONTINUE","text":"<p>//core/io.islandtime.parser/StringParseAction/ACCEPT_AND_CONTINUE</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/-a-c-c-e-p-t_-a-n-d_-c-o-n-t-i-n-u-e/#accept_and_continue","title":"ACCEPT_AND_CONTINUE","text":"<p>common</p> <p><code>ACCEPT_AND_CONTINUE <p></p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/-a-c-c-e-p-t_-a-n-d_-c-o-n-t-i-n-u-e/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/-r-e-j-e-c-t_-a-n-d_-s-t-o-p/","title":"REJECT_AND_STOP","text":"<p>//core/io.islandtime.parser/StringParseAction/REJECT_AND_STOP</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/-r-e-j-e-c-t_-a-n-d_-s-t-o-p/#reject_and_stop","title":"REJECT_AND_STOP","text":"<p>common</p> <p><code>REJECT_AND_STOP <p></p>"},{"location":"api/core/core/io.islandtime.parser/-string-parse-action/-r-e-j-e-c-t_-a-n-d_-s-t-o-p/#properties","title":"Properties","text":"Name Summary name <p>common</p><code>val name: String</code> ordinal <p>common</p><code>val ordinal: Int</code>"},{"location":"api/core/core/io.islandtime.parser/-string-parser-builder/","title":"StringParserBuilder","text":"<p>//core/io.islandtime.parser/StringParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parser-builder/#stringparserbuilder","title":"StringParserBuilder","text":"<p>common</p> <p><code>interface StringParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-string-parser-builder/#functions","title":"Functions","text":"Name Summary onEachChar <p>common</p><code>abstract fun onEachChar(action: DateTimeParseResult.(char: Char, index: Int) -&gt; StringParseAction)</code>Execute a block as each character in the string is encountered during parsing. onParsed <p>common</p><code>abstract fun onParsed(action: DateTimeParseResult.(parsed: String) -&gt; Unit)</code>Perform an action when parsing succeeds."},{"location":"api/core/core/io.islandtime.parser/-string-parser-builder/on-each-char/","title":"onEachChar","text":"<p>//core/io.islandtime.parser/StringParserBuilder/onEachChar</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parser-builder/on-each-char/#oneachchar","title":"onEachChar","text":"<p>common</p> <p><code>abstract fun onEachChar(action: DateTimeParseResult.(char: Char, index: Int) -&gt; StringParseAction)</code></p> <p>Execute a block as each character in the string is encountered during parsing.</p> <p>Return StringParseAction.ACCEPT_AND_CONTINUE to continue parsing or StringParseAction.REJECT_AND_STOP to reject the current character and trigger the end of parsing.</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parser-builder/on-parsed/","title":"onParsed","text":"<p>//core/io.islandtime.parser/StringParserBuilder/onParsed</p>"},{"location":"api/core/core/io.islandtime.parser/-string-parser-builder/on-parsed/#onparsed","title":"onParsed","text":"<p>common</p> <p><code>abstract fun onParsed(action: DateTimeParseResult.(parsed: String) -&gt; Unit)</code></p> <p>Perform an action when parsing succeeds.</p>"},{"location":"api/core/core/io.islandtime.parser/-whole-number-parser-builder/","title":"WholeNumberParserBuilder","text":"<p>//core/io.islandtime.parser/WholeNumberParserBuilder</p>"},{"location":"api/core/core/io.islandtime.parser/-whole-number-parser-builder/#wholenumberparserbuilder","title":"WholeNumberParserBuilder","text":"<p>common</p> <p><code>interface WholeNumberParserBuilder : NumberParserBuilder</code></p>"},{"location":"api/core/core/io.islandtime.parser/-whole-number-parser-builder/#functions","title":"Functions","text":"Name Summary associateWith <p>common</p><code>open fun associateWith(field: DateTimeField)</code>Associate the result with a particular DateTimeField, populating its value when parsing succeeds. enforceSignStyle <p>common</p><code>abstract fun enforceSignStyle(signStyle: SignStyle)</code>Enforce a particular sign style. onParsed <p>common</p><code>abstract fun onParsed(action: DateTimeParseResult.(parsed: Long) -&gt; Unit)</code>Perform an action when parsing succeeds."},{"location":"api/core/core/io.islandtime.parser/-whole-number-parser-builder/associate-with/","title":"associateWith","text":"<p>//core/io.islandtime.parser/WholeNumberParserBuilder/associateWith</p>"},{"location":"api/core/core/io.islandtime.parser/-whole-number-parser-builder/associate-with/#associatewith","title":"associateWith","text":"<p>common</p> <p><code>open fun associateWith(field: DateTimeField)</code></p> <p>Associate the result with a particular DateTimeField, populating its value when parsing succeeds.</p>"},{"location":"api/core/core/io.islandtime.parser/-whole-number-parser-builder/on-parsed/","title":"onParsed","text":"<p>//core/io.islandtime.parser/WholeNumberParserBuilder/onParsed</p>"},{"location":"api/core/core/io.islandtime.parser/-whole-number-parser-builder/on-parsed/#onparsed","title":"onParsed","text":"<p>common</p> <p><code>abstract fun onParsed(action: DateTimeParseResult.(parsed: Long) -&gt; Unit)</code></p> <p>Perform an action when parsing succeeds.</p>"},{"location":"api/core/core/io.islandtime.ranges/","title":"io.islandtime.ranges","text":"<p>//core/io.islandtime.ranges</p>"},{"location":"api/core/core/io.islandtime.ranges/#package-level-declarations","title":"Package-level declarations","text":"<p>common</p> <p>Date ranges, time intervals, and the ability to iterate over them and perform various operations.</p>"},{"location":"api/core/core/io.islandtime.ranges/#types","title":"Types","text":"Name Summary DateDayProgression <p>common</p><code>abstract class DateDayProgression : Iterable&lt;Date&gt; </code> DateMonthProgression <p>common</p><code>class DateMonthProgression : Iterable&lt;Date&gt; </code> DateRange <p>common</p><code>@Serializable(with = DateRangeIsoSerializer::class)class DateRange(val start: Date = Date.MIN, val endInclusive: Date = Date.MAX) : DateDayProgression, Interval&lt;Date&gt; , ClosedRange&lt;Date&gt; </code>An inclusive range of dates. DateTimeInterval <p>common</p><code>@Serializable(with = DateTimeIntervalIsoSerializer::class)class DateTimeInterval(val start: DateTime = UNBOUNDED.start, val endExclusive: DateTime = UNBOUNDED.endExclusive) : Interval&lt;DateTime&gt; </code>An interval between two date-times, assumed to be at the same offset from UTC. InstantInterval <p>common</p><code>@Serializable(with = InstantIntervalIsoSerializer::class)class InstantInterval(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX) : TimePointInterval&lt;Instant&gt; , TimePointProgressionBuilder&lt;Instant&gt; </code>A half-open interval between two instants. Interval <p>common</p><code>interface Interval&lt;T&gt;</code>A half-open or closed interval. OffsetDateTimeInterval <p>common</p><code>@Serializable(with = OffsetDateTimeIntervalIsoSerializer::class)class OffsetDateTimeInterval(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive) : TimePointInterval&lt;OffsetDateTime&gt; </code>A half-open interval between two offset date-times based on timeline order. TimePointInterval <p>common</p><code>abstract class TimePointInterval&lt;T : TimePoint&lt;T&gt;&gt; : Interval&lt;T&gt; </code>A half-open interval of time points. TimePointNanosecondProgression <p>common</p><code>class TimePointNanosecondProgression&lt;T : TimePoint&lt;T&gt;&gt; : TimePointProgressionBuilder&lt;T&gt; , Iterable&lt;T&gt; </code> TimePointProgressionBuilder <p>common</p><code>interface TimePointProgressionBuilder&lt;T : TimePoint&lt;T&gt;&gt;</code>A time point progression builder. TimePointSecondProgression <p>common</p><code>class TimePointSecondProgression&lt;T : TimePoint&lt;T&gt;&gt; : TimePointProgressionBuilder&lt;T&gt; , Iterable&lt;T&gt; </code> ZonedDateTimeInterval <p>common</p><code>@Serializable(with = ZonedDateTimeIntervalIsoSerializer::class)class ZonedDateTimeInterval(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive) : TimePointInterval&lt;ZonedDateTime&gt; </code>A half-open interval of zoned date-times based on timeline order."},{"location":"api/core/core/io.islandtime.ranges/#properties","title":"Properties","text":"Name Summary lengthInCenturies <p>common</p><code>val DateRange.lengthInCenturies: Centuries</code>The number of whole centuries between the start and end of this range.<p>common</p><code>val DateTimeInterval.lengthInCenturies: Centuries</code><code>val OffsetDateTimeInterval.lengthInCenturies: Centuries</code><code>val ZonedDateTimeInterval.lengthInCenturies: Centuries</code>The number of whole centuries between the start and end of this interval. lengthInDays <p>common</p><code>val DateRange.lengthInDays: Days</code>The number of days between the start and end of this range. A range is inclusive, so if the start and end date are the same, the length will be one day.<p>common</p><code>val DateTimeInterval.lengthInDays: Days</code><code>val OffsetDateTimeInterval.lengthInDays: Days</code><code>val ZonedDateTimeInterval.lengthInDays: Days</code>The number of whole days between the start and end of this interval. lengthInDecades <p>common</p><code>val DateRange.lengthInDecades: Decades</code>The number of whole decades between the start and end of this range.<p>common</p><code>val DateTimeInterval.lengthInDecades: Decades</code><code>val OffsetDateTimeInterval.lengthInDecades: Decades</code><code>val ZonedDateTimeInterval.lengthInDecades: Decades</code>The number of whole decades between the start and end of this interval. lengthInHours <p>common</p><code>val DateTimeInterval.lengthInHours: Hours</code><code>val TimePointInterval&lt;*&gt;.lengthInHours: Hours</code>The number of whole hours between the start and end of this interval. lengthInMicroseconds <p>common</p><code>val DateTimeInterval.lengthInMicroseconds: Microseconds</code><code>val TimePointInterval&lt;*&gt;.lengthInMicroseconds: Microseconds</code>The number of whole microseconds between the start and end of this interval. lengthInMilliseconds <p>common</p><code>val DateTimeInterval.lengthInMilliseconds: Milliseconds</code><code>val TimePointInterval&lt;*&gt;.lengthInMilliseconds: Milliseconds</code>The number of whole milliseconds between the start and end of this interval. lengthInMinutes <p>common</p><code>val DateTimeInterval.lengthInMinutes: Minutes</code><code>val TimePointInterval&lt;*&gt;.lengthInMinutes: Minutes</code>The number of whole minutes between the start and end of this interval. lengthInMonths <p>common</p><code>val DateRange.lengthInMonths: Months</code>The number of whole months between the start and end of this range.<p>common</p><code>val DateTimeInterval.lengthInMonths: Months</code><code>val OffsetDateTimeInterval.lengthInMonths: Months</code><code>val ZonedDateTimeInterval.lengthInMonths: Months</code>The number of whole months between the start and end of this interval. lengthInNanoseconds <p>common</p><code>val DateTimeInterval.lengthInNanoseconds: Nanoseconds</code><code>val TimePointInterval&lt;*&gt;.lengthInNanoseconds: Nanoseconds</code>The number of nanoseconds between the start and end of this interval. lengthInSeconds <p>common</p><code>val DateTimeInterval.lengthInSeconds: Seconds</code><code>val TimePointInterval&lt;*&gt;.lengthInSeconds: Seconds</code>The number of whole seconds between the start and end of this interval. lengthInWeeks <p>common</p><code>val DateRange.lengthInWeeks: Weeks</code>The number of whole weeks between the start and end of this range.<p>common</p><code>val DateTimeInterval.lengthInWeeks: Weeks</code><code>val OffsetDateTimeInterval.lengthInWeeks: Weeks</code><code>val ZonedDateTimeInterval.lengthInWeeks: Weeks</code>The number of whole weeks between the start and end of this interval. lengthInYears <p>common</p><code>val DateRange.lengthInYears: Years</code>The number of whole years between the start and end of this range.<p>common</p><code>val DateTimeInterval.lengthInYears: Years</code><code>val OffsetDateTimeInterval.lengthInYears: Years</code><code>val ZonedDateTimeInterval.lengthInYears: Years</code>The number of whole years between the start and end of this interval."},{"location":"api/core/core/io.islandtime.ranges/#functions","title":"Functions","text":"Name Summary asZonedDateTimeInterval <p>common</p><code>fun OffsetDateTimeInterval.asZonedDateTimeInterval(): ZonedDateTimeInterval</code>Converts this interval to an equivalent ZonedDateTimeInterval where both endpoints are given a fixed-offset time zone. at <p>common</p><code>infix fun DateRange.at(zone: TimeZone): ZonedDateTimeInterval</code>Combines this DateRange with a TimeZone to create a ZonedDateTimeInterval between the start of the first day and the end of the last day in zone.<p>common</p><code>infix fun DateTimeInterval.at(zone: TimeZone): ZonedDateTimeInterval</code>Combines this DateTimeInterval with a TimeZone to create a ZonedDateTimeInterval where both endpoints are in zone.<p>common</p><code>infix fun InstantInterval.at(zone: TimeZone): ZonedDateTimeInterval</code>Combines this InstantInterval with a TimeZone to create an equivalent ZonedDateTimeInterval where both endpoints are in zone. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value.<p>common</p><code>operator fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.contains(value: TimePoint&lt;*&gt;?): Boolean</code>Checks if this interval contains value. This will always return <code>false</code> if value is <code>null</code>. downTo <p>common</p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; T.downTo(to: T): TimePointProgressionBuilder&lt;T&gt;</code>Creates a progression of time points in descending order.<p>common</p><code>infix fun Date.downTo(to: Date): DateDayProgression</code>Creates a progression of dates in descending order. random <p>common</p><code>fun DateRange.random(): Date</code>Returns a random date within this range using the default random number generator.<p>common</p><code>fun DateTimeInterval.random(): DateTime</code><code>fun InstantInterval.random(): Instant</code>Returns a random date within this interval using the default random number generator.<p>common</p><code>fun OffsetDateTimeInterval.random(): OffsetDateTime</code>Returns a random date within this interval using the default random number generator. The offset of the start date-time will be used.<p>common</p><code>fun ZonedDateTimeInterval.random(): ZonedDateTime</code>Returns a random date within this interval using the default random number generator. The zone of the start date-time will be used.<p>common</p><code>fun DateRange.random(random: Random): Date</code>Returns a random date within this range using the supplied random number generator.<p>common</p><code>fun DateTimeInterval.random(random: Random): DateTime</code><code>fun InstantInterval.random(random: Random): Instant</code>Returns a random date within this interval using the supplied random number generator.<p>common</p><code>fun OffsetDateTimeInterval.random(random: Random): OffsetDateTime</code>Returns a random date within this interval using the supplied random number generator. The offset of the start date-time will be used.<p>common</p><code>fun ZonedDateTimeInterval.random(random: Random): ZonedDateTime</code>Returns a random date within this interval using the supplied random number generator. The zone of the start date-time will be used. randomOrNull <p>common</p><code>fun DateRange.randomOrNull(): Date?</code>Returns a random date within this range using the default random number generator or <code>null</code> if the interval is empty or unbounded.<p>common</p><code>fun DateTimeInterval.randomOrNull(): DateTime?</code><code>fun InstantInterval.randomOrNull(): Instant?</code>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded.<p>common</p><code>fun OffsetDateTimeInterval.randomOrNull(): OffsetDateTime?</code>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded. The offset of the start date-time will be used.<p>common</p><code>fun ZonedDateTimeInterval.randomOrNull(): ZonedDateTime?</code>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded. The zone of the start date-time will be used.<p>common</p><code>fun DateRange.randomOrNull(random: Random): Date?</code>Returns a random date within this range using the supplied random number generator or <code>null</code> if the interval is empty or unbounded.<p>common</p><code>fun DateTimeInterval.randomOrNull(random: Random): DateTime?</code><code>fun InstantInterval.randomOrNull(random: Random): Instant?</code>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded.<p>common</p><code>fun OffsetDateTimeInterval.randomOrNull(random: Random): OffsetDateTime?</code>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. The offset of the start date-time will be used.<p>common</p><code>fun ZonedDateTimeInterval.randomOrNull(random: Random): ZonedDateTime?</code>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. The zone of the start date-time will be used. reversed <p>common</p><code>fun DateDayProgression.reversed(): DateDayProgression</code><code>fun DateMonthProgression.reversed(): DateMonthProgression</code>Reverses this progression such that it counts down instead of up, or vice versa. step <p>common</p><code>infix fun DateDayProgression.step(step: Centuries): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of centuries.<p>common</p><code>infix fun DateDayProgression.step(step: Days): DateDayProgression</code>Creates a progression that steps over the dates in this progression in increments of days.<p>common</p><code>infix fun DateDayProgression.step(step: Decades): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of decades.<p>common</p><code>infix fun DateDayProgression.step(step: Months): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of months.<p>common</p><code>infix fun DateDayProgression.step(step: Weeks): DateDayProgression</code>Creates a progression that steps over the dates in this progression in increments of weeks.<p>common</p><code>infix fun DateDayProgression.step(step: Years): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of years.<p>common</p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Days): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Hours): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Microseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Milliseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Minutes): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Seconds): TimePointSecondProgression&lt;T&gt;</code> toDateRange <p>common</p><code>fun DateTimeInterval.toDateRange(): DateRange</code><code>fun OffsetDateTimeInterval.toDateRange(): DateRange</code><code>fun ZonedDateTimeInterval.toDateRange(): DateRange</code>Returns this interval with the precision reduced to just the date.<p>common</p><code>fun String.toDateRange(): DateRange</code>Converts a string to a DateRange.<p>common</p><code>fun String.toDateRange(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange</code>Converts a string to a DateRange using a specific parser. toDateRangeAt <p>common</p><code>fun InstantInterval.toDateRangeAt(zone: TimeZone): DateRange</code>Converts this interval to the equivalent DateRange when both endpoints are in zone. toDateTimeInterval <p>common</p><code>fun OffsetDateTimeInterval.toDateTimeInterval(): DateTimeInterval</code><code>fun ZonedDateTimeInterval.toDateTimeInterval(): DateTimeInterval</code>Returns this interval with the precision reduced to only the local date and time.<p>common</p><code>fun String.toDateTimeInterval(): DateTimeInterval</code>Converts a string to a DateTimeInterval.<p>common</p><code>fun String.toDateTimeInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval</code>Converts a string to a DateTimeInterval using a specific parser. toDateTimeIntervalAt <p>common</p><code>fun InstantInterval.toDateTimeIntervalAt(zone: TimeZone): DateTimeInterval</code>Converts this interval to the equivalent DateTimeInterval when both endpoints are in zone. toDuration <p>common</p><code>fun DateTimeInterval.toDuration(): Duration</code>Converts this interval to the Duration between the start and end date-time, which are assumed to be in the same time zone. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.<p>common</p><code>fun TimePointInterval&lt;*&gt;.toDuration(): Duration</code>Converts this interval into a Duration of the same length. toInstantInterval <p>common</p><code>fun OffsetDateTimeInterval.toInstantInterval(): InstantInterval</code><code>fun ZonedDateTimeInterval.toInstantInterval(): InstantInterval</code>Converts this interval to an InstantInterval.<p>common</p><code>fun String.toInstantInterval(): InstantInterval</code>Converts a string to an InstantInterval.<p>common</p><code>fun String.toInstantInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval</code>Converts a string to an InstantInterval using a specific parser. toInstantIntervalAt <p>common</p><code>fun DateRange.toInstantIntervalAt(zone: TimeZone): InstantInterval</code>Converts this range to an InstantInterval between the start of the first day and the end of the last day in zone.<p>common</p><code>fun DateTimeInterval.toInstantIntervalAt(zone: TimeZone): InstantInterval</code>Converts this interval to an InstantInterval where both endpoints are in zone. toOffsetDateTimeInterval <p>common</p><code>fun ZonedDateTimeInterval.toOffsetDateTimeInterval(): OffsetDateTimeInterval</code>Converts this interval to an OffsetDateTimeInterval.<p>common</p><code>fun String.toOffsetDateTimeInterval(): OffsetDateTimeInterval</code>Converts a string to an OffsetDateTimeInterval.<p>common</p><code>fun String.toOffsetDateTimeInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval</code>Converts a string to an OffsetDateTimeInterval using a specific parser. toPeriod <p>common</p><code>fun DateRange.toPeriod(): Period</code>Converts this range into a Period of the same length. As a range is inclusive, if the start and end date are the same, the resulting period will contain one day.<p>common</p><code>fun DateTimeInterval.toPeriod(): Period</code><code>fun OffsetDateTimeInterval.toPeriod(): Period</code><code>fun ZonedDateTimeInterval.toPeriod(): Period</code>Converts this interval into a Period of the same length. toZonedDateTimeInterval <p>common</p><code>fun String.toZonedDateTimeInterval(): ZonedDateTimeInterval</code>Converts a string to a ZonedDateTimeInterval.<p>common</p><code>fun OffsetDateTimeInterval.toZonedDateTimeInterval(zone: TimeZone, strategy: OffsetConversionStrategy): ZonedDateTimeInterval</code>Converts this interval to a ZonedDateTimeInterval using the specified strategy to adjust each endpoint to a valid date, time, and offset in zone.<p>common</p><code>fun String.toZonedDateTimeInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval</code>Converts a string to a ZonedDateTimeInterval using a specific parser. until <p>common</p><code>infix fun Date.until(to: Date): DateRange</code>Creates a DateRange containing all the days from this date up to, but not including to.<p>common</p><code>infix fun DateTime.until(to: DateTime): DateTimeInterval</code>Creates a DateTimeInterval from this date-time up to, but not including the nanosecond represented by to.<p>common</p><code>infix fun Instant.until(to: Instant): InstantInterval</code>Creates an InstantInterval from this instant up to, but not including to.<p>common</p><code>infix fun OffsetDateTime.until(to: OffsetDateTime): OffsetDateTimeInterval</code>Creates an OffsetDateTimeInterval from this date-time up to, but not including to.<p>common</p><code>infix fun ZonedDateTime.until(to: ZonedDateTime): ZonedDateTimeInterval</code>Creates a ZonedDateTimeInterval from this date-time up to, but not including to."},{"location":"api/core/core/io.islandtime.ranges/as-zoned-date-time-interval/","title":"asZonedDateTimeInterval","text":"<p>//core/io.islandtime.ranges/asZonedDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/as-zoned-date-time-interval/#aszoneddatetimeinterval","title":"asZonedDateTimeInterval","text":"<p>common</p> <p><code>fun OffsetDateTimeInterval.asZonedDateTimeInterval(): ZonedDateTimeInterval</code></p> <p>Converts this interval to an equivalent ZonedDateTimeInterval where both endpoints are given a fixed-offset time zone.</p> <p>This comes with the caveat that a fixed-offset zone lacks knowledge of any region and will not respond to daylight savings time changes. To convert each endpoint to a region-based zone, use toZonedDateTimeInterval instead.</p>"},{"location":"api/core/core/io.islandtime.ranges/as-zoned-date-time-interval/#see-also","title":"See also","text":"toZonedDateTimeInterval"},{"location":"api/core/core/io.islandtime.ranges/at/","title":"at","text":"<p>//core/io.islandtime.ranges/at</p>"},{"location":"api/core/core/io.islandtime.ranges/at/#at","title":"at","text":"<p>common</p> <p><code>infix fun DateRange.at(zone: TimeZone): ZonedDateTimeInterval</code></p> <p>Combines this DateRange with a TimeZone to create a ZonedDateTimeInterval between the start of the first day and the end of the last day in zone.</p> <p>common</p> <p><code>infix fun DateTimeInterval.at(zone: TimeZone): ZonedDateTimeInterval</code></p> <p>Combines this DateTimeInterval with a TimeZone to create a ZonedDateTimeInterval where both endpoints are in zone.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the local time of either endpoint falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.</p> <p>common</p> <p><code>infix fun InstantInterval.at(zone: TimeZone): ZonedDateTimeInterval</code></p> <p>Combines this InstantInterval with a TimeZone to create an equivalent ZonedDateTimeInterval where both endpoints are in zone.</p>"},{"location":"api/core/core/io.islandtime.ranges/contains/","title":"contains","text":"<p>//core/io.islandtime.ranges/contains</p>"},{"location":"api/core/core/io.islandtime.ranges/contains/#contains","title":"contains","text":"<p>common</p> <p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code></p> <p>Checks if this interval contains value.</p> <p>This will always return <code>false</code> if value is <code>null</code>.</p> <p>common</p> <p><code>operator fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.contains(value: TimePoint&lt;*&gt;?): Boolean</code></p> <p>Checks if this interval contains value. This will always return <code>false</code> if value is <code>null</code>.</p>"},{"location":"api/core/core/io.islandtime.ranges/down-to/","title":"downTo","text":"<p>//core/io.islandtime.ranges/downTo</p>"},{"location":"api/core/core/io.islandtime.ranges/down-to/#downto","title":"downTo","text":"<p>common</p> <p><code>infix fun Date.downTo(to: Date): DateDayProgression</code></p> <p>Creates a progression of dates in descending order.</p> <p>common</p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; T.downTo(to: T): TimePointProgressionBuilder&lt;T&gt;</code></p> <p>Creates a progression of time points in descending order.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-centuries/","title":"lengthInCenturies","text":"<p>//core/io.islandtime.ranges/lengthInCenturies</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-centuries/#lengthincenturies","title":"lengthInCenturies","text":"<p>common</p> <p><code>val DateRange.lengthInCenturies: Centuries</code></p> <p>The number of whole centuries between the start and end of this range.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-centuries/#throws","title":"Throws","text":"UnsupportedOperationException if the range isn't bounded <p>common</p> <p><code>val DateTimeInterval.lengthInCenturies: Centuries</code></p> <p><code>val OffsetDateTimeInterval.lengthInCenturies: Centuries</code></p> <p><code>val ZonedDateTimeInterval.lengthInCenturies: Centuries</code></p> <p>The number of whole centuries between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-centuries/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-days/","title":"lengthInDays","text":"<p>//core/io.islandtime.ranges/lengthInDays</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-days/#lengthindays","title":"lengthInDays","text":"<p>common</p> <p><code>val DateRange.lengthInDays: Days</code></p> <p>The number of days between the start and end of this range. A range is inclusive, so if the start and end date are the same, the length will be one day.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-days/#throws","title":"Throws","text":"UnsupportedOperationException if the range isn't bounded <p>common</p> <p><code>val DateTimeInterval.lengthInDays: Days</code></p> <p><code>val OffsetDateTimeInterval.lengthInDays: Days</code></p> <p><code>val ZonedDateTimeInterval.lengthInDays: Days</code></p> <p>The number of whole days between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-days/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-decades/","title":"lengthInDecades","text":"<p>//core/io.islandtime.ranges/lengthInDecades</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-decades/#lengthindecades","title":"lengthInDecades","text":"<p>common</p> <p><code>val DateRange.lengthInDecades: Decades</code></p> <p>The number of whole decades between the start and end of this range.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-decades/#throws","title":"Throws","text":"UnsupportedOperationException if the range isn't bounded <p>common</p> <p><code>val DateTimeInterval.lengthInDecades: Decades</code></p> <p><code>val OffsetDateTimeInterval.lengthInDecades: Decades</code></p> <p><code>val ZonedDateTimeInterval.lengthInDecades: Decades</code></p> <p>The number of whole decades between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-decades/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-hours/","title":"lengthInHours","text":"<p>//core/io.islandtime.ranges/lengthInHours</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-hours/#lengthinhours","title":"lengthInHours","text":"<p>common</p> <p><code>val DateTimeInterval.lengthInHours: Hours</code></p> <p><code>val TimePointInterval&lt;*&gt;.lengthInHours: Hours</code></p> <p>The number of whole hours between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-hours/#throws","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-microseconds/","title":"lengthInMicroseconds","text":"<p>//core/io.islandtime.ranges/lengthInMicroseconds</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-microseconds/#lengthinmicroseconds","title":"lengthInMicroseconds","text":"<p>common</p> <p><code>val DateTimeInterval.lengthInMicroseconds: Microseconds</code></p> <p><code>val TimePointInterval&lt;*&gt;.lengthInMicroseconds: Microseconds</code></p> <p>The number of whole microseconds between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-microseconds/#throws","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-milliseconds/","title":"lengthInMilliseconds","text":"<p>//core/io.islandtime.ranges/lengthInMilliseconds</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-milliseconds/#lengthinmilliseconds","title":"lengthInMilliseconds","text":"<p>common</p> <p><code>val DateTimeInterval.lengthInMilliseconds: Milliseconds</code></p> <p><code>val TimePointInterval&lt;*&gt;.lengthInMilliseconds: Milliseconds</code></p> <p>The number of whole milliseconds between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-milliseconds/#throws","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-minutes/","title":"lengthInMinutes","text":"<p>//core/io.islandtime.ranges/lengthInMinutes</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-minutes/#lengthinminutes","title":"lengthInMinutes","text":"<p>common</p> <p><code>val DateTimeInterval.lengthInMinutes: Minutes</code></p> <p><code>val TimePointInterval&lt;*&gt;.lengthInMinutes: Minutes</code></p> <p>The number of whole minutes between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-minutes/#throws","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-months/","title":"lengthInMonths","text":"<p>//core/io.islandtime.ranges/lengthInMonths</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-months/#lengthinmonths","title":"lengthInMonths","text":"<p>common</p> <p><code>val DateRange.lengthInMonths: Months</code></p> <p>The number of whole months between the start and end of this range.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-months/#throws","title":"Throws","text":"UnsupportedOperationException if the range isn't bounded <p>common</p> <p><code>val DateTimeInterval.lengthInMonths: Months</code></p> <p><code>val OffsetDateTimeInterval.lengthInMonths: Months</code></p> <p><code>val ZonedDateTimeInterval.lengthInMonths: Months</code></p> <p>The number of whole months between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-months/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-nanoseconds/","title":"lengthInNanoseconds","text":"<p>//core/io.islandtime.ranges/lengthInNanoseconds</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-nanoseconds/#lengthinnanoseconds","title":"lengthInNanoseconds","text":"<p>common</p> <p><code>val DateTimeInterval.lengthInNanoseconds: Nanoseconds</code></p> <p><code>val TimePointInterval&lt;*&gt;.lengthInNanoseconds: Nanoseconds</code></p> <p>The number of nanoseconds between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-nanoseconds/#throws","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-seconds/","title":"lengthInSeconds","text":"<p>//core/io.islandtime.ranges/lengthInSeconds</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-seconds/#lengthinseconds","title":"lengthInSeconds","text":"<p>common</p> <p><code>val DateTimeInterval.lengthInSeconds: Seconds</code></p> <p><code>val TimePointInterval&lt;*&gt;.lengthInSeconds: Seconds</code></p> <p>The number of whole seconds between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-seconds/#throws","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-weeks/","title":"lengthInWeeks","text":"<p>//core/io.islandtime.ranges/lengthInWeeks</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-weeks/#lengthinweeks","title":"lengthInWeeks","text":"<p>common</p> <p><code>val DateRange.lengthInWeeks: Weeks</code></p> <p>The number of whole weeks between the start and end of this range.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-weeks/#throws","title":"Throws","text":"UnsupportedOperationException if the range isn't bounded <p>common</p> <p><code>val DateTimeInterval.lengthInWeeks: Weeks</code></p> <p><code>val OffsetDateTimeInterval.lengthInWeeks: Weeks</code></p> <p><code>val ZonedDateTimeInterval.lengthInWeeks: Weeks</code></p> <p>The number of whole weeks between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-weeks/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/length-in-years/","title":"lengthInYears","text":"<p>//core/io.islandtime.ranges/lengthInYears</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-years/#lengthinyears","title":"lengthInYears","text":"<p>common</p> <p><code>val DateRange.lengthInYears: Years</code></p> <p>The number of whole years between the start and end of this range.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-years/#throws","title":"Throws","text":"UnsupportedOperationException if the range isn't bounded <p>common</p> <p><code>val DateTimeInterval.lengthInYears: Years</code></p> <p><code>val OffsetDateTimeInterval.lengthInYears: Years</code></p> <p><code>val ZonedDateTimeInterval.lengthInYears: Years</code></p> <p>The number of whole years between the start and end of this interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/length-in-years/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/","title":"randomOrNull","text":"<p>//core/io.islandtime.ranges/randomOrNull</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#randomornull","title":"randomOrNull","text":"<p>common</p> <p><code>fun DateRange.randomOrNull(): Date?</code></p> <p>Returns a random date within this range using the default random number generator or <code>null</code> if the interval is empty or unbounded.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also","title":"See also","text":"random <p>common</p> <p><code>fun DateRange.randomOrNull(random: Random): Date?</code></p> <p>Returns a random date within this range using the supplied random number generator or <code>null</code> if the interval is empty or unbounded.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also_1","title":"See also","text":"random <p>common</p> <p><code>fun DateTimeInterval.randomOrNull(): DateTime?</code></p> <p><code>fun InstantInterval.randomOrNull(): Instant?</code></p> <p>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also_2","title":"See also","text":"random <p>common</p> <p><code>fun DateTimeInterval.randomOrNull(random: Random): DateTime?</code></p> <p><code>fun InstantInterval.randomOrNull(random: Random): Instant?</code></p> <p>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also_3","title":"See also","text":"random <p>common</p> <p><code>fun OffsetDateTimeInterval.randomOrNull(): OffsetDateTime?</code></p> <p>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded. The offset of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also_4","title":"See also","text":"random <p>common</p> <p><code>fun OffsetDateTimeInterval.randomOrNull(random: Random): OffsetDateTime?</code></p> <p>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. The offset of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also_5","title":"See also","text":"random <p>common</p> <p><code>fun ZonedDateTimeInterval.randomOrNull(): ZonedDateTime?</code></p> <p>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded. The zone of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also_6","title":"See also","text":"random <p>common</p> <p><code>fun ZonedDateTimeInterval.randomOrNull(random: Random): ZonedDateTime?</code></p> <p>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. The zone of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random-or-null/#see-also_7","title":"See also","text":"random"},{"location":"api/core/core/io.islandtime.ranges/random/","title":"random","text":"<p>//core/io.islandtime.ranges/random</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#random","title":"random","text":"<p>common</p> <p><code>fun DateRange.random(): Date</code></p> <p>Returns a random date within this range using the default random number generator.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws","title":"Throws","text":"NoSuchElementException if the range is empty UnsupportedOperationException if the range is unbounded <p>common</p> <p><code>fun DateRange.random(random: Random): Date</code></p> <p>Returns a random date within this range using the supplied random number generator.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also_1","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws_1","title":"Throws","text":"NoSuchElementException if the range is empty UnsupportedOperationException if the range is unbounded <p>common</p> <p><code>fun DateTimeInterval.random(): DateTime</code></p> <p><code>fun InstantInterval.random(): Instant</code></p> <p>Returns a random date within this interval using the default random number generator.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also_2","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws_2","title":"Throws","text":"NoSuchElementException if the interval is empty UnsupportedOperationException if the interval is unbounded <p>common</p> <p><code>fun DateTimeInterval.random(random: Random): DateTime</code></p> <p><code>fun InstantInterval.random(random: Random): Instant</code></p> <p>Returns a random date within this interval using the supplied random number generator.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also_3","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws_3","title":"Throws","text":"NoSuchElementException if the interval is empty UnsupportedOperationException if the interval is unbounded <p>common</p> <p><code>fun OffsetDateTimeInterval.random(): OffsetDateTime</code></p> <p>Returns a random date within this interval using the default random number generator. The offset of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also_4","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws_4","title":"Throws","text":"NoSuchElementException if the interval is empty UnsupportedOperationException if the interval is unbounded <p>common</p> <p><code>fun OffsetDateTimeInterval.random(random: Random): OffsetDateTime</code></p> <p>Returns a random date within this interval using the supplied random number generator. The offset of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also_5","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws_5","title":"Throws","text":"NoSuchElementException if the interval is empty UnsupportedOperationException if the interval is unbounded <p>common</p> <p><code>fun ZonedDateTimeInterval.random(): ZonedDateTime</code></p> <p>Returns a random date within this interval using the default random number generator. The zone of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also_6","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws_6","title":"Throws","text":"NoSuchElementException if the interval is empty UnsupportedOperationException if the interval is unbounded <p>common</p> <p><code>fun ZonedDateTimeInterval.random(random: Random): ZonedDateTime</code></p> <p>Returns a random date within this interval using the supplied random number generator. The zone of the start date-time will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/random/#see-also_7","title":"See also","text":"randomOrNull"},{"location":"api/core/core/io.islandtime.ranges/random/#throws_7","title":"Throws","text":"NoSuchElementException if the interval is empty UnsupportedOperationException if the interval is unbounded"},{"location":"api/core/core/io.islandtime.ranges/reversed/","title":"reversed","text":"<p>//core/io.islandtime.ranges/reversed</p>"},{"location":"api/core/core/io.islandtime.ranges/reversed/#reversed","title":"reversed","text":"<p>common</p> <p><code>fun DateDayProgression.reversed(): DateDayProgression</code></p> <p><code>fun DateMonthProgression.reversed(): DateMonthProgression</code></p> <p>Reverses this progression such that it counts down instead of up, or vice versa.</p>"},{"location":"api/core/core/io.islandtime.ranges/step/","title":"step","text":"<p>//core/io.islandtime.ranges/step</p>"},{"location":"api/core/core/io.islandtime.ranges/step/#step","title":"step","text":"<p>common</p> <p><code>infix fun DateDayProgression.step(step: Days): DateDayProgression</code></p> <p>Creates a progression that steps over the dates in this progression in increments of days.</p> <p>common</p> <p><code>infix fun DateDayProgression.step(step: Weeks): DateDayProgression</code></p> <p>Creates a progression that steps over the dates in this progression in increments of weeks.</p> <p>common</p> <p><code>infix fun DateDayProgression.step(step: Months): DateMonthProgression</code></p> <p>Creates a progression that steps over the dates in this progression in increments of months.</p> <p>common</p> <p><code>infix fun DateDayProgression.step(step: Years): DateMonthProgression</code></p> <p>Creates a progression that steps over the dates in this progression in increments of years.</p> <p>common</p> <p><code>infix fun DateDayProgression.step(step: Decades): DateMonthProgression</code></p> <p>Creates a progression that steps over the dates in this progression in increments of decades.</p> <p>common</p> <p><code>infix fun DateDayProgression.step(step: Centuries): DateMonthProgression</code></p> <p>Creates a progression that steps over the dates in this progression in increments of centuries.</p> <p>common</p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Days): TimePointSecondProgression&lt;T&gt;</code></p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Hours): TimePointSecondProgression&lt;T&gt;</code></p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Minutes): TimePointSecondProgression&lt;T&gt;</code></p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Seconds): TimePointSecondProgression&lt;T&gt;</code></p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Milliseconds): TimePointNanosecondProgression&lt;T&gt;</code></p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Microseconds): TimePointNanosecondProgression&lt;T&gt;</code></p> <p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code></p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-range-at/","title":"toDateRangeAt","text":"<p>//core/io.islandtime.ranges/toDateRangeAt</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-range-at/#todaterangeat","title":"toDateRangeAt","text":"<p>common</p> <p><code>fun InstantInterval.toDateRangeAt(zone: TimeZone): DateRange</code></p> <p>Converts this interval to the equivalent DateRange when both endpoints are in zone.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-range/","title":"toDateRange","text":"<p>//core/io.islandtime.ranges/toDateRange</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-range/#todaterange","title":"toDateRange","text":"<p>common</p> <p><code>fun DateTimeInterval.toDateRange(): DateRange</code></p> <p><code>fun OffsetDateTimeInterval.toDateRange(): DateRange</code></p> <p><code>fun ZonedDateTimeInterval.toDateRange(): DateRange</code></p> <p>Returns this interval with the precision reduced to just the date.</p> <p>common</p> <p><code>fun String.toDateRange(): DateRange</code></p> <p>Converts a string to a DateRange.</p> <p>The string is assumed to be an ISO-8601 time interval representation in extended format. The output of DateRange.toString can be safely parsed using this method.</p> <p>Examples:</p> <ul><li>`1990-01-04/1991-08-30`</li><li>`../1991-08-30`</li><li>`1990-01-04/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.ranges/to-date-range/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time is invalid <p>common</p> <p><code>fun String.toDateRange(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateRange</code></p> <p>Converts a string to a DateRange using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-range/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed range is invalid"},{"location":"api/core/core/io.islandtime.ranges/to-date-time-interval-at/","title":"toDateTimeIntervalAt","text":"<p>//core/io.islandtime.ranges/toDateTimeIntervalAt</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-time-interval-at/#todatetimeintervalat","title":"toDateTimeIntervalAt","text":"<p>common</p> <p><code>fun InstantInterval.toDateTimeIntervalAt(zone: TimeZone): DateTimeInterval</code></p> <p>Converts this interval to the equivalent DateTimeInterval when both endpoints are in zone.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-time-interval/","title":"toDateTimeInterval","text":"<p>//core/io.islandtime.ranges/toDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-time-interval/#todatetimeinterval","title":"toDateTimeInterval","text":"<p>common</p> <p><code>fun OffsetDateTimeInterval.toDateTimeInterval(): DateTimeInterval</code></p> <p><code>fun ZonedDateTimeInterval.toDateTimeInterval(): DateTimeInterval</code></p> <p>Returns this interval with the precision reduced to only the local date and time.</p> <p>common</p> <p><code>fun String.toDateTimeInterval(): DateTimeInterval</code></p> <p>Converts a string to a DateTimeInterval.</p> <p>The string is assumed to be an ISO-8601 time interval representation in extended format. The output of DateTimeInterval.toString can be safely parsed using this method.</p> <p>Examples:</p> <ul><li>`1990-01-04T03/1991-08-30T15:30:05.123`</li><li>`../1991-08-30T15:30:05.123`</li><li>`1990-01-04T03/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.ranges/to-date-time-interval/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time is invalid <p>common</p> <p><code>fun String.toDateTimeInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): DateTimeInterval</code></p> <p>Converts a string to a DateTimeInterval using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-date-time-interval/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed interval is invalid"},{"location":"api/core/core/io.islandtime.ranges/to-duration/","title":"toDuration","text":"<p>//core/io.islandtime.ranges/toDuration</p>"},{"location":"api/core/core/io.islandtime.ranges/to-duration/#toduration","title":"toDuration","text":"<p>common</p> <p><code>fun DateTimeInterval.toDuration(): Duration</code></p> <p>Converts this interval to the Duration between the start and end date-time, which are assumed to be in the same time zone. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-duration/#throws","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded <p>common</p> <p><code>fun TimePointInterval&lt;*&gt;.toDuration(): Duration</code></p> <p>Converts this interval into a Duration of the same length.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-duration/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/to-instant-interval-at/","title":"toInstantIntervalAt","text":"<p>//core/io.islandtime.ranges/toInstantIntervalAt</p>"},{"location":"api/core/core/io.islandtime.ranges/to-instant-interval-at/#toinstantintervalat","title":"toInstantIntervalAt","text":"<p>common</p> <p><code>fun DateRange.toInstantIntervalAt(zone: TimeZone): InstantInterval</code></p> <p>Converts this range to an InstantInterval between the start of the first day and the end of the last day in zone.</p> <p>common</p> <p><code>fun DateTimeInterval.toInstantIntervalAt(zone: TimeZone): InstantInterval</code></p> <p>Converts this interval to an InstantInterval where both endpoints are in zone.</p> <p>Due to daylight savings time transitions, there a few complexities to be aware of. If the local time of either endpoint falls within a gap (meaning it doesn't exist), it will be adjusted forward by the length of the gap. If it falls within an overlap (meaning the local time exists twice), the earlier offset will be used.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-instant-interval/","title":"toInstantInterval","text":"<p>//core/io.islandtime.ranges/toInstantInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/to-instant-interval/#toinstantinterval","title":"toInstantInterval","text":"<p>common</p> <p><code>fun OffsetDateTimeInterval.toInstantInterval(): InstantInterval</code></p> <p><code>fun ZonedDateTimeInterval.toInstantInterval(): InstantInterval</code></p> <p>Converts this interval to an InstantInterval.</p> <p>common</p> <p><code>fun String.toInstantInterval(): InstantInterval</code></p> <p>Converts a string to an InstantInterval.</p> <p>The string is assumed to be an ISO-8601 time interval representation in extended format. The output of InstantInterval.toString can be safely parsed using this method.</p> <p>Examples:</p> <ul><li>`1990-01-04T03Z/1991-08-30T15:30:05.123Z`</li><li>`../1991-08-30T15:30:05.123Z`</li><li>`1990-01-04T03Z/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.ranges/to-instant-interval/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time is invalid <p>common</p> <p><code>fun String.toInstantInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): InstantInterval</code></p> <p>Converts a string to an InstantInterval using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-instant-interval/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed interval is invalid"},{"location":"api/core/core/io.islandtime.ranges/to-offset-date-time-interval/","title":"toOffsetDateTimeInterval","text":"<p>//core/io.islandtime.ranges/toOffsetDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/to-offset-date-time-interval/#tooffsetdatetimeinterval","title":"toOffsetDateTimeInterval","text":"<p>common</p> <p><code>fun ZonedDateTimeInterval.toOffsetDateTimeInterval(): OffsetDateTimeInterval</code></p> <p>Converts this interval to an OffsetDateTimeInterval.</p> <p>While similar to <code>ZonedDateTime</code>, an <code>OffsetDateTime</code> representation is unaffected by time zone rule changes or database differences between systems, making it better suited for use cases involving persistence or network transfer.</p> <p>common</p> <p><code>fun String.toOffsetDateTimeInterval(): OffsetDateTimeInterval</code></p> <p>Converts a string to an OffsetDateTimeInterval.</p> <p>The string is assumed to be an ISO-8601 time interval representation in extended format. The output of OffsetDateTimeInterval.toString can be safely parsed using this method.</p> <p>Examples:</p> <ul><li>`1990-01-04T03-05/1991-08-30T15:30:05.123-04:00`</li><li>`../1991-08-30T15:30:05.123-04:00`</li><li>`1990-01-04T03-05/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.ranges/to-offset-date-time-interval/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time is invalid <p>common</p> <p><code>fun String.toOffsetDateTimeInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): OffsetDateTimeInterval</code></p> <p>Converts a string to an OffsetDateTimeInterval using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-offset-date-time-interval/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed interval is invalid"},{"location":"api/core/core/io.islandtime.ranges/to-period/","title":"toPeriod","text":"<p>//core/io.islandtime.ranges/toPeriod</p>"},{"location":"api/core/core/io.islandtime.ranges/to-period/#toperiod","title":"toPeriod","text":"<p>common</p> <p><code>fun DateRange.toPeriod(): Period</code></p> <p>Converts this range into a Period of the same length. As a range is inclusive, if the start and end date are the same, the resulting period will contain one day.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-period/#throws","title":"Throws","text":"UnsupportedOperationException if the range isn't bounded <p>common</p> <p><code>fun DateTimeInterval.toPeriod(): Period</code></p> <p><code>fun OffsetDateTimeInterval.toPeriod(): Period</code></p> <p><code>fun ZonedDateTimeInterval.toPeriod(): Period</code></p> <p>Converts this interval into a Period of the same length.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-period/#throws_1","title":"Throws","text":"UnsupportedOperationException if the interval isn't bounded"},{"location":"api/core/core/io.islandtime.ranges/to-zoned-date-time-interval/","title":"toZonedDateTimeInterval","text":"<p>//core/io.islandtime.ranges/toZonedDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/to-zoned-date-time-interval/#tozoneddatetimeinterval","title":"toZonedDateTimeInterval","text":"<p>common</p> <p><code>fun OffsetDateTimeInterval.toZonedDateTimeInterval(zone: TimeZone, strategy: OffsetConversionStrategy): ZonedDateTimeInterval</code></p> <p>Converts this interval to a ZonedDateTimeInterval using the specified strategy to adjust each endpoint to a valid date, time, and offset in zone.</p> <ul><li>[OffsetConversionStrategy.PRESERVE_INSTANT](../io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-i-n-s-t-a-n-t/index.md) - Preserve the instant captured by the date, time, and offset, ignoring the local time.</li><li>[OffsetConversionStrategy.PRESERVE_LOCAL_TIME](../io.islandtime/-offset-conversion-strategy/-p-r-e-s-e-r-v-e_-l-o-c-a-l_-t-i-m-e/index.md) - Preserve the local date and time in the new time zone, adjusting the offset if needed.</li></ul> <p>Alternatively, you can use asZonedDateTimeInterval to convert each endpoint to a ZonedDateTime with an equivalent fixed-offset zone. However, this comes with the caveat that a fixed-offset zone lacks knowledge of any region and will not respond to daylight savings time changes.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-zoned-date-time-interval/#see-also","title":"See also","text":"asZonedDateTimeInterval <p>common</p> <p><code>fun String.toZonedDateTimeInterval(): ZonedDateTimeInterval</code></p> <p>Converts a string to a ZonedDateTimeInterval.</p> <p>The string is assumed to be an ISO-8601 time interval representation in extended format. The output of ZonedDateTimeInterval.toString can be safely parsed using this method.</p> <p>Examples:</p> <ul><li>`1990-01-04T03-05[America/New_York]/1991-08-30T15:30:05.123-04:00`</li><li>`../1991-08-30T15:30:05.123-04:00`</li><li>`1990-01-04T03-05[Europe/London]/..`</li><li>`../..`</li><li>(empty string)</li></ul>"},{"location":"api/core/core/io.islandtime.ranges/to-zoned-date-time-interval/#throws","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed time is invalid <p>common</p> <p><code>fun String.toZonedDateTimeInterval(parser: GroupedDateTimeParser, settings: DateTimeParserSettings = DateTimeParserSettings.DEFAULT): ZonedDateTimeInterval</code></p> <p>Converts a string to a ZonedDateTimeInterval using a specific parser.</p> <p>A set of predefined parsers can be found in DateTimeParsers.</p>"},{"location":"api/core/core/io.islandtime.ranges/to-zoned-date-time-interval/#throws_1","title":"Throws","text":"DateTimeParseException if parsing fails DateTimeException if the parsed interval is invalid"},{"location":"api/core/core/io.islandtime.ranges/until/","title":"until","text":"<p>//core/io.islandtime.ranges/until</p>"},{"location":"api/core/core/io.islandtime.ranges/until/#until","title":"until","text":"<p>common</p> <p><code>infix fun Date.until(to: Date): DateRange</code></p> <p>Creates a DateRange containing all the days from this date up to, but not including to.</p> <p>common</p> <p><code>infix fun DateTime.until(to: DateTime): DateTimeInterval</code></p> <p>Creates a DateTimeInterval from this date-time up to, but not including the nanosecond represented by to.</p> <p>common</p> <p><code>infix fun Instant.until(to: Instant): InstantInterval</code></p> <p>Creates an InstantInterval from this instant up to, but not including to.</p> <p>common</p> <p><code>infix fun OffsetDateTime.until(to: OffsetDateTime): OffsetDateTimeInterval</code></p> <p>Creates an OffsetDateTimeInterval from this date-time up to, but not including to.</p> <p>common</p> <p><code>infix fun ZonedDateTime.until(to: ZonedDateTime): ZonedDateTimeInterval</code></p> <p>Creates a ZonedDateTimeInterval from this date-time up to, but not including to.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/","title":"DateDayProgression","text":"<p>//core/io.islandtime.ranges/DateDayProgression</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/#datedayprogression","title":"DateDayProgression","text":"<p><code>abstract class DateDayProgression : Iterable&lt;Date&gt; </code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/#inheritors","title":"Inheritors","text":"DateRange"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/#properties","title":"Properties","text":"Name Summary first <p>common</p><code>abstract val first: Date</code> last <p>common</p><code>abstract val last: Date</code> step <p>common</p><code>abstract val step: Days</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/#functions","title":"Functions","text":"Name Summary isEmpty <p>common</p><code>abstract fun isEmpty(): Boolean</code>Checks if this progression is empty. iterator <p>common</p><code>open operator override fun iterator(): Iterator&lt;Date&gt;</code> reversed <p>common</p><code>fun DateDayProgression.reversed(): DateDayProgression</code>Reverses this progression such that it counts down instead of up, or vice versa. step <p>common</p><code>infix fun DateDayProgression.step(step: Centuries): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of centuries.<p>common</p><code>infix fun DateDayProgression.step(step: Days): DateDayProgression</code>Creates a progression that steps over the dates in this progression in increments of days.<p>common</p><code>infix fun DateDayProgression.step(step: Decades): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of decades.<p>common</p><code>infix fun DateDayProgression.step(step: Months): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of months.<p>common</p><code>infix fun DateDayProgression.step(step: Weeks): DateDayProgression</code>Creates a progression that steps over the dates in this progression in increments of weeks.<p>common</p><code>infix fun DateDayProgression.step(step: Years): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of years."},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/first/","title":"first","text":"<p>//core/io.islandtime.ranges/DateDayProgression/first</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/first/#first","title":"first","text":"<p>common</p> <p><code>abstract val first: Date</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/DateDayProgression/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>abstract fun isEmpty(): Boolean</code></p> <p>Checks if this progression is empty.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/iterator/","title":"iterator","text":"<p>//core/io.islandtime.ranges/DateDayProgression/iterator</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/iterator/#iterator","title":"iterator","text":"<p>common</p> <p><code>open operator override fun iterator(): Iterator&lt;Date&gt;</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/last/","title":"last","text":"<p>//core/io.islandtime.ranges/DateDayProgression/last</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/last/#last","title":"last","text":"<p>common</p> <p><code>abstract val last: Date</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/step/","title":"step","text":"<p>//core/io.islandtime.ranges/DateDayProgression/step</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/step/#step","title":"step","text":"<p>common</p> <p><code>abstract val step: Days</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/DateDayProgression/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/-companion/#functions","title":"Functions","text":"Name Summary fromClosedRange <p>common</p><code>fun fromClosedRange(rangeStart: Date, rangeEnd: Date, step: Days): DateDayProgression</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/-companion/from-closed-range/","title":"fromClosedRange","text":"<p>//core/io.islandtime.ranges/DateDayProgression/Companion/fromClosedRange</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-day-progression/-companion/from-closed-range/#fromclosedrange","title":"fromClosedRange","text":"<p>common</p> <p><code>fun fromClosedRange(rangeStart: Date, rangeEnd: Date, step: Days): DateDayProgression</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/","title":"DateMonthProgression","text":"<p>//core/io.islandtime.ranges/DateMonthProgression</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/#datemonthprogression","title":"DateMonthProgression","text":"<p>common</p> <p><code>class DateMonthProgression : Iterable&lt;Date&gt; </code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/#properties","title":"Properties","text":"Name Summary first <p>common</p><code>val first: Date</code> last <p>common</p><code>val last: Date</code> step <p>common</p><code>val step: Months</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/#functions","title":"Functions","text":"Name Summary equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isEmpty <p>common</p><code>fun isEmpty(): Boolean</code>Checks if this progression is empty. iterator <p>common</p><code>open operator override fun iterator(): Iterator&lt;Date&gt;</code> reversed <p>common</p><code>fun DateMonthProgression.reversed(): DateMonthProgression</code>Reverses this progression such that it counts down instead of up, or vice versa. toString <p>common</p><code>open override fun toString(): String</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/equals/","title":"equals","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/equals</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/first/","title":"first","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/first</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/first/#first","title":"first","text":"<p>common</p> <p><code>val first: Date</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/hashCode</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>fun isEmpty(): Boolean</code></p> <p>Checks if this progression is empty.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/iterator/","title":"iterator","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/iterator</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/iterator/#iterator","title":"iterator","text":"<p>common</p> <p><code>open operator override fun iterator(): Iterator&lt;Date&gt;</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/last/","title":"last","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/last</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/last/#last","title":"last","text":"<p>common</p> <p><code>val last: Date</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/step/","title":"step","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/step</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/step/#step","title":"step","text":"<p>common</p> <p><code>val step: Months</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/-companion/#functions","title":"Functions","text":"Name Summary fromClosedRange <p>common</p><code>fun fromClosedRange(rangeStart: Date, rangeEnd: Date, step: Months): DateMonthProgression</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/-companion/from-closed-range/","title":"fromClosedRange","text":"<p>//core/io.islandtime.ranges/DateMonthProgression/Companion/fromClosedRange</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-month-progression/-companion/from-closed-range/#fromclosedrange","title":"fromClosedRange","text":"<p>common</p> <p><code>fun fromClosedRange(rangeStart: Date, rangeEnd: Date, step: Months): DateMonthProgression</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/","title":"DateRange","text":"<p>//core/io.islandtime.ranges/DateRange</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/#daterange","title":"DateRange","text":"<p>common</p> <p><code>@Serializable(with = DateRangeIsoSerializer::class) <p>class DateRange(val start: Date = Date.MIN, val endInclusive: Date = Date.MAX) : DateDayProgression, Interval&lt;Date&gt; , ClosedRange&lt;Date&gt; </p> <p>An inclusive range of dates.</p> <p>Date.MIN and Date.MAX are used as sentinels to indicate an unbounded (i.e. infinite) start or end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/#constructors","title":"Constructors","text":"DateRange <p>common</p><code>constructor(start: Date = Date.MIN, endInclusive: Date = Date.MAX)</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/#properties","title":"Properties","text":"Name Summary endExclusive <p>common</p><code>open override val endExclusive: Date</code>The end of this interval, exclusive. endInclusive <p>common</p><code>open override val endInclusive: Date</code>The end of this interval, inclusive. first <p>common</p><code>open override val first: Date</code> last <p>common</p><code>open override val last: Date</code> lengthInCenturies <p>common</p><code>val DateRange.lengthInCenturies: Centuries</code>The number of whole centuries between the start and end of this range. lengthInDays <p>common</p><code>val DateRange.lengthInDays: Days</code>The number of days between the start and end of this range. A range is inclusive, so if the start and end date are the same, the length will be one day. lengthInDecades <p>common</p><code>val DateRange.lengthInDecades: Decades</code>The number of whole decades between the start and end of this range. lengthInMonths <p>common</p><code>val DateRange.lengthInMonths: Months</code>The number of whole months between the start and end of this range. lengthInWeeks <p>common</p><code>val DateRange.lengthInWeeks: Weeks</code>The number of whole weeks between the start and end of this range. lengthInYears <p>common</p><code>val DateRange.lengthInYears: Years</code>The number of whole years between the start and end of this range. start <p>common</p><code>open override val start: Date</code>The start of this interval, inclusive. step <p>common</p><code>open override val step: Days</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun DateRange.at(zone: TimeZone): ZonedDateTimeInterval</code>Combines this DateRange with a TimeZone to create a ZonedDateTimeInterval between the start of the first day and the end of the last day in zone. contains <p>common</p><code>open operator override fun contains(value: Date): Boolean</code>Checks if this interval contains value. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hasBoundedEnd <p>common</p><code>open fun hasBoundedEnd(): Boolean</code>Checks if this interval's end is bounded, meaning it has a finite value. hasBoundedStart <p>common</p><code>open fun hasBoundedStart(): Boolean</code>Checks if this interval's start is bounded, meaning it has a finite value. hashCode <p>common</p><code>open override fun hashCode(): Int</code> hasUnboundedEnd <p>common</p><code>open override fun hasUnboundedEnd(): Boolean</code>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. hasUnboundedStart <p>common</p><code>open override fun hasUnboundedStart(): Boolean</code>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. isBounded <p>common</p><code>open fun isBounded(): Boolean</code>Checks if both the start and end of this interval are bounded, meaning it has a finite range. isEmpty <p>common</p><code>open override fun isEmpty(): Boolean</code>Checks if this progression is empty. isUnbounded <p>common</p><code>open fun isUnbounded(): Boolean</code>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions. iterator <p>common</p><code>open operator override fun iterator(): Iterator&lt;Date&gt;</code> random <p>common</p><code>fun DateRange.random(): Date</code>Returns a random date within this range using the default random number generator.<p>common</p><code>fun DateRange.random(random: Random): Date</code>Returns a random date within this range using the supplied random number generator. randomOrNull <p>common</p><code>fun DateRange.randomOrNull(): Date?</code>Returns a random date within this range using the default random number generator or <code>null</code> if the interval is empty or unbounded.<p>common</p><code>fun DateRange.randomOrNull(random: Random): Date?</code>Returns a random date within this range using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. reversed <p>common</p><code>fun DateDayProgression.reversed(): DateDayProgression</code>Reverses this progression such that it counts down instead of up, or vice versa. step <p>common</p><code>infix fun DateDayProgression.step(step: Centuries): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of centuries.<p>common</p><code>infix fun DateDayProgression.step(step: Days): DateDayProgression</code>Creates a progression that steps over the dates in this progression in increments of days.<p>common</p><code>infix fun DateDayProgression.step(step: Decades): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of decades.<p>common</p><code>infix fun DateDayProgression.step(step: Months): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of months.<p>common</p><code>infix fun DateDayProgression.step(step: Weeks): DateDayProgression</code>Creates a progression that steps over the dates in this progression in increments of weeks.<p>common</p><code>infix fun DateDayProgression.step(step: Years): DateMonthProgression</code>Creates a progression that steps over the dates in this progression in increments of years. toInstantIntervalAt <p>common</p><code>fun DateRange.toInstantIntervalAt(zone: TimeZone): InstantInterval</code>Converts this range to an InstantInterval between the start of the first day and the end of the last day in zone. toPeriod <p>common</p><code>fun DateRange.toPeriod(): Period</code>Converts this range into a Period of the same length. As a range is inclusive, if the start and end date are the same, the resulting period will contain one day. toString <p>common</p><code>open override fun toString(): String</code>Converts this range to a string in ISO-8601 extended format."},{"location":"api/core/core/io.islandtime.ranges/-date-range/-date-range/","title":"DateRange","text":"<p>//core/io.islandtime.ranges/DateRange/DateRange</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/-date-range/#daterange","title":"DateRange","text":"<p>common</p> <p><code>constructor(start: Date = Date.MIN, endInclusive: Date = Date.MAX)</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/contains/","title":"contains","text":"<p>//core/io.islandtime.ranges/DateRange/contains</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/contains/#contains","title":"contains","text":"<p>common</p> <p><code>open operator override fun contains(value: Date): Boolean</code></p> <p>Checks if this interval contains value.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/end-exclusive/","title":"endExclusive","text":"<p>//core/io.islandtime.ranges/DateRange/endExclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/end-exclusive/#endexclusive","title":"endExclusive","text":"<p>common</p> <p><code>open override val endExclusive: Date</code></p> <p>The end of this interval, exclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/end-inclusive/","title":"endInclusive","text":"<p>//core/io.islandtime.ranges/DateRange/endInclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/end-inclusive/#endinclusive","title":"endInclusive","text":"<p>common</p> <p><code>open override val endInclusive: Date</code></p> <p>The end of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/equals/","title":"equals","text":"<p>//core/io.islandtime.ranges/DateRange/equals</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/first/","title":"first","text":"<p>//core/io.islandtime.ranges/DateRange/first</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/first/#first","title":"first","text":"<p>common</p> <p><code>open override val first: Date</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/has-unbounded-end/","title":"hasUnboundedEnd","text":"<p>//core/io.islandtime.ranges/DateRange/hasUnboundedEnd</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/has-unbounded-end/#hasunboundedend","title":"hasUnboundedEnd","text":"<p>common</p> <p><code>open override fun hasUnboundedEnd(): Boolean</code></p> <p>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/has-unbounded-start/","title":"hasUnboundedStart","text":"<p>//core/io.islandtime.ranges/DateRange/hasUnboundedStart</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/has-unbounded-start/#hasunboundedstart","title":"hasUnboundedStart","text":"<p>common</p> <p><code>open override fun hasUnboundedStart(): Boolean</code></p> <p>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.ranges/DateRange/hashCode</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/DateRange/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>open override fun isEmpty(): Boolean</code></p> <p>Checks if this progression is empty.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/last/","title":"last","text":"<p>//core/io.islandtime.ranges/DateRange/last</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/last/#last","title":"last","text":"<p>common</p> <p><code>open override val last: Date</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/start/","title":"start","text":"<p>//core/io.islandtime.ranges/DateRange/start</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/start/#start","title":"start","text":"<p>common</p> <p><code>open override val start: Date</code></p> <p>The start of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/step/","title":"step","text":"<p>//core/io.islandtime.ranges/DateRange/step</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/step/#step","title":"step","text":"<p>common</p> <p><code>open override val step: Days</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/DateRange/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this range to a string in ISO-8601 extended format.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/DateRange/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/-companion/#properties","title":"Properties","text":"Name Summary EMPTY <p>common</p><code>val EMPTY: DateRange</code>An empty range. UNBOUNDED <p>common</p><code>val UNBOUNDED: DateRange</code>An unbounded (i.e. infinite) range of dates."},{"location":"api/core/core/io.islandtime.ranges/-date-range/-companion/-e-m-p-t-y/","title":"EMPTY","text":"<p>//core/io.islandtime.ranges/DateRange/Companion/EMPTY</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>common</p> <p><code>val EMPTY: DateRange</code></p> <p>An empty range.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/-companion/-u-n-b-o-u-n-d-e-d/","title":"UNBOUNDED","text":"<p>//core/io.islandtime.ranges/DateRange/Companion/UNBOUNDED</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-range/-companion/-u-n-b-o-u-n-d-e-d/#unbounded","title":"UNBOUNDED","text":"<p>common</p> <p><code>val UNBOUNDED: DateRange</code></p> <p>An unbounded (i.e. infinite) range of dates.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/","title":"DateTimeInterval","text":"<p>//core/io.islandtime.ranges/DateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/#datetimeinterval","title":"DateTimeInterval","text":"<p>common</p> <p><code>@Serializable(with = DateTimeIntervalIsoSerializer::class) <p>class DateTimeInterval(val start: DateTime = UNBOUNDED.start, val endExclusive: DateTime = UNBOUNDED.endExclusive) : Interval&lt;DateTime&gt; </p> <p>An interval between two date-times, assumed to be at the same offset from UTC.</p> <p>DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (i.e. infinite) start or end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/#constructors","title":"Constructors","text":"DateTimeInterval <p>common</p><code>constructor(start: DateTime = UNBOUNDED.start, endExclusive: DateTime = UNBOUNDED.endExclusive)</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/#properties","title":"Properties","text":"Name Summary endExclusive <p>common</p><code>open override val endExclusive: DateTime</code>The end of this interval, exclusive. endInclusive <p>common</p><code>open override val endInclusive: DateTime</code>The end of this interval, inclusive. lengthInCenturies <p>common</p><code>val DateTimeInterval.lengthInCenturies: Centuries</code>The number of whole centuries between the start and end of this interval. lengthInDays <p>common</p><code>val DateTimeInterval.lengthInDays: Days</code>The number of whole days between the start and end of this interval. lengthInDecades <p>common</p><code>val DateTimeInterval.lengthInDecades: Decades</code>The number of whole decades between the start and end of this interval. lengthInHours <p>common</p><code>val DateTimeInterval.lengthInHours: Hours</code>The number of whole hours between the start and end of this interval. lengthInMicroseconds <p>common</p><code>val DateTimeInterval.lengthInMicroseconds: Microseconds</code>The number of whole microseconds between the start and end of this interval. lengthInMilliseconds <p>common</p><code>val DateTimeInterval.lengthInMilliseconds: Milliseconds</code>The number of whole milliseconds between the start and end of this interval. lengthInMinutes <p>common</p><code>val DateTimeInterval.lengthInMinutes: Minutes</code>The number of whole minutes between the start and end of this interval. lengthInMonths <p>common</p><code>val DateTimeInterval.lengthInMonths: Months</code>The number of whole months between the start and end of this interval. lengthInNanoseconds <p>common</p><code>val DateTimeInterval.lengthInNanoseconds: Nanoseconds</code>The number of nanoseconds between the start and end of this interval. lengthInSeconds <p>common</p><code>val DateTimeInterval.lengthInSeconds: Seconds</code>The number of whole seconds between the start and end of this interval. lengthInWeeks <p>common</p><code>val DateTimeInterval.lengthInWeeks: Weeks</code>The number of whole weeks between the start and end of this interval. lengthInYears <p>common</p><code>val DateTimeInterval.lengthInYears: Years</code>The number of whole years between the start and end of this interval. start <p>common</p><code>open override val start: DateTime</code>The start of this interval, inclusive."},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun DateTimeInterval.at(zone: TimeZone): ZonedDateTimeInterval</code>Combines this DateTimeInterval with a TimeZone to create a ZonedDateTimeInterval where both endpoints are in zone. contains <p>common</p><code>open operator override fun contains(value: DateTime): Boolean</code>Checks if this interval contains value. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hasBoundedEnd <p>common</p><code>open fun hasBoundedEnd(): Boolean</code>Checks if this interval's end is bounded, meaning it has a finite value. hasBoundedStart <p>common</p><code>open fun hasBoundedStart(): Boolean</code>Checks if this interval's start is bounded, meaning it has a finite value. hashCode <p>common</p><code>open override fun hashCode(): Int</code> hasUnboundedEnd <p>common</p><code>open override fun hasUnboundedEnd(): Boolean</code>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. hasUnboundedStart <p>common</p><code>open override fun hasUnboundedStart(): Boolean</code>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. isBounded <p>common</p><code>open fun isBounded(): Boolean</code>Checks if both the start and end of this interval are bounded, meaning it has a finite range. isEmpty <p>common</p><code>open override fun isEmpty(): Boolean</code>Checks if this interval is empty. isUnbounded <p>common</p><code>open fun isUnbounded(): Boolean</code>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions. random <p>common</p><code>fun DateTimeInterval.random(): DateTime</code>Returns a random date within this interval using the default random number generator.<p>common</p><code>fun DateTimeInterval.random(random: Random): DateTime</code>Returns a random date within this interval using the supplied random number generator. randomOrNull <p>common</p><code>fun DateTimeInterval.randomOrNull(): DateTime?</code>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded.<p>common</p><code>fun DateTimeInterval.randomOrNull(random: Random): DateTime?</code>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. toDateRange <p>common</p><code>fun DateTimeInterval.toDateRange(): DateRange</code>Returns this interval with the precision reduced to just the date. toDuration <p>common</p><code>fun DateTimeInterval.toDuration(): Duration</code>Converts this interval to the Duration between the start and end date-time, which are assumed to be in the same time zone. In general, it's more appropriate to calculate duration using Instant or ZonedDateTime as any daylight savings rules won't be taken into account when working with DateTime directly. toInstantIntervalAt <p>common</p><code>fun DateTimeInterval.toInstantIntervalAt(zone: TimeZone): InstantInterval</code>Converts this interval to an InstantInterval where both endpoints are in zone. toPeriod <p>common</p><code>fun DateTimeInterval.toPeriod(): Period</code>Converts this interval into a Period of the same length. toString <p>common</p><code>open override fun toString(): String</code>Converts this interval to a string in ISO-8601 extended format."},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-date-time-interval/","title":"DateTimeInterval","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/DateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-date-time-interval/#datetimeinterval","title":"DateTimeInterval","text":"<p>common</p> <p><code>constructor(start: DateTime = UNBOUNDED.start, endExclusive: DateTime = UNBOUNDED.endExclusive)</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/contains/","title":"contains","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/contains</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/contains/#contains","title":"contains","text":"<p>common</p> <p><code>open operator override fun contains(value: DateTime): Boolean</code></p> <p>Checks if this interval contains value.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/contains/#parameters","title":"Parameters","text":"<p>common</p> value a date-time, assumed to be in the same time zone"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/end-exclusive/","title":"endExclusive","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/endExclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/end-exclusive/#endexclusive","title":"endExclusive","text":"<p>common</p> <p><code>open override val endExclusive: DateTime</code></p> <p>The end of this interval, exclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/end-inclusive/","title":"endInclusive","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/endInclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/end-inclusive/#endinclusive","title":"endInclusive","text":"<p>common</p> <p><code>open override val endInclusive: DateTime</code></p> <p>The end of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/equals/","title":"equals","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/equals</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/has-unbounded-end/","title":"hasUnboundedEnd","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/hasUnboundedEnd</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/has-unbounded-end/#hasunboundedend","title":"hasUnboundedEnd","text":"<p>common</p> <p><code>open override fun hasUnboundedEnd(): Boolean</code></p> <p>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/has-unbounded-start/","title":"hasUnboundedStart","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/hasUnboundedStart</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/has-unbounded-start/#hasunboundedstart","title":"hasUnboundedStart","text":"<p>common</p> <p><code>open override fun hasUnboundedStart(): Boolean</code></p> <p>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/hashCode</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>open override fun isEmpty(): Boolean</code></p> <p>Checks if this interval is empty.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/start/","title":"start","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/start</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/start/#start","title":"start","text":"<p>common</p> <p><code>open override val start: DateTime</code></p> <p>The start of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this interval to a string in ISO-8601 extended format.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-companion/#properties","title":"Properties","text":"Name Summary EMPTY <p>common</p><code>val EMPTY: DateTimeInterval</code>An empty interval. UNBOUNDED <p>common</p><code>val UNBOUNDED: DateTimeInterval</code>An unbounded (ie. infinite) interval."},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-companion/-e-m-p-t-y/","title":"EMPTY","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/Companion/EMPTY</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>common</p> <p><code>val EMPTY: DateTimeInterval</code></p> <p>An empty interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-companion/-u-n-b-o-u-n-d-e-d/","title":"UNBOUNDED","text":"<p>//core/io.islandtime.ranges/DateTimeInterval/Companion/UNBOUNDED</p>"},{"location":"api/core/core/io.islandtime.ranges/-date-time-interval/-companion/-u-n-b-o-u-n-d-e-d/#unbounded","title":"UNBOUNDED","text":"<p>common</p> <p><code>val UNBOUNDED: DateTimeInterval</code></p> <p>An unbounded (ie. infinite) interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/","title":"InstantInterval","text":"<p>//core/io.islandtime.ranges/InstantInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/#instantinterval","title":"InstantInterval","text":"<p>common</p> <p><code>@Serializable(with = InstantIntervalIsoSerializer::class) <p>class InstantInterval(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX) : TimePointInterval&lt;Instant&gt; , TimePointProgressionBuilder&lt;Instant&gt; </p> <p>A half-open interval between two instants.</p> <p>Instant.MIN and Instant.MAX are used as sentinels to indicate an unbounded (i.e. infinite) start or end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/#constructors","title":"Constructors","text":"InstantInterval <p>common</p><code>constructor(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX)</code>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/#properties","title":"Properties","text":"Name Summary endExclusive <p>common</p><code>open override val endExclusive: Instant</code>The end of this interval, exclusive. endInclusive <p>common</p><code>open override val endInclusive: Instant</code>The end of this interval, inclusive. first <p>common</p><code>open override val first: Instant</code> last <p>common</p><code>open override val last: Instant</code> lengthInHours <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInHours: Hours</code>The number of whole hours between the start and end of this interval. lengthInMicroseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMicroseconds: Microseconds</code>The number of whole microseconds between the start and end of this interval. lengthInMilliseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMilliseconds: Milliseconds</code>The number of whole milliseconds between the start and end of this interval. lengthInMinutes <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMinutes: Minutes</code>The number of whole minutes between the start and end of this interval. lengthInNanoseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInNanoseconds: Nanoseconds</code>The number of nanoseconds between the start and end of this interval. lengthInSeconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInSeconds: Seconds</code>The number of whole seconds between the start and end of this interval. start <p>common</p><code>open override val start: Instant</code>The start of this interval, inclusive."},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/#functions","title":"Functions","text":"Name Summary at <p>common</p><code>infix fun InstantInterval.at(zone: TimeZone): ZonedDateTimeInterval</code>Combines this InstantInterval with a TimeZone to create an equivalent ZonedDateTimeInterval where both endpoints are in zone. contains <p>common</p><code>open operator override fun contains(value: Instant): Boolean</code>Checks if this interval contains value. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value.<p>common</p><code>operator fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.contains(value: TimePoint&lt;*&gt;?): Boolean</code>Checks if this interval contains value. This will always return <code>false</code> if value is <code>null</code>. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hasBoundedEnd <p>common</p><code>open fun hasBoundedEnd(): Boolean</code>Checks if this interval's end is bounded, meaning it has a finite value. hasBoundedStart <p>common</p><code>open fun hasBoundedStart(): Boolean</code>Checks if this interval's start is bounded, meaning it has a finite value. hashCode <p>common</p><code>open override fun hashCode(): Int</code> hasUnboundedEnd <p>common</p><code>open override fun hasUnboundedEnd(): Boolean</code>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. hasUnboundedStart <p>common</p><code>open override fun hasUnboundedStart(): Boolean</code>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. isBounded <p>common</p><code>open fun isBounded(): Boolean</code>Checks if both the start and end of this interval are bounded, meaning it has a finite range. isEmpty <p>common</p><code>open override fun isEmpty(): Boolean</code>Checks if this interval is empty. isUnbounded <p>common</p><code>open fun isUnbounded(): Boolean</code>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions. random <p>common</p><code>fun InstantInterval.random(): Instant</code>Returns a random date within this interval using the default random number generator.<p>common</p><code>fun InstantInterval.random(random: Random): Instant</code>Returns a random date within this interval using the supplied random number generator. randomOrNull <p>common</p><code>fun InstantInterval.randomOrNull(): Instant?</code>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded.<p>common</p><code>fun InstantInterval.randomOrNull(random: Random): Instant?</code>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. step <p>common</p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Days): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Hours): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Microseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Milliseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Minutes): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Seconds): TimePointSecondProgression&lt;T&gt;</code> toDateRangeAt <p>common</p><code>fun InstantInterval.toDateRangeAt(zone: TimeZone): DateRange</code>Converts this interval to the equivalent DateRange when both endpoints are in zone. toDateTimeIntervalAt <p>common</p><code>fun InstantInterval.toDateTimeIntervalAt(zone: TimeZone): DateTimeInterval</code>Converts this interval to the equivalent DateTimeInterval when both endpoints are in zone. toDuration <p>common</p><code>fun TimePointInterval&lt;*&gt;.toDuration(): Duration</code>Converts this interval into a Duration of the same length. toNSDateInterval <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateInterval(): &lt;Error class: unknown class&gt;</code>Converts this interval to an equivalent <code>NSDateInterval</code>. toNSDateIntervalOrNull <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateIntervalOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this interval to an equivalent <code>NSDateInterval</code>, or <code>null</code> if the interval is unbounded. toString <p>common</p><code>open override fun toString(): String</code>Converts this interval to a string in ISO-8601 extended format."},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-instant-interval/","title":"InstantInterval","text":"<p>//core/io.islandtime.ranges/InstantInterval/InstantInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-instant-interval/#instantinterval","title":"InstantInterval","text":"<p>common</p> <p><code>constructor(start: Instant = Instant.MIN, endExclusive: Instant = Instant.MAX)</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/first/","title":"first","text":"<p>//core/io.islandtime.ranges/InstantInterval/first</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/first/#first","title":"first","text":"<p>common</p> <p><code>open override val first: Instant</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/has-unbounded-end/","title":"hasUnboundedEnd","text":"<p>//core/io.islandtime.ranges/InstantInterval/hasUnboundedEnd</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/has-unbounded-end/#hasunboundedend","title":"hasUnboundedEnd","text":"<p>common</p> <p><code>open override fun hasUnboundedEnd(): Boolean</code></p> <p>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/has-unbounded-start/","title":"hasUnboundedStart","text":"<p>//core/io.islandtime.ranges/InstantInterval/hasUnboundedStart</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/has-unbounded-start/#hasunboundedstart","title":"hasUnboundedStart","text":"<p>common</p> <p><code>open override fun hasUnboundedStart(): Boolean</code></p> <p>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/last/","title":"last","text":"<p>//core/io.islandtime.ranges/InstantInterval/last</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/last/#last","title":"last","text":"<p>common</p> <p><code>open override val last: Instant</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/InstantInterval/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this interval to a string in ISO-8601 extended format.</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/InstantInterval/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-companion/#properties","title":"Properties","text":"Name Summary EMPTY <p>common</p><code>val EMPTY: InstantInterval</code>An empty interval. UNBOUNDED <p>common</p><code>val UNBOUNDED: InstantInterval</code>An unbounded (ie. infinite) interval."},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-companion/-e-m-p-t-y/","title":"EMPTY","text":"<p>//core/io.islandtime.ranges/InstantInterval/Companion/EMPTY</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>common</p> <p><code>val EMPTY: InstantInterval</code></p> <p>An empty interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-companion/-u-n-b-o-u-n-d-e-d/","title":"UNBOUNDED","text":"<p>//core/io.islandtime.ranges/InstantInterval/Companion/UNBOUNDED</p>"},{"location":"api/core/core/io.islandtime.ranges/-instant-interval/-companion/-u-n-b-o-u-n-d-e-d/#unbounded","title":"UNBOUNDED","text":"<p>common</p> <p><code>val UNBOUNDED: InstantInterval</code></p> <p>An unbounded (ie. infinite) interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/","title":"Interval","text":"<p>//core/io.islandtime.ranges/Interval</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/#interval","title":"Interval","text":"<p><code>interface Interval&lt;T&gt;</code></p> <p>A half-open or closed interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/#inheritors","title":"Inheritors","text":"DateRange DateTimeInterval TimePointInterval"},{"location":"api/core/core/io.islandtime.ranges/-interval/#properties","title":"Properties","text":"Name Summary endExclusive <p>common</p><code>abstract val endExclusive: T</code>The end of this interval, exclusive. endInclusive <p>common</p><code>abstract val endInclusive: T</code>The end of this interval, inclusive. start <p>common</p><code>abstract val start: T</code>The start of this interval, inclusive."},{"location":"api/core/core/io.islandtime.ranges/-interval/#functions","title":"Functions","text":"Name Summary contains <p>common</p><code>abstract operator fun contains(value: T): Boolean</code>Checks if this interval contains value. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value. hasBoundedEnd <p>common</p><code>open fun hasBoundedEnd(): Boolean</code>Checks if this interval's end is bounded, meaning it has a finite value. hasBoundedStart <p>common</p><code>open fun hasBoundedStart(): Boolean</code>Checks if this interval's start is bounded, meaning it has a finite value. hasUnboundedEnd <p>common</p><code>abstract fun hasUnboundedEnd(): Boolean</code>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. hasUnboundedStart <p>common</p><code>abstract fun hasUnboundedStart(): Boolean</code>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. isBounded <p>common</p><code>open fun isBounded(): Boolean</code>Checks if both the start and end of this interval are bounded, meaning it has a finite range. isEmpty <p>common</p><code>abstract fun isEmpty(): Boolean</code>Checks if this interval is empty. isUnbounded <p>common</p><code>open fun isUnbounded(): Boolean</code>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions."},{"location":"api/core/core/io.islandtime.ranges/-interval/contains/","title":"contains","text":"<p>//core/io.islandtime.ranges/Interval/contains</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/contains/#contains","title":"contains","text":"<p>common</p> <p><code>abstract operator fun contains(value: T): Boolean</code></p> <p>Checks if this interval contains value.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/end-exclusive/","title":"endExclusive","text":"<p>//core/io.islandtime.ranges/Interval/endExclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/end-exclusive/#endexclusive","title":"endExclusive","text":"<p>common</p> <p><code>abstract val endExclusive: T</code></p> <p>The end of this interval, exclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/end-inclusive/","title":"endInclusive","text":"<p>//core/io.islandtime.ranges/Interval/endInclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/end-inclusive/#endinclusive","title":"endInclusive","text":"<p>common</p> <p><code>abstract val endInclusive: T</code></p> <p>The end of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-bounded-end/","title":"hasBoundedEnd","text":"<p>//core/io.islandtime.ranges/Interval/hasBoundedEnd</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-bounded-end/#hasboundedend","title":"hasBoundedEnd","text":"<p>common</p> <p><code>open fun hasBoundedEnd(): Boolean</code></p> <p>Checks if this interval's end is bounded, meaning it has a finite value.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-bounded-start/","title":"hasBoundedStart","text":"<p>//core/io.islandtime.ranges/Interval/hasBoundedStart</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-bounded-start/#hasboundedstart","title":"hasBoundedStart","text":"<p>common</p> <p><code>open fun hasBoundedStart(): Boolean</code></p> <p>Checks if this interval's start is bounded, meaning it has a finite value.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-unbounded-end/","title":"hasUnboundedEnd","text":"<p>//core/io.islandtime.ranges/Interval/hasUnboundedEnd</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-unbounded-end/#hasunboundedend","title":"hasUnboundedEnd","text":"<p>common</p> <p><code>abstract fun hasUnboundedEnd(): Boolean</code></p> <p>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-unbounded-start/","title":"hasUnboundedStart","text":"<p>//core/io.islandtime.ranges/Interval/hasUnboundedStart</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/has-unbounded-start/#hasunboundedstart","title":"hasUnboundedStart","text":"<p>common</p> <p><code>abstract fun hasUnboundedStart(): Boolean</code></p> <p>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/is-bounded/","title":"isBounded","text":"<p>//core/io.islandtime.ranges/Interval/isBounded</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/is-bounded/#isbounded","title":"isBounded","text":"<p>common</p> <p><code>open fun isBounded(): Boolean</code></p> <p>Checks if both the start and end of this interval are bounded, meaning it has a finite range.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/Interval/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>abstract fun isEmpty(): Boolean</code></p> <p>Checks if this interval is empty.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/is-unbounded/","title":"isUnbounded","text":"<p>//core/io.islandtime.ranges/Interval/isUnbounded</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/is-unbounded/#isunbounded","title":"isUnbounded","text":"<p>common</p> <p><code>open fun isUnbounded(): Boolean</code></p> <p>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions.</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/start/","title":"start","text":"<p>//core/io.islandtime.ranges/Interval/start</p>"},{"location":"api/core/core/io.islandtime.ranges/-interval/start/#start","title":"start","text":"<p>common</p> <p><code>abstract val start: T</code></p> <p>The start of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/","title":"OffsetDateTimeInterval","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/#offsetdatetimeinterval","title":"OffsetDateTimeInterval","text":"<p>common</p> <p><code>@Serializable(with = OffsetDateTimeIntervalIsoSerializer::class) <p>class OffsetDateTimeInterval(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive) : TimePointInterval&lt;OffsetDateTime&gt; </p> <p>A half-open interval between two offset date-times based on timeline order.</p> <p>DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (i.e. infinite) start or end. An OffsetDateTime with either as the date-time component will be treated accordingly, regardless of the offset.</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/#constructors","title":"Constructors","text":"OffsetDateTimeInterval <p>common</p><code>constructor(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive)</code>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/#properties","title":"Properties","text":"Name Summary endExclusive <p>common</p><code>open override val endExclusive: OffsetDateTime</code>The end of this interval, exclusive. endInclusive <p>common</p><code>open override val endInclusive: OffsetDateTime</code>The end of this interval, inclusive. lengthInCenturies <p>common</p><code>val OffsetDateTimeInterval.lengthInCenturies: Centuries</code>The number of whole centuries between the start and end of this interval. lengthInDays <p>common</p><code>val OffsetDateTimeInterval.lengthInDays: Days</code>The number of whole days between the start and end of this interval. lengthInDecades <p>common</p><code>val OffsetDateTimeInterval.lengthInDecades: Decades</code>The number of whole decades between the start and end of this interval. lengthInHours <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInHours: Hours</code>The number of whole hours between the start and end of this interval. lengthInMicroseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMicroseconds: Microseconds</code>The number of whole microseconds between the start and end of this interval. lengthInMilliseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMilliseconds: Milliseconds</code>The number of whole milliseconds between the start and end of this interval. lengthInMinutes <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMinutes: Minutes</code>The number of whole minutes between the start and end of this interval. lengthInMonths <p>common</p><code>val OffsetDateTimeInterval.lengthInMonths: Months</code>The number of whole months between the start and end of this interval. lengthInNanoseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInNanoseconds: Nanoseconds</code>The number of nanoseconds between the start and end of this interval. lengthInSeconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInSeconds: Seconds</code>The number of whole seconds between the start and end of this interval. lengthInWeeks <p>common</p><code>val OffsetDateTimeInterval.lengthInWeeks: Weeks</code>The number of whole weeks between the start and end of this interval. lengthInYears <p>common</p><code>val OffsetDateTimeInterval.lengthInYears: Years</code>The number of whole years between the start and end of this interval. start <p>common</p><code>open override val start: OffsetDateTime</code>The start of this interval, inclusive."},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/#functions","title":"Functions","text":"Name Summary asZonedDateTimeInterval <p>common</p><code>fun OffsetDateTimeInterval.asZonedDateTimeInterval(): ZonedDateTimeInterval</code>Converts this interval to an equivalent ZonedDateTimeInterval where both endpoints are given a fixed-offset time zone. contains <p>common</p><code>open operator override fun contains(value: OffsetDateTime): Boolean</code>Checks if this interval contains value. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value.<p>common</p><code>operator fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.contains(value: TimePoint&lt;*&gt;?): Boolean</code>Checks if this interval contains value. This will always return <code>false</code> if value is <code>null</code>. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hasBoundedEnd <p>common</p><code>open fun hasBoundedEnd(): Boolean</code>Checks if this interval's end is bounded, meaning it has a finite value. hasBoundedStart <p>common</p><code>open fun hasBoundedStart(): Boolean</code>Checks if this interval's start is bounded, meaning it has a finite value. hashCode <p>common</p><code>open override fun hashCode(): Int</code> hasUnboundedEnd <p>common</p><code>open override fun hasUnboundedEnd(): Boolean</code>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. hasUnboundedStart <p>common</p><code>open override fun hasUnboundedStart(): Boolean</code>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. isBounded <p>common</p><code>open fun isBounded(): Boolean</code>Checks if both the start and end of this interval are bounded, meaning it has a finite range. isEmpty <p>common</p><code>open override fun isEmpty(): Boolean</code>Checks if this interval is empty. isUnbounded <p>common</p><code>open fun isUnbounded(): Boolean</code>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions. random <p>common</p><code>fun OffsetDateTimeInterval.random(): OffsetDateTime</code>Returns a random date within this interval using the default random number generator. The offset of the start date-time will be used.<p>common</p><code>fun OffsetDateTimeInterval.random(random: Random): OffsetDateTime</code>Returns a random date within this interval using the supplied random number generator. The offset of the start date-time will be used. randomOrNull <p>common</p><code>fun OffsetDateTimeInterval.randomOrNull(): OffsetDateTime?</code>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded. The offset of the start date-time will be used.<p>common</p><code>fun OffsetDateTimeInterval.randomOrNull(random: Random): OffsetDateTime?</code>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. The offset of the start date-time will be used. toDateRange <p>common</p><code>fun OffsetDateTimeInterval.toDateRange(): DateRange</code>Returns this interval with the precision reduced to just the date. toDateTimeInterval <p>common</p><code>fun OffsetDateTimeInterval.toDateTimeInterval(): DateTimeInterval</code>Returns this interval with the precision reduced to only the local date and time. toDuration <p>common</p><code>fun TimePointInterval&lt;*&gt;.toDuration(): Duration</code>Converts this interval into a Duration of the same length. toInstantInterval <p>common</p><code>fun OffsetDateTimeInterval.toInstantInterval(): InstantInterval</code>Converts this interval to an InstantInterval. toNSDateInterval <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateInterval(): &lt;Error class: unknown class&gt;</code>Converts this interval to an equivalent <code>NSDateInterval</code>. toNSDateIntervalOrNull <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateIntervalOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this interval to an equivalent <code>NSDateInterval</code>, or <code>null</code> if the interval is unbounded. toPeriod <p>common</p><code>fun OffsetDateTimeInterval.toPeriod(): Period</code>Converts this interval into a Period of the same length. toString <p>common</p><code>open override fun toString(): String</code>Converts this interval to a string in ISO-8601 extended format. toZonedDateTimeInterval <p>common</p><code>fun OffsetDateTimeInterval.toZonedDateTimeInterval(zone: TimeZone, strategy: OffsetConversionStrategy): ZonedDateTimeInterval</code>Converts this interval to a ZonedDateTimeInterval using the specified strategy to adjust each endpoint to a valid date, time, and offset in zone."},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-offset-date-time-interval/","title":"OffsetDateTimeInterval","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval/OffsetDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-offset-date-time-interval/#offsetdatetimeinterval","title":"OffsetDateTimeInterval","text":"<p>common</p> <p><code>constructor(start: OffsetDateTime = UNBOUNDED.start, endExclusive: OffsetDateTime = UNBOUNDED.endExclusive)</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-end/","title":"hasUnboundedEnd","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval/hasUnboundedEnd</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-end/#hasunboundedend","title":"hasUnboundedEnd","text":"<p>common</p> <p><code>open override fun hasUnboundedEnd(): Boolean</code></p> <p>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-start/","title":"hasUnboundedStart","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval/hasUnboundedStart</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/has-unbounded-start/#hasunboundedstart","title":"hasUnboundedStart","text":"<p>common</p> <p><code>open override fun hasUnboundedStart(): Boolean</code></p> <p>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this interval to a string in ISO-8601 extended format.</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-companion/#properties","title":"Properties","text":"Name Summary EMPTY <p>common</p><code>val EMPTY: OffsetDateTimeInterval</code>An empty interval. UNBOUNDED <p>common</p><code>val UNBOUNDED: OffsetDateTimeInterval</code>An unbounded (ie. infinite) interval."},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-companion/-e-m-p-t-y/","title":"EMPTY","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval/Companion/EMPTY</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>common</p> <p><code>val EMPTY: OffsetDateTimeInterval</code></p> <p>An empty interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-companion/-u-n-b-o-u-n-d-e-d/","title":"UNBOUNDED","text":"<p>//core/io.islandtime.ranges/OffsetDateTimeInterval/Companion/UNBOUNDED</p>"},{"location":"api/core/core/io.islandtime.ranges/-offset-date-time-interval/-companion/-u-n-b-o-u-n-d-e-d/#unbounded","title":"UNBOUNDED","text":"<p>common</p> <p><code>val UNBOUNDED: OffsetDateTimeInterval</code></p> <p>An unbounded (ie. infinite) interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/","title":"TimePointInterval","text":"<p>//core/io.islandtime.ranges/TimePointInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/#timepointinterval","title":"TimePointInterval","text":"<p><code>abstract class TimePointInterval&lt;T : TimePoint&lt;T&gt;&gt; : Interval&lt;T&gt; </code></p> <p>A half-open interval of time points.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/#inheritors","title":"Inheritors","text":"InstantInterval OffsetDateTimeInterval ZonedDateTimeInterval"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/#properties","title":"Properties","text":"Name Summary endExclusive <p>common</p><code>open override val endExclusive: T</code>The end of this interval, exclusive. endInclusive <p>common</p><code>open override val endInclusive: T</code>The end of this interval, inclusive. lengthInHours <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInHours: Hours</code>The number of whole hours between the start and end of this interval. lengthInMicroseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMicroseconds: Microseconds</code>The number of whole microseconds between the start and end of this interval. lengthInMilliseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMilliseconds: Milliseconds</code>The number of whole milliseconds between the start and end of this interval. lengthInMinutes <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMinutes: Minutes</code>The number of whole minutes between the start and end of this interval. lengthInNanoseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInNanoseconds: Nanoseconds</code>The number of nanoseconds between the start and end of this interval. lengthInSeconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInSeconds: Seconds</code>The number of whole seconds between the start and end of this interval. start <p>common</p><code>open override val start: T</code>The start of this interval, inclusive."},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/#functions","title":"Functions","text":"Name Summary contains <p>common</p><code>open operator override fun contains(value: T): Boolean</code>Checks if this interval contains value. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value.<p>common</p><code>operator fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.contains(value: TimePoint&lt;*&gt;?): Boolean</code>Checks if this interval contains value. This will always return <code>false</code> if value is <code>null</code>. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hasBoundedEnd <p>common</p><code>open fun hasBoundedEnd(): Boolean</code>Checks if this interval's end is bounded, meaning it has a finite value. hasBoundedStart <p>common</p><code>open fun hasBoundedStart(): Boolean</code>Checks if this interval's start is bounded, meaning it has a finite value. hashCode <p>common</p><code>open override fun hashCode(): Int</code> hasUnboundedEnd <p>common</p><code>abstract fun hasUnboundedEnd(): Boolean</code>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. hasUnboundedStart <p>common</p><code>abstract fun hasUnboundedStart(): Boolean</code>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. isBounded <p>common</p><code>open fun isBounded(): Boolean</code>Checks if both the start and end of this interval are bounded, meaning it has a finite range. isEmpty <p>common</p><code>open override fun isEmpty(): Boolean</code>Checks if this interval is empty. isUnbounded <p>common</p><code>open fun isUnbounded(): Boolean</code>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions. toDuration <p>common</p><code>fun TimePointInterval&lt;*&gt;.toDuration(): Duration</code>Converts this interval into a Duration of the same length. toNSDateInterval <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateInterval(): &lt;Error class: unknown class&gt;</code>Converts this interval to an equivalent <code>NSDateInterval</code>. toNSDateIntervalOrNull <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateIntervalOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this interval to an equivalent <code>NSDateInterval</code>, or <code>null</code> if the interval is unbounded."},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/contains/","title":"contains","text":"<p>//core/io.islandtime.ranges/TimePointInterval/contains</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/contains/#contains","title":"contains","text":"<p>common</p> <p><code>open operator override fun contains(value: T): Boolean</code></p> <p>Checks if this interval contains value.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/end-exclusive/","title":"endExclusive","text":"<p>//core/io.islandtime.ranges/TimePointInterval/endExclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/end-exclusive/#endexclusive","title":"endExclusive","text":"<p>common</p> <p><code>open override val endExclusive: T</code></p> <p>The end of this interval, exclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/end-inclusive/","title":"endInclusive","text":"<p>//core/io.islandtime.ranges/TimePointInterval/endInclusive</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/end-inclusive/#endinclusive","title":"endInclusive","text":"<p>common</p> <p><code>open override val endInclusive: T</code></p> <p>The end of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/equals/","title":"equals","text":"<p>//core/io.islandtime.ranges/TimePointInterval/equals</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.ranges/TimePointInterval/hashCode</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/TimePointInterval/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>open override fun isEmpty(): Boolean</code></p> <p>Checks if this interval is empty.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/start/","title":"start","text":"<p>//core/io.islandtime.ranges/TimePointInterval/start</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-interval/start/#start","title":"start","text":"<p>common</p> <p><code>open override val start: T</code></p> <p>The start of this interval, inclusive.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/","title":"TimePointNanosecondProgression","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/#timepointnanosecondprogression","title":"TimePointNanosecondProgression","text":"<p>common</p> <p><code>class TimePointNanosecondProgression&lt;T : TimePoint&lt;T&gt;&gt; : TimePointProgressionBuilder&lt;T&gt; , Iterable&lt;T&gt; </code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/#properties","title":"Properties","text":"Name Summary first <p>common</p><code>open override val first: T</code> last <p>common</p><code>open override val last: T</code> step <p>common</p><code>val step: Nanoseconds</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/#functions","title":"Functions","text":"Name Summary equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isEmpty <p>common</p><code>fun isEmpty(): Boolean</code> iterator <p>common</p><code>open operator override fun iterator(): Iterator&lt;T&gt;</code> reversed <p>common</p><code>fun reversed(): TimePointNanosecondProgression&lt;T&gt;</code>Reverses this progression such that it counts down instead of up, or vice versa. step <p>common</p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Days): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Hours): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Microseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Milliseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Minutes): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Seconds): TimePointSecondProgression&lt;T&gt;</code> toString <p>common</p><code>open override fun toString(): String</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/equals/","title":"equals","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/equals</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/first/","title":"first","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/first</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/first/#first","title":"first","text":"<p>common</p> <p><code>open override val first: T</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/hashCode</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>fun isEmpty(): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/iterator/","title":"iterator","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/iterator</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/iterator/#iterator","title":"iterator","text":"<p>common</p> <p><code>open operator override fun iterator(): Iterator&lt;T&gt;</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/last/","title":"last","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/last</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/last/#last","title":"last","text":"<p>common</p> <p><code>open override val last: T</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/reversed/","title":"reversed","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/reversed</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/reversed/#reversed","title":"reversed","text":"<p>common</p> <p><code>fun reversed(): TimePointNanosecondProgression&lt;T&gt;</code></p> <p>Reverses this progression such that it counts down instead of up, or vice versa.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/step/","title":"step","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/step</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/step/#step","title":"step","text":"<p>common</p> <p><code>val step: Nanoseconds</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/-companion/#functions","title":"Functions","text":"Name Summary fromClosedRange <p>common</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; fromClosedRange(rangeStart: T, rangeEnd: T, step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/-companion/from-closed-range/","title":"fromClosedRange","text":"<p>//core/io.islandtime.ranges/TimePointNanosecondProgression/Companion/fromClosedRange</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-nanosecond-progression/-companion/from-closed-range/#fromclosedrange","title":"fromClosedRange","text":"<p>common</p> <p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; fromClosedRange(rangeStart: T, rangeEnd: T, step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/","title":"TimePointProgressionBuilder","text":"<p>//core/io.islandtime.ranges/TimePointProgressionBuilder</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/#timepointprogressionbuilder","title":"TimePointProgressionBuilder","text":"<p><code>interface TimePointProgressionBuilder&lt;T : TimePoint&lt;T&gt;&gt;</code></p> <p>A time point progression builder.</p> <p>Without a step, a time-based progression can't be created. This interface represents an intermediate state in the process of creating a time point progression.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/#inheritors","title":"Inheritors","text":"InstantInterval TimePointSecondProgression TimePointNanosecondProgression"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/#properties","title":"Properties","text":"Name Summary first <p>common</p><code>abstract val first: T</code> last <p>common</p><code>abstract val last: T</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/#functions","title":"Functions","text":"Name Summary step <p>common</p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Days): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Hours): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Microseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Milliseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Minutes): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Seconds): TimePointSecondProgression&lt;T&gt;</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/first/","title":"first","text":"<p>//core/io.islandtime.ranges/TimePointProgressionBuilder/first</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/first/#first","title":"first","text":"<p>common</p> <p><code>abstract val first: T</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/last/","title":"last","text":"<p>//core/io.islandtime.ranges/TimePointProgressionBuilder/last</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-progression-builder/last/#last","title":"last","text":"<p>common</p> <p><code>abstract val last: T</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/","title":"TimePointSecondProgression","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/#timepointsecondprogression","title":"TimePointSecondProgression","text":"<p>common</p> <p><code>class TimePointSecondProgression&lt;T : TimePoint&lt;T&gt;&gt; : TimePointProgressionBuilder&lt;T&gt; , Iterable&lt;T&gt; </code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/#properties","title":"Properties","text":"Name Summary first <p>common</p><code>open override val first: T</code> last <p>common</p><code>open override val last: T</code> step <p>common</p><code>val step: Seconds</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/#functions","title":"Functions","text":"Name Summary equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hashCode <p>common</p><code>open override fun hashCode(): Int</code> isEmpty <p>common</p><code>fun isEmpty(): Boolean</code> iterator <p>common</p><code>open operator override fun iterator(): Iterator&lt;T&gt;</code> reversed <p>common</p><code>fun reversed(): TimePointSecondProgression&lt;T&gt;</code>Reverses this progression such that it counts down instead of up, or vice versa. step <p>common</p><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Days): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Hours): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Microseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Milliseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Minutes): TimePointSecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Nanoseconds): TimePointNanosecondProgression&lt;T&gt;</code><code>infix fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointProgressionBuilder&lt;T&gt;.step(step: Seconds): TimePointSecondProgression&lt;T&gt;</code> toString <p>common</p><code>open override fun toString(): String</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/equals/","title":"equals","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/equals</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/equals/#equals","title":"equals","text":"<p>common</p> <p><code>open operator override fun equals(other: Any?): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/first/","title":"first","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/first</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/first/#first","title":"first","text":"<p>common</p> <p><code>open override val first: T</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/hash-code/","title":"hashCode","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/hashCode</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/hash-code/#hashcode","title":"hashCode","text":"<p>common</p> <p><code>open override fun hashCode(): Int</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/is-empty/","title":"isEmpty","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/isEmpty</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/is-empty/#isempty","title":"isEmpty","text":"<p>common</p> <p><code>fun isEmpty(): Boolean</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/iterator/","title":"iterator","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/iterator</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/iterator/#iterator","title":"iterator","text":"<p>common</p> <p><code>open operator override fun iterator(): Iterator&lt;T&gt;</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/last/","title":"last","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/last</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/last/#last","title":"last","text":"<p>common</p> <p><code>open override val last: T</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/reversed/","title":"reversed","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/reversed</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/reversed/#reversed","title":"reversed","text":"<p>common</p> <p><code>fun reversed(): TimePointSecondProgression&lt;T&gt;</code></p> <p>Reverses this progression such that it counts down instead of up, or vice versa.</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/step/","title":"step","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/step</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/step/#step","title":"step","text":"<p>common</p> <p><code>val step: Seconds</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/-companion/#functions","title":"Functions","text":"Name Summary fromClosedRange <p>common</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; fromClosedRange(rangeStart: T, rangeEnd: T, step: Seconds): TimePointSecondProgression&lt;T&gt;</code>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/-companion/from-closed-range/","title":"fromClosedRange","text":"<p>//core/io.islandtime.ranges/TimePointSecondProgression/Companion/fromClosedRange</p>"},{"location":"api/core/core/io.islandtime.ranges/-time-point-second-progression/-companion/from-closed-range/#fromclosedrange","title":"fromClosedRange","text":"<p>common</p> <p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; fromClosedRange(rangeStart: T, rangeEnd: T, step: Seconds): TimePointSecondProgression&lt;T&gt;</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/","title":"ZonedDateTimeInterval","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/#zoneddatetimeinterval","title":"ZonedDateTimeInterval","text":"<p>common</p> <p><code>@Serializable(with = ZonedDateTimeIntervalIsoSerializer::class) <p>class ZonedDateTimeInterval(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive) : TimePointInterval&lt;ZonedDateTime&gt; </p> <p>A half-open interval of zoned date-times based on timeline order.</p> <p>DateTime.MIN and DateTime.MAX are used as sentinels to indicate an unbounded (i.e. infinite) start or end. A ZonedDateTime with either as the date-time component will be treated accordingly, regardless of the offset or time zone.</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/#constructors","title":"Constructors","text":"ZonedDateTimeInterval <p>common</p><code>constructor(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive)</code>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion</code>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/#properties","title":"Properties","text":"Name Summary endExclusive <p>common</p><code>open override val endExclusive: ZonedDateTime</code>The end of this interval, exclusive. endInclusive <p>common</p><code>open override val endInclusive: ZonedDateTime</code>The end of this interval, inclusive. lengthInCenturies <p>common</p><code>val ZonedDateTimeInterval.lengthInCenturies: Centuries</code>The number of whole centuries between the start and end of this interval. lengthInDays <p>common</p><code>val ZonedDateTimeInterval.lengthInDays: Days</code>The number of whole days between the start and end of this interval. lengthInDecades <p>common</p><code>val ZonedDateTimeInterval.lengthInDecades: Decades</code>The number of whole decades between the start and end of this interval. lengthInHours <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInHours: Hours</code>The number of whole hours between the start and end of this interval. lengthInMicroseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMicroseconds: Microseconds</code>The number of whole microseconds between the start and end of this interval. lengthInMilliseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMilliseconds: Milliseconds</code>The number of whole milliseconds between the start and end of this interval. lengthInMinutes <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInMinutes: Minutes</code>The number of whole minutes between the start and end of this interval. lengthInMonths <p>common</p><code>val ZonedDateTimeInterval.lengthInMonths: Months</code>The number of whole months between the start and end of this interval. lengthInNanoseconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInNanoseconds: Nanoseconds</code>The number of nanoseconds between the start and end of this interval. lengthInSeconds <p>common</p><code>val TimePointInterval&lt;*&gt;.lengthInSeconds: Seconds</code>The number of whole seconds between the start and end of this interval. lengthInWeeks <p>common</p><code>val ZonedDateTimeInterval.lengthInWeeks: Weeks</code>The number of whole weeks between the start and end of this interval. lengthInYears <p>common</p><code>val ZonedDateTimeInterval.lengthInYears: Years</code>The number of whole years between the start and end of this interval. start <p>common</p><code>open override val start: ZonedDateTime</code>The start of this interval, inclusive."},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/#functions","title":"Functions","text":"Name Summary contains <p>common</p><code>open operator override fun contains(value: ZonedDateTime): Boolean</code>Checks if this interval contains value. contains <p>common</p><code>fun &lt;T&gt; Interval&lt;T&gt;.contains(value: T?): Boolean</code>Checks if this interval contains value.<p>common</p><code>operator fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.contains(value: TimePoint&lt;*&gt;?): Boolean</code>Checks if this interval contains value. This will always return <code>false</code> if value is <code>null</code>. equals <p>common</p><code>open operator override fun equals(other: Any?): Boolean</code> hasBoundedEnd <p>common</p><code>open fun hasBoundedEnd(): Boolean</code>Checks if this interval's end is bounded, meaning it has a finite value. hasBoundedStart <p>common</p><code>open fun hasBoundedStart(): Boolean</code>Checks if this interval's start is bounded, meaning it has a finite value. hashCode <p>common</p><code>open override fun hashCode(): Int</code> hasUnboundedEnd <p>common</p><code>open override fun hasUnboundedEnd(): Boolean</code>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end. hasUnboundedStart <p>common</p><code>open override fun hasUnboundedStart(): Boolean</code>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start. isBounded <p>common</p><code>open fun isBounded(): Boolean</code>Checks if both the start and end of this interval are bounded, meaning it has a finite range. isEmpty <p>common</p><code>open override fun isEmpty(): Boolean</code>Checks if this interval is empty. isUnbounded <p>common</p><code>open fun isUnbounded(): Boolean</code>Checks if both the start and end of this interval are unbounded, meaning this is an infinite time period in both directions. random <p>common</p><code>fun ZonedDateTimeInterval.random(): ZonedDateTime</code>Returns a random date within this interval using the default random number generator. The zone of the start date-time will be used.<p>common</p><code>fun ZonedDateTimeInterval.random(random: Random): ZonedDateTime</code>Returns a random date within this interval using the supplied random number generator. The zone of the start date-time will be used. randomOrNull <p>common</p><code>fun ZonedDateTimeInterval.randomOrNull(): ZonedDateTime?</code>Returns a random date within this interval using the default random number generator or <code>null</code> if the interval is empty or unbounded. The zone of the start date-time will be used.<p>common</p><code>fun ZonedDateTimeInterval.randomOrNull(random: Random): ZonedDateTime?</code>Returns a random date within this interval using the supplied random number generator or <code>null</code> if the interval is empty or unbounded. The zone of the start date-time will be used. toDateRange <p>common</p><code>fun ZonedDateTimeInterval.toDateRange(): DateRange</code>Returns this interval with the precision reduced to just the date. toDateTimeInterval <p>common</p><code>fun ZonedDateTimeInterval.toDateTimeInterval(): DateTimeInterval</code>Returns this interval with the precision reduced to only the local date and time. toDuration <p>common</p><code>fun TimePointInterval&lt;*&gt;.toDuration(): Duration</code>Converts this interval into a Duration of the same length. toInstantInterval <p>common</p><code>fun ZonedDateTimeInterval.toInstantInterval(): InstantInterval</code>Converts this interval to an InstantInterval. toNSDateInterval <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateInterval(): &lt;Error class: unknown class&gt;</code>Converts this interval to an equivalent <code>NSDateInterval</code>. toNSDateIntervalOrNull <p>darwin</p><code>fun &lt;T : TimePoint&lt;T&gt;&gt; TimePointInterval&lt;T&gt;.toNSDateIntervalOrNull(): &lt;Error class: unknown class&gt;?</code>Converts this interval to an equivalent <code>NSDateInterval</code>, or <code>null</code> if the interval is unbounded. toOffsetDateTimeInterval <p>common</p><code>fun ZonedDateTimeInterval.toOffsetDateTimeInterval(): OffsetDateTimeInterval</code>Converts this interval to an OffsetDateTimeInterval. toPeriod <p>common</p><code>fun ZonedDateTimeInterval.toPeriod(): Period</code>Converts this interval into a Period of the same length. toString <p>common</p><code>open override fun toString(): String</code>Converts this interval to a string in ISO-8601 extended format."},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-zoned-date-time-interval/","title":"ZonedDateTimeInterval","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval/ZonedDateTimeInterval</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-zoned-date-time-interval/#zoneddatetimeinterval","title":"ZonedDateTimeInterval","text":"<p>common</p> <p><code>constructor(start: ZonedDateTime = UNBOUNDED.start, endExclusive: ZonedDateTime = UNBOUNDED.endExclusive)</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-end/","title":"hasUnboundedEnd","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval/hasUnboundedEnd</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-end/#hasunboundedend","title":"hasUnboundedEnd","text":"<p>common</p> <p><code>open override fun hasUnboundedEnd(): Boolean</code></p> <p>Checks if this interval's end is unbounded. In ISO-8601 terminology, this is an \"open\" end.</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-start/","title":"hasUnboundedStart","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval/hasUnboundedStart</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/has-unbounded-start/#hasunboundedstart","title":"hasUnboundedStart","text":"<p>common</p> <p><code>open override fun hasUnboundedStart(): Boolean</code></p> <p>Checks if this interval's start is unbounded. In ISO-8601 terminology, this is an \"open\" start.</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/to-string/","title":"toString","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval/toString</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/to-string/#tostring","title":"toString","text":"<p>common</p> <p><code>open override fun toString(): String</code></p> <p>Converts this interval to a string in ISO-8601 extended format.</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-companion/","title":"Companion","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval/Companion</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion</code></p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-companion/#properties","title":"Properties","text":"Name Summary EMPTY <p>common</p><code>val EMPTY: ZonedDateTimeInterval</code>An empty interval. UNBOUNDED <p>common</p><code>val UNBOUNDED: ZonedDateTimeInterval</code>An unbounded (ie. infinite) interval."},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-companion/-e-m-p-t-y/","title":"EMPTY","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval/Companion/EMPTY</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>common</p> <p><code>val EMPTY: ZonedDateTimeInterval</code></p> <p>An empty interval.</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-companion/-u-n-b-o-u-n-d-e-d/","title":"UNBOUNDED","text":"<p>//core/io.islandtime.ranges/ZonedDateTimeInterval/Companion/UNBOUNDED</p>"},{"location":"api/core/core/io.islandtime.ranges/-zoned-date-time-interval/-companion/-u-n-b-o-u-n-d-e-d/#unbounded","title":"UNBOUNDED","text":"<p>common</p> <p><code>val UNBOUNDED: ZonedDateTimeInterval</code></p> <p>An unbounded (ie. infinite) interval.</p>"},{"location":"api/core/core/io.islandtime.serialization/","title":"io.islandtime.serialization","text":"<p>//core/io.islandtime.serialization</p>"},{"location":"api/core/core/io.islandtime.serialization/#package-level-declarations","title":"Package-level declarations","text":"<p>common</p> <p>Serializers for use with Kotlin Serialization.</p>"},{"location":"api/core/core/io.islandtime.serialization/#types","title":"Types","text":"Name Summary DateIsoSerializer <p>common</p><code>object DateIsoSerializer : KSerializer&lt;Date&gt; </code> DateRangeIsoSerializer <p>common</p><code>object DateRangeIsoSerializer : KSerializer&lt;DateRange&gt; </code> DateTimeIntervalIsoSerializer <p>common</p><code>object DateTimeIntervalIsoSerializer : KSerializer&lt;DateTimeInterval&gt; </code> DateTimeIsoSerializer <p>common</p><code>object DateTimeIsoSerializer : KSerializer&lt;DateTime&gt; </code> DurationIsoSerializer <p>common</p><code>object DurationIsoSerializer : KSerializer&lt;Duration&gt; </code> InstantIntervalIsoSerializer <p>common</p><code>object InstantIntervalIsoSerializer : KSerializer&lt;InstantInterval&gt; </code> InstantIsoSerializer <p>common</p><code>object InstantIsoSerializer : KSerializer&lt;Instant&gt; </code> OffsetDateTimeIntervalIsoSerializer <p>common</p><code>object OffsetDateTimeIntervalIsoSerializer : KSerializer&lt;OffsetDateTimeInterval&gt; </code> OffsetDateTimeIsoSerializer <p>common</p><code>object OffsetDateTimeIsoSerializer : KSerializer&lt;OffsetDateTime&gt; </code> OffsetTimeIsoSerializer <p>common</p><code>object OffsetTimeIsoSerializer : KSerializer&lt;OffsetTime&gt; </code> PeriodIsoSerializer <p>common</p><code>object PeriodIsoSerializer : KSerializer&lt;Period&gt; </code> TimeIsoSerializer <p>common</p><code>object TimeIsoSerializer : KSerializer&lt;Time&gt; </code> TimeZoneSerializer <p>common</p><code>object TimeZoneSerializer : KSerializer&lt;TimeZone&gt; </code> UtcOffsetIsoSerializer <p>common</p><code>object UtcOffsetIsoSerializer : KSerializer&lt;UtcOffset&gt; </code> YearIsoSerializer <p>common</p><code>object YearIsoSerializer : KSerializer&lt;Year&gt; </code> YearMonthIsoSerializer <p>common</p><code>object YearMonthIsoSerializer : KSerializer&lt;YearMonth&gt; </code> ZonedDateTimeIntervalIsoSerializer <p>common</p><code>object ZonedDateTimeIntervalIsoSerializer : KSerializer&lt;ZonedDateTimeInterval&gt; </code> ZonedDateTimeIsoSerializer <p>common</p><code>object ZonedDateTimeIsoSerializer : KSerializer&lt;ZonedDateTime&gt; </code>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/","title":"DateIsoSerializer","text":"<p>//core/io.islandtime.serialization/DateIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/#dateisoserializer","title":"DateIsoSerializer","text":"<p>common</p> <p><code>object DateIsoSerializer : KSerializer&lt;Date&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): Date</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: Date)</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/DateIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/DateIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): Date</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/DateIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: Date)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/","title":"DateRangeIsoSerializer","text":"<p>//core/io.islandtime.serialization/DateRangeIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/#daterangeisoserializer","title":"DateRangeIsoSerializer","text":"<p>common</p> <p><code>object DateRangeIsoSerializer : KSerializer&lt;DateRange&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): DateRange</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: DateRange)</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/DateRangeIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/DateRangeIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): DateRange</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/DateRangeIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-range-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: DateRange)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/","title":"DateTimeIntervalIsoSerializer","text":"<p>//core/io.islandtime.serialization/DateTimeIntervalIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/#datetimeintervalisoserializer","title":"DateTimeIntervalIsoSerializer","text":"<p>common</p> <p><code>object DateTimeIntervalIsoSerializer : KSerializer&lt;DateTimeInterval&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): DateTimeInterval</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: DateTimeInterval)</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/DateTimeIntervalIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/DateTimeIntervalIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): DateTimeInterval</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/DateTimeIntervalIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-interval-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: DateTimeInterval)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/","title":"DateTimeIsoSerializer","text":"<p>//core/io.islandtime.serialization/DateTimeIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/#datetimeisoserializer","title":"DateTimeIsoSerializer","text":"<p>common</p> <p><code>object DateTimeIsoSerializer : KSerializer&lt;DateTime&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): DateTime</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: DateTime)</code>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/DateTimeIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/DateTimeIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): DateTime</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/DateTimeIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-date-time-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: DateTime)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/","title":"DurationIsoSerializer","text":"<p>//core/io.islandtime.serialization/DurationIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/#durationisoserializer","title":"DurationIsoSerializer","text":"<p>common</p> <p><code>object DurationIsoSerializer : KSerializer&lt;Duration&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): Duration</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: Duration)</code>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/DurationIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/DurationIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): Duration</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/DurationIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-duration-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: Duration)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/","title":"InstantIntervalIsoSerializer","text":"<p>//core/io.islandtime.serialization/InstantIntervalIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/#instantintervalisoserializer","title":"InstantIntervalIsoSerializer","text":"<p>common</p> <p><code>object InstantIntervalIsoSerializer : KSerializer&lt;InstantInterval&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): InstantInterval</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: InstantInterval)</code>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/InstantIntervalIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/InstantIntervalIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): InstantInterval</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/InstantIntervalIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-interval-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: InstantInterval)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/","title":"InstantIsoSerializer","text":"<p>//core/io.islandtime.serialization/InstantIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/#instantisoserializer","title":"InstantIsoSerializer","text":"<p>common</p> <p><code>object InstantIsoSerializer : KSerializer&lt;Instant&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): Instant</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: Instant)</code>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/InstantIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/InstantIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): Instant</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/InstantIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-instant-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: Instant)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/","title":"OffsetDateTimeIntervalIsoSerializer","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIntervalIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/#offsetdatetimeintervalisoserializer","title":"OffsetDateTimeIntervalIsoSerializer","text":"<p>common</p> <p><code>object OffsetDateTimeIntervalIsoSerializer : KSerializer&lt;OffsetDateTimeInterval&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): OffsetDateTimeInterval</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: OffsetDateTimeInterval)</code>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIntervalIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIntervalIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): OffsetDateTimeInterval</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIntervalIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-interval-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: OffsetDateTimeInterval)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/","title":"OffsetDateTimeIsoSerializer","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/#offsetdatetimeisoserializer","title":"OffsetDateTimeIsoSerializer","text":"<p>common</p> <p><code>object OffsetDateTimeIsoSerializer : KSerializer&lt;OffsetDateTime&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): OffsetDateTime</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: OffsetDateTime)</code>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): OffsetDateTime</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/OffsetDateTimeIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-date-time-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: OffsetDateTime)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/","title":"OffsetTimeIsoSerializer","text":"<p>//core/io.islandtime.serialization/OffsetTimeIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/#offsettimeisoserializer","title":"OffsetTimeIsoSerializer","text":"<p>common</p> <p><code>object OffsetTimeIsoSerializer : KSerializer&lt;OffsetTime&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): OffsetTime</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: OffsetTime)</code>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/OffsetTimeIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/OffsetTimeIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): OffsetTime</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/OffsetTimeIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-offset-time-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: OffsetTime)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/","title":"PeriodIsoSerializer","text":"<p>//core/io.islandtime.serialization/PeriodIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/#periodisoserializer","title":"PeriodIsoSerializer","text":"<p>common</p> <p><code>object PeriodIsoSerializer : KSerializer&lt;Period&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): Period</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: Period)</code>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/PeriodIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/PeriodIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): Period</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/PeriodIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-period-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: Period)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/","title":"TimeIsoSerializer","text":"<p>//core/io.islandtime.serialization/TimeIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/#timeisoserializer","title":"TimeIsoSerializer","text":"<p>common</p> <p><code>object TimeIsoSerializer : KSerializer&lt;Time&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): Time</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: Time)</code>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/TimeIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/TimeIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): Time</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/TimeIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: Time)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/","title":"TimeZoneSerializer","text":"<p>//core/io.islandtime.serialization/TimeZoneSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/#timezoneserializer","title":"TimeZoneSerializer","text":"<p>common</p> <p><code>object TimeZoneSerializer : KSerializer&lt;TimeZone&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): TimeZone</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: TimeZone)</code>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/TimeZoneSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/TimeZoneSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): TimeZone</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/TimeZoneSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-time-zone-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: TimeZone)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/","title":"UtcOffsetIsoSerializer","text":"<p>//core/io.islandtime.serialization/UtcOffsetIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/#utcoffsetisoserializer","title":"UtcOffsetIsoSerializer","text":"<p>common</p> <p><code>object UtcOffsetIsoSerializer : KSerializer&lt;UtcOffset&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): UtcOffset</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: UtcOffset)</code>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/UtcOffsetIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/UtcOffsetIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): UtcOffset</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/UtcOffsetIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-utc-offset-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: UtcOffset)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/","title":"YearIsoSerializer","text":"<p>//core/io.islandtime.serialization/YearIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/#yearisoserializer","title":"YearIsoSerializer","text":"<p>common</p> <p><code>object YearIsoSerializer : KSerializer&lt;Year&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): Year</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: Year)</code>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/YearIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/YearIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): Year</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/YearIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: Year)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/","title":"YearMonthIsoSerializer","text":"<p>//core/io.islandtime.serialization/YearMonthIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/#yearmonthisoserializer","title":"YearMonthIsoSerializer","text":"<p>common</p> <p><code>object YearMonthIsoSerializer : KSerializer&lt;YearMonth&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): YearMonth</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: YearMonth)</code>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/YearMonthIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/YearMonthIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): YearMonth</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/YearMonthIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-year-month-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: YearMonth)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/","title":"ZonedDateTimeIntervalIsoSerializer","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIntervalIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/#zoneddatetimeintervalisoserializer","title":"ZonedDateTimeIntervalIsoSerializer","text":"<p>common</p> <p><code>object ZonedDateTimeIntervalIsoSerializer : KSerializer&lt;ZonedDateTimeInterval&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): ZonedDateTimeInterval</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: ZonedDateTimeInterval)</code>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIntervalIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIntervalIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): ZonedDateTimeInterval</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIntervalIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-interval-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: ZonedDateTimeInterval)</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/","title":"ZonedDateTimeIsoSerializer","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIsoSerializer</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/#zoneddatetimeisoserializer","title":"ZonedDateTimeIsoSerializer","text":"<p>common</p> <p><code>object ZonedDateTimeIsoSerializer : KSerializer&lt;ZonedDateTime&gt; </code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/#properties","title":"Properties","text":"Name Summary descriptor <p>common</p><code>open override val descriptor: SerialDescriptor</code>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/#functions","title":"Functions","text":"Name Summary deserialize <p>common</p><code>open override fun deserialize(decoder: Decoder): ZonedDateTime</code> serialize <p>common</p><code>open override fun serialize(encoder: Encoder, value: ZonedDateTime)</code>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/descriptor/","title":"descriptor","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIsoSerializer/descriptor</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>common</p> <p><code>open override val descriptor: SerialDescriptor</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/deserialize/","title":"deserialize","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIsoSerializer/deserialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>common</p> <p><code>open override fun deserialize(decoder: Decoder): ZonedDateTime</code></p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/serialize/","title":"serialize","text":"<p>//core/io.islandtime.serialization/ZonedDateTimeIsoSerializer/serialize</p>"},{"location":"api/core/core/io.islandtime.serialization/-zoned-date-time-iso-serializer/serialize/#serialize","title":"serialize","text":"<p>common</p> <p><code>open override fun serialize(encoder: Encoder, value: ZonedDateTime)</code></p>"},{"location":"api/core/core/io.islandtime.zone/","title":"io.islandtime.zone","text":"<p>//core/io.islandtime.zone</p>"},{"location":"api/core/core/io.islandtime.zone/#package-level-declarations","title":"Package-level declarations","text":"<p>common darwin jvm</p> <p>Provides time zone database access.</p>"},{"location":"api/core/core/io.islandtime.zone/#types","title":"Types","text":"Name Summary PlatformTimeZoneRulesProvider <p>common</p><code>expect object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider</code>The default time zone rules provider implementation for the current platform.<p>darwin</p><code>actual object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider</code>A time zone rules provider that draws from the database included on Darwin platforms.<p>jvm</p><code>actual object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider</code>A time zone rules provider that draws from the database built into the java.time library. TimeZoneOffsetTransition <p>common</p><code>interface TimeZoneOffsetTransition</code>A discontinuity in the local timeline, usually caused by daylight savings time changes. TimeZoneRules <p>common</p><code>interface TimeZoneRules</code>The set of rules for a particular time zone. TimeZoneRulesException <p>common</p><code>class TimeZoneRulesException(message: String? = null, cause: Throwable? = null) : DateTimeException</code> TimeZoneRulesProvider <p>common</p><code>interface TimeZoneRulesProvider</code>An abstraction that allows time zone rules to be supplied from any data source."},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/","title":"PlatformTimeZoneRulesProvider","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/#platformtimezonerulesprovider","title":"PlatformTimeZoneRulesProvider","text":"<p>common</p> <p><code>expect object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider</code></p> <p>The default time zone rules provider implementation for the current platform.</p> <p>darwin</p> <p><code>actual object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider</code></p> <p>A time zone rules provider that draws from the database included on Darwin platforms.</p> <p>jvm</p> <p><code>actual object PlatformTimeZoneRulesProvider : TimeZoneRulesProvider</code></p> <p>A time zone rules provider that draws from the database built into the java.time library.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/#properties","title":"Properties","text":"Name Summary availableRegionIds <p>darwin jvm common</p><p>darwin</p><code>open override val availableRegionIds: Set&lt;String&gt;</code><p>jvm</p><code>open override val availableRegionIds: Set&lt;String&gt;</code><p>common</p><code>abstract val availableRegionIds: Set&lt;String&gt;</code>The available time zone region IDs as reported by the underlying provider. databaseVersion <p>darwin jvm common</p><p>darwin</p><code>open override val databaseVersion: String</code><p>jvm</p><code>open override val databaseVersion: String</code><p>common</p><code>open val databaseVersion: String</code>The time zone database version or an empty string if unavailable."},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/#functions","title":"Functions","text":"Name Summary hasRulesFor <p>darwin</p><code>open override fun hasRulesFor(regionId: String): Boolean</code>Checks if regionId has rules associated with it.<p>jvm</p><code>open override fun hasRulesFor(regionId: String): Boolean</code>Checks if regionId has rules associated with it.<p>common</p><code>abstract fun hasRulesFor(regionId: String): Boolean</code>Checks if regionId has rules associated with it. rulesFor <p>darwin jvm common</p><p>darwin</p><code>open override fun rulesFor(regionId: String): TimeZoneRules</code><p>jvm</p><code>open override fun rulesFor(regionId: String): TimeZoneRules</code><p>common</p><code>abstract fun rulesFor(regionId: String): TimeZoneRules</code>Gets the rules associated with a particular region ID."},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Davailable-region-ids/","title":"[darwin]available region ids","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[darwin]availableRegionIds</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Davailable-region-ids/#availableregionids","title":"availableRegionIds","text":"<p>darwin</p> <p><code>open override val availableRegionIds: Set&lt;String&gt;</code></p> <p>The available time zone region IDs as reported by the underlying provider.</p> <p>In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Davailable-region-ids/#see-also","title":"See also","text":"PlatformTimeZoneRulesProvider.hasRulesFor"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Ddatabase-version/","title":"[darwin]database version","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[darwin]databaseVersion</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Ddatabase-version/#databaseversion","title":"databaseVersion","text":"<p>darwin</p> <p><code>open override val databaseVersion: String</code></p> <p>The time zone database version or an empty string if unavailable.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Dhas-rules-for/","title":"[darwin]has rules for","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[darwin]hasRulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Dhas-rules-for/#hasrulesfor","title":"hasRulesFor","text":"<p>darwin</p> <p><code>open override fun hasRulesFor(regionId: String): Boolean</code></p> <p>Checks if regionId has rules associated with it.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Drules-for/","title":"[darwin]rules for","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[darwin]rulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Drules-for/#rulesfor","title":"rulesFor","text":"<p>darwin</p> <p><code>open override fun rulesFor(regionId: String): TimeZoneRules</code></p> <p>Gets the rules associated with a particular region ID.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bdarwin%5Drules-for/#throws","title":"Throws","text":"TimeZoneRulesException if the region ID isn't supported"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Davailable-region-ids/","title":"[jvm]available region ids","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[jvm]availableRegionIds</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Davailable-region-ids/#availableregionids","title":"availableRegionIds","text":"<p>jvm</p> <p><code>open override val availableRegionIds: Set&lt;String&gt;</code></p> <p>The available time zone region IDs as reported by the underlying provider.</p> <p>In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Davailable-region-ids/#see-also","title":"See also","text":"PlatformTimeZoneRulesProvider.hasRulesFor"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Ddatabase-version/","title":"[jvm]database version","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[jvm]databaseVersion</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Ddatabase-version/#databaseversion","title":"databaseVersion","text":"<p>jvm</p> <p><code>open override val databaseVersion: String</code></p> <p>The time zone database version or an empty string if unavailable.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Dhas-rules-for/","title":"[jvm]has rules for","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[jvm]hasRulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Dhas-rules-for/#hasrulesfor","title":"hasRulesFor","text":"<p>jvm</p> <p><code>open override fun hasRulesFor(regionId: String): Boolean</code></p> <p>Checks if regionId has rules associated with it.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Drules-for/","title":"[jvm]rules for","text":"<p>//core/io.islandtime.zone/PlatformTimeZoneRulesProvider/[jvm]rulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Drules-for/#rulesfor","title":"rulesFor","text":"<p>jvm</p> <p><code>open override fun rulesFor(regionId: String): TimeZoneRules</code></p> <p>Gets the rules associated with a particular region ID.</p>"},{"location":"api/core/core/io.islandtime.zone/-platform-time-zone-rules-provider/%5Bjvm%5Drules-for/#throws","title":"Throws","text":"TimeZoneRulesException if the region ID isn't supported"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/","title":"TimeZoneOffsetTransition","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/#timezoneoffsettransition","title":"TimeZoneOffsetTransition","text":"<p>common</p> <p><code>interface TimeZoneOffsetTransition</code></p> <p>A discontinuity in the local timeline, usually caused by daylight savings time changes.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/#properties","title":"Properties","text":"Name Summary dateTimeAfter <p>common</p><code>abstract val dateTimeAfter: DateTime</code>The date and time of day at the end of the transition. dateTimeBefore <p>common</p><code>abstract val dateTimeBefore: DateTime</code>The date and time of day at the start of the transition. duration <p>common</p><code>abstract val duration: Seconds</code>The duration of the transition period in seconds. isGap <p>common</p><code>abstract val isGap: Boolean</code>Checks if this is a gap, meaning that there are clock times that go \"missing\". isOverlap <p>common</p><code>abstract val isOverlap: Boolean</code>Checks if this is an overlap, meaning that there are clock times that exist twice. offsetAfter <p>common</p><code>abstract val offsetAfter: UtcOffset</code>The UTC offset after the transition. offsetBefore <p>common</p><code>abstract val offsetBefore: UtcOffset</code>The UTC offset before the transition. validOffsets <p>common</p><code>open val validOffsets: List&lt;UtcOffset&gt;</code>Gets a list of the valid offsets during this transition. If this is gap, the list will be empty. If this is an overlap, the list will contain both the earlier and later offsets."},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/date-time-after/","title":"dateTimeAfter","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/dateTimeAfter</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/date-time-after/#datetimeafter","title":"dateTimeAfter","text":"<p>common</p> <p><code>abstract val dateTimeAfter: DateTime</code></p> <p>The date and time of day at the end of the transition.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/date-time-before/","title":"dateTimeBefore","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/dateTimeBefore</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/date-time-before/#datetimebefore","title":"dateTimeBefore","text":"<p>common</p> <p><code>abstract val dateTimeBefore: DateTime</code></p> <p>The date and time of day at the start of the transition.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/duration/","title":"duration","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/duration</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/duration/#duration","title":"duration","text":"<p>common</p> <p><code>abstract val duration: Seconds</code></p> <p>The duration of the transition period in seconds.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/is-gap/","title":"isGap","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/isGap</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/is-gap/#isgap","title":"isGap","text":"<p>common</p> <p><code>abstract val isGap: Boolean</code></p> <p>Checks if this is a gap, meaning that there are clock times that go \"missing\".</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/is-overlap/","title":"isOverlap","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/isOverlap</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/is-overlap/#isoverlap","title":"isOverlap","text":"<p>common</p> <p><code>abstract val isOverlap: Boolean</code></p> <p>Checks if this is an overlap, meaning that there are clock times that exist twice.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/offset-after/","title":"offsetAfter","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/offsetAfter</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/offset-after/#offsetafter","title":"offsetAfter","text":"<p>common</p> <p><code>abstract val offsetAfter: UtcOffset</code></p> <p>The UTC offset after the transition.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/offset-before/","title":"offsetBefore","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/offsetBefore</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/offset-before/#offsetbefore","title":"offsetBefore","text":"<p>common</p> <p><code>abstract val offsetBefore: UtcOffset</code></p> <p>The UTC offset before the transition.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/valid-offsets/","title":"validOffsets","text":"<p>//core/io.islandtime.zone/TimeZoneOffsetTransition/validOffsets</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-offset-transition/valid-offsets/#validoffsets","title":"validOffsets","text":"<p>common</p> <p><code>open val validOffsets: List&lt;UtcOffset&gt;</code></p> <p>Gets a list of the valid offsets during this transition. If this is gap, the list will be empty. If this is an overlap, the list will contain both the earlier and later offsets.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/","title":"TimeZoneRules","text":"<p>//core/io.islandtime.zone/TimeZoneRules</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/#timezonerules","title":"TimeZoneRules","text":"<p>common</p> <p><code>interface TimeZoneRules</code></p> <p>The set of rules for a particular time zone.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/#properties","title":"Properties","text":"Name Summary hasFixedOffset <p>common</p><code>abstract val hasFixedOffset: Boolean</code>Checks if the time zone has a fixed offset from UTC."},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/#functions","title":"Functions","text":"Name Summary daylightSavingsAt <p>common</p><code>abstract fun daylightSavingsAt(instant: Instant): Seconds</code>Gets the amount of daylight savings time in effect at a particular instant. This is the amount of time added to the standard offset. isDaylightSavingsAt <p>common</p><code>abstract fun isDaylightSavingsAt(instant: Instant): Boolean</code>Checks if daylight savings time is in effect at a particular instant. isValidOffset <p>common</p><code>open fun isValidOffset(dateTime: DateTime, offset: UtcOffset): Boolean</code>Checks if offset is valid at particular date and time. offsetAt <p>common</p><code>abstract fun offsetAt(dateTime: DateTime): UtcOffset</code>Gets the offset in effect at a particular date and time.<p>common</p><code>abstract fun offsetAt(instant: Instant): UtcOffset</code><code>abstract fun offsetAt(instant: PlatformInstant): UtcOffset</code>Gets the offset in effect at a particular instant.<p>common</p><code>abstract fun offsetAt(millisecondsSinceUnixEpoch: Milliseconds): UtcOffset</code>Gets the offset in effect at a certain number of milliseconds since the Unix epoch.<p>common</p><code>abstract fun offsetAt(secondsSinceUnixEpoch: Seconds, nanoOfSeconds: Nanoseconds): UtcOffset</code>Gets the offset in effect at a certain number of seconds since the Unix epoch. transitionAt <p>common</p><code>abstract fun transitionAt(dateTime: DateTime): TimeZoneOffsetTransition?</code>Gets the transition at a particular date and time, if one exists. validOffsetsAt <p>common</p><code>abstract fun validOffsetsAt(dateTime: DateTime): List&lt;UtcOffset&gt;</code>Gets a list of the valid offsets at a particular date and time."},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/daylight-savings-at/","title":"daylightSavingsAt","text":"<p>//core/io.islandtime.zone/TimeZoneRules/daylightSavingsAt</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/daylight-savings-at/#daylightsavingsat","title":"daylightSavingsAt","text":"<p>common</p> <p><code>abstract fun daylightSavingsAt(instant: Instant): Seconds</code></p> <p>Gets the amount of daylight savings time in effect at a particular instant. This is the amount of time added to the standard offset.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/has-fixed-offset/","title":"hasFixedOffset","text":"<p>//core/io.islandtime.zone/TimeZoneRules/hasFixedOffset</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/has-fixed-offset/#hasfixedoffset","title":"hasFixedOffset","text":"<p>common</p> <p><code>abstract val hasFixedOffset: Boolean</code></p> <p>Checks if the time zone has a fixed offset from UTC.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/is-daylight-savings-at/","title":"isDaylightSavingsAt","text":"<p>//core/io.islandtime.zone/TimeZoneRules/isDaylightSavingsAt</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/is-daylight-savings-at/#isdaylightsavingsat","title":"isDaylightSavingsAt","text":"<p>common</p> <p><code>abstract fun isDaylightSavingsAt(instant: Instant): Boolean</code></p> <p>Checks if daylight savings time is in effect at a particular instant.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/is-valid-offset/","title":"isValidOffset","text":"<p>//core/io.islandtime.zone/TimeZoneRules/isValidOffset</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/is-valid-offset/#isvalidoffset","title":"isValidOffset","text":"<p>common</p> <p><code>open fun isValidOffset(dateTime: DateTime, offset: UtcOffset): Boolean</code></p> <p>Checks if offset is valid at particular date and time.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/offset-at/","title":"offsetAt","text":"<p>//core/io.islandtime.zone/TimeZoneRules/offsetAt</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/offset-at/#offsetat","title":"offsetAt","text":"<p>common</p> <p><code>abstract fun offsetAt(millisecondsSinceUnixEpoch: Milliseconds): UtcOffset</code></p> <p>Gets the offset in effect at a certain number of milliseconds since the Unix epoch.</p> <p>common</p> <p><code>abstract fun offsetAt(secondsSinceUnixEpoch: Seconds, nanoOfSeconds: Nanoseconds): UtcOffset</code></p> <p>Gets the offset in effect at a certain number of seconds since the Unix epoch.</p> <p>common</p> <p><code>abstract fun offsetAt(instant: Instant): UtcOffset</code></p> <p><code>abstract fun offsetAt(instant: PlatformInstant): UtcOffset</code></p> <p>Gets the offset in effect at a particular instant.</p> <p>common</p> <p><code>abstract fun offsetAt(dateTime: DateTime): UtcOffset</code></p> <p>Gets the offset in effect at a particular date and time.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/transition-at/","title":"transitionAt","text":"<p>//core/io.islandtime.zone/TimeZoneRules/transitionAt</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/transition-at/#transitionat","title":"transitionAt","text":"<p>common</p> <p><code>abstract fun transitionAt(dateTime: DateTime): TimeZoneOffsetTransition?</code></p> <p>Gets the transition at a particular date and time, if one exists.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/valid-offsets-at/","title":"validOffsetsAt","text":"<p>//core/io.islandtime.zone/TimeZoneRules/validOffsetsAt</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules/valid-offsets-at/#validoffsetsat","title":"validOffsetsAt","text":"<p>common</p> <p><code>abstract fun validOffsetsAt(dateTime: DateTime): List&lt;UtcOffset&gt;</code></p> <p>Gets a list of the valid offsets at a particular date and time.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-exception/","title":"TimeZoneRulesException","text":"<p>//core/io.islandtime.zone/TimeZoneRulesException</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-exception/#timezonerulesexception","title":"TimeZoneRulesException","text":"<p>common</p> <p><code>class TimeZoneRulesException(message: String? = null, cause: Throwable? = null) : DateTimeException</code></p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-exception/#constructors","title":"Constructors","text":"TimeZoneRulesException <p>common</p><code>constructor(message: String? = null, cause: Throwable? = null)</code>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-exception/#properties","title":"Properties","text":"Name Summary cause <p>common</p><code>open val cause: Throwable?</code> message <p>common</p><code>open val message: String?</code>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-exception/-time-zone-rules-exception/","title":"TimeZoneRulesException","text":"<p>//core/io.islandtime.zone/TimeZoneRulesException/TimeZoneRulesException</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-exception/-time-zone-rules-exception/#timezonerulesexception","title":"TimeZoneRulesException","text":"<p>common</p> <p><code>constructor(message: String? = null, cause: Throwable? = null)</code></p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/","title":"TimeZoneRulesProvider","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/#timezonerulesprovider","title":"TimeZoneRulesProvider","text":"<p><code>interface TimeZoneRulesProvider</code></p> <p>An abstraction that allows time zone rules to be supplied from any data source.</p> <p>The set of supported identifiers is expected to vary depending on the source, but should typically represent regions defined in the IANA Time Zone Database.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/#inheritors","title":"Inheritors","text":"Companion PlatformTimeZoneRulesProvider"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/#types","title":"Types","text":"Name Summary Companion <p>common</p><code>object Companion : TimeZoneRulesProvider</code>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/#properties","title":"Properties","text":"Name Summary availableRegionIds <p>common</p><code>abstract val availableRegionIds: Set&lt;String&gt;</code>The available time zone region IDs as reported by the underlying provider. databaseVersion <p>common</p><code>open val databaseVersion: String</code>The time zone database version or an empty string if unavailable."},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/#functions","title":"Functions","text":"Name Summary hasRulesFor <p>common</p><code>abstract fun hasRulesFor(regionId: String): Boolean</code>Checks if regionId has rules associated with it. rulesFor <p>common</p><code>abstract fun rulesFor(regionId: String): TimeZoneRules</code>Gets the rules associated with a particular region ID."},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/available-region-ids/","title":"availableRegionIds","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/availableRegionIds</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/available-region-ids/#availableregionids","title":"availableRegionIds","text":"<p>common</p> <p><code>abstract val availableRegionIds: Set&lt;String&gt;</code></p> <p>The available time zone region IDs as reported by the underlying provider.</p> <p>In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/available-region-ids/#see-also","title":"See also","text":"TimeZoneRulesProvider.hasRulesFor"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/database-version/","title":"databaseVersion","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/databaseVersion</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/database-version/#databaseversion","title":"databaseVersion","text":"<p>common</p> <p><code>open val databaseVersion: String</code></p> <p>The time zone database version or an empty string if unavailable.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/has-rules-for/","title":"hasRulesFor","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/hasRulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/has-rules-for/#hasrulesfor","title":"hasRulesFor","text":"<p>common</p> <p><code>abstract fun hasRulesFor(regionId: String): Boolean</code></p> <p>Checks if regionId has rules associated with it.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/rules-for/","title":"rulesFor","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/rulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/rules-for/#rulesfor","title":"rulesFor","text":"<p>common</p> <p><code>abstract fun rulesFor(regionId: String): TimeZoneRules</code></p> <p>Gets the rules associated with a particular region ID.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/rules-for/#throws","title":"Throws","text":"TimeZoneRulesException if the region ID isn't supported"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/","title":"Companion","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/Companion</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/#companion","title":"Companion","text":"<p>common</p> <p><code>object Companion : TimeZoneRulesProvider</code></p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/#properties","title":"Properties","text":"Name Summary availableRegionIds <p>common</p><code>open override val availableRegionIds: Set&lt;String&gt;</code>The available time zone region IDs as reported by the underlying provider. databaseVersion <p>common</p><code>open override val databaseVersion: String</code>The time zone database version or an empty string if unavailable."},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/#functions","title":"Functions","text":"Name Summary hasRulesFor <p>common</p><code>open override fun hasRulesFor(regionId: String): Boolean</code>Checks if regionId has rules associated with it. rulesFor <p>common</p><code>open override fun rulesFor(regionId: String): TimeZoneRules</code>Gets the rules associated with a particular region ID."},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/available-region-ids/","title":"availableRegionIds","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/Companion/availableRegionIds</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/available-region-ids/#availableregionids","title":"availableRegionIds","text":"<p>common</p> <p><code>open override val availableRegionIds: Set&lt;String&gt;</code></p> <p>The available time zone region IDs as reported by the underlying provider.</p> <p>In some cases, this may be only a subset of those actually supported. To check if a particular region ID can be handled, use hasRulesFor.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/available-region-ids/#see-also","title":"See also","text":"TimeZoneRulesProvider.Companion.hasRulesFor"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/database-version/","title":"databaseVersion","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/Companion/databaseVersion</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/database-version/#databaseversion","title":"databaseVersion","text":"<p>common</p> <p><code>open override val databaseVersion: String</code></p> <p>The time zone database version or an empty string if unavailable.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/has-rules-for/","title":"hasRulesFor","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/Companion/hasRulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/has-rules-for/#hasrulesfor","title":"hasRulesFor","text":"<p>common</p> <p><code>open override fun hasRulesFor(regionId: String): Boolean</code></p> <p>Checks if regionId has rules associated with it.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/rules-for/","title":"rulesFor","text":"<p>//core/io.islandtime.zone/TimeZoneRulesProvider/Companion/rulesFor</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/rules-for/#rulesfor","title":"rulesFor","text":"<p>common</p> <p><code>open override fun rulesFor(regionId: String): TimeZoneRules</code></p> <p>Gets the rules associated with a particular region ID.</p>"},{"location":"api/core/core/io.islandtime.zone/-time-zone-rules-provider/-companion/rules-for/#throws","title":"Throws","text":"TimeZoneRulesException if the region ID isn't supported"},{"location":"api/extensions/parcelize/","title":"parcelize-extensions","text":"<p>//parcelize-extensions</p>"},{"location":"api/extensions/parcelize/#parcelize-extensions","title":"parcelize-extensions","text":"<p>androidJvm</p> <p>Parcelers for use with the <code>@Parcelize</code> feature in the Kotlin Android Extensions.</p>"},{"location":"api/extensions/parcelize/#packages","title":"Packages","text":"Name Summary io.islandtime.parcelize"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/","title":"io.islandtime.parcelize","text":"<p>//parcelize-extensions/io.islandtime.parcelize</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/#types","title":"Types","text":"Name Summary DateParceler <p>androidJvm</p><code>object DateParceler : Parceler&lt;Date&gt; </code> DateRangeParceler <p>androidJvm</p><code>object DateRangeParceler : Parceler&lt;DateRange&gt; </code> DateTimeIntervalParceler <p>androidJvm</p><code>object DateTimeIntervalParceler : Parceler&lt;DateTimeInterval&gt; </code> DateTimeParceler <p>androidJvm</p><code>object DateTimeParceler : Parceler&lt;DateTime&gt; </code> DurationParceler <p>androidJvm</p><code>object DurationParceler : Parceler&lt;Duration&gt; </code> InstantIntervalParceler <p>androidJvm</p><code>object InstantIntervalParceler : Parceler&lt;InstantInterval&gt; </code> InstantParceler <p>androidJvm</p><code>object InstantParceler : Parceler&lt;Instant&gt; </code> NullableDateParceler <p>androidJvm</p><code>object NullableDateParceler : Parceler&lt;Date?&gt; </code> NullableDateTimeParceler <p>androidJvm</p><code>object NullableDateTimeParceler : Parceler&lt;DateTime?&gt; </code> NullableDurationParceler <p>androidJvm</p><code>object NullableDurationParceler : Parceler&lt;Duration?&gt; </code> NullableInstantParceler <p>androidJvm</p><code>object NullableInstantParceler : Parceler&lt;Instant?&gt; </code> NullableOffsetDateTimeParceler <p>androidJvm</p><code>object NullableOffsetDateTimeParceler : Parceler&lt;OffsetDateTime?&gt; </code> NullableOffsetTimeParceler <p>androidJvm</p><code>object NullableOffsetTimeParceler : Parceler&lt;OffsetTime?&gt; </code> NullablePeriodParceler <p>androidJvm</p><code>object NullablePeriodParceler : Parceler&lt;Period?&gt; </code> NullableTimeParceler <p>androidJvm</p><code>object NullableTimeParceler : Parceler&lt;Time?&gt; </code> NullableTimeZoneParceler <p>androidJvm</p><code>object NullableTimeZoneParceler : Parceler&lt;TimeZone?&gt; </code> NullableYearMonthParceler <p>androidJvm</p><code>object NullableYearMonthParceler : Parceler&lt;YearMonth?&gt; </code> NullableZonedDateTimeParceler <p>androidJvm</p><code>object NullableZonedDateTimeParceler : Parceler&lt;ZonedDateTime?&gt; </code> OffsetDateTimeIntervalParceler <p>androidJvm</p><code>object OffsetDateTimeIntervalParceler : Parceler&lt;OffsetDateTimeInterval&gt; </code> OffsetDateTimeParceler <p>androidJvm</p><code>object OffsetDateTimeParceler : Parceler&lt;OffsetDateTime&gt; </code> OffsetTimeParceler <p>androidJvm</p><code>object OffsetTimeParceler : Parceler&lt;OffsetTime&gt; </code> PeriodParceler <p>androidJvm</p><code>object PeriodParceler : Parceler&lt;Period&gt; </code> TimeParceler <p>androidJvm</p><code>object TimeParceler : Parceler&lt;Time&gt; </code> TimeZoneParceler <p>androidJvm</p><code>object TimeZoneParceler : Parceler&lt;TimeZone&gt; </code> YearMonthParceler <p>androidJvm</p><code>object YearMonthParceler : Parceler&lt;YearMonth&gt; </code> ZonedDateTimeIntervalParceler <p>androidJvm</p><code>object ZonedDateTimeIntervalParceler : Parceler&lt;ZonedDateTimeInterval&gt; </code> ZonedDateTimeParceler <p>androidJvm</p><code>object ZonedDateTimeParceler : Parceler&lt;ZonedDateTime&gt; </code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-parceler/","title":"DateParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-parceler/#dateparceler","title":"DateParceler","text":"<p>androidJvm</p> <p><code>object DateParceler : Parceler&lt;Date&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Date</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Date&gt;</code> write <p>androidJvm</p><code>open override fun Date.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Date</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Date.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-range-parceler/","title":"DateRangeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateRangeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-range-parceler/#daterangeparceler","title":"DateRangeParceler","text":"<p>androidJvm</p> <p><code>object DateRangeParceler : Parceler&lt;DateRange&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-range-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): DateRange</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;DateRange&gt;</code> write <p>androidJvm</p><code>open override fun DateRange.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-range-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateRangeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-range-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): DateRange</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-range-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateRangeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-range-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun DateRange.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-interval-parceler/","title":"DateTimeIntervalParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateTimeIntervalParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-interval-parceler/#datetimeintervalparceler","title":"DateTimeIntervalParceler","text":"<p>androidJvm</p> <p><code>object DateTimeIntervalParceler : Parceler&lt;DateTimeInterval&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-interval-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): DateTimeInterval</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;DateTimeInterval&gt;</code> write <p>androidJvm</p><code>open override fun DateTimeInterval.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-interval-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateTimeIntervalParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-interval-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): DateTimeInterval</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-interval-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateTimeIntervalParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-interval-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun DateTimeInterval.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-parceler/","title":"DateTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-parceler/#datetimeparceler","title":"DateTimeParceler","text":"<p>androidJvm</p> <p><code>object DateTimeParceler : Parceler&lt;DateTime&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): DateTime</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;DateTime&gt;</code> write <p>androidJvm</p><code>open override fun DateTime.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): DateTime</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DateTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-date-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun DateTime.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-duration-parceler/","title":"DurationParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DurationParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-duration-parceler/#durationparceler","title":"DurationParceler","text":"<p>androidJvm</p> <p><code>object DurationParceler : Parceler&lt;Duration&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-duration-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Duration</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Duration&gt;</code> write <p>androidJvm</p><code>open override fun Duration.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-duration-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DurationParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-duration-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Duration</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-duration-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/DurationParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-duration-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Duration.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-interval-parceler/","title":"InstantIntervalParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/InstantIntervalParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-interval-parceler/#instantintervalparceler","title":"InstantIntervalParceler","text":"<p>androidJvm</p> <p><code>object InstantIntervalParceler : Parceler&lt;InstantInterval&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-interval-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): InstantInterval</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;InstantInterval&gt;</code> write <p>androidJvm</p><code>open override fun InstantInterval.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-interval-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/InstantIntervalParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-interval-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): InstantInterval</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-interval-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/InstantIntervalParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-interval-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun InstantInterval.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-parceler/","title":"InstantParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/InstantParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-parceler/#instantparceler","title":"InstantParceler","text":"<p>androidJvm</p> <p><code>object InstantParceler : Parceler&lt;Instant&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Instant</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Instant&gt;</code> write <p>androidJvm</p><code>open override fun Instant.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/InstantParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Instant</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/InstantParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-instant-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Instant.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-parceler/","title":"NullableDateParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDateParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-parceler/#nullabledateparceler","title":"NullableDateParceler","text":"<p>androidJvm</p> <p><code>object NullableDateParceler : Parceler&lt;Date?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Date?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Date?&gt;</code> write <p>androidJvm</p><code>open override fun Date?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDateParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Date?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDateParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Date?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-time-parceler/","title":"NullableDateTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDateTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-time-parceler/#nullabledatetimeparceler","title":"NullableDateTimeParceler","text":"<p>androidJvm</p> <p><code>object NullableDateTimeParceler : Parceler&lt;DateTime?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): DateTime?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;DateTime?&gt;</code> write <p>androidJvm</p><code>open override fun DateTime?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDateTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): DateTime?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDateTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-date-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun DateTime?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-duration-parceler/","title":"NullableDurationParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDurationParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-duration-parceler/#nullabledurationparceler","title":"NullableDurationParceler","text":"<p>androidJvm</p> <p><code>object NullableDurationParceler : Parceler&lt;Duration?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-duration-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Duration?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Duration?&gt;</code> write <p>androidJvm</p><code>open override fun Duration?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-duration-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDurationParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-duration-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Duration?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-duration-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableDurationParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-duration-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Duration?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-instant-parceler/","title":"NullableInstantParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableInstantParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-instant-parceler/#nullableinstantparceler","title":"NullableInstantParceler","text":"<p>androidJvm</p> <p><code>object NullableInstantParceler : Parceler&lt;Instant?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-instant-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Instant?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Instant?&gt;</code> write <p>androidJvm</p><code>open override fun Instant?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-instant-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableInstantParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-instant-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Instant?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-instant-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableInstantParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-instant-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Instant?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-date-time-parceler/","title":"NullableOffsetDateTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableOffsetDateTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-date-time-parceler/#nullableoffsetdatetimeparceler","title":"NullableOffsetDateTimeParceler","text":"<p>androidJvm</p> <p><code>object NullableOffsetDateTimeParceler : Parceler&lt;OffsetDateTime?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-date-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): OffsetDateTime?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;OffsetDateTime?&gt;</code> write <p>androidJvm</p><code>open override fun OffsetDateTime?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-date-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableOffsetDateTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-date-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): OffsetDateTime?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-date-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableOffsetDateTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-date-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun OffsetDateTime?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-time-parceler/","title":"NullableOffsetTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableOffsetTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-time-parceler/#nullableoffsettimeparceler","title":"NullableOffsetTimeParceler","text":"<p>androidJvm</p> <p><code>object NullableOffsetTimeParceler : Parceler&lt;OffsetTime?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): OffsetTime?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;OffsetTime?&gt;</code> write <p>androidJvm</p><code>open override fun OffsetTime?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableOffsetTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): OffsetTime?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableOffsetTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-offset-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun OffsetTime?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-period-parceler/","title":"NullablePeriodParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullablePeriodParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-period-parceler/#nullableperiodparceler","title":"NullablePeriodParceler","text":"<p>androidJvm</p> <p><code>object NullablePeriodParceler : Parceler&lt;Period?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-period-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Period?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Period?&gt;</code> write <p>androidJvm</p><code>open override fun Period?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-period-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullablePeriodParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-period-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Period?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-period-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullablePeriodParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-period-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Period?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-parceler/","title":"NullableTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-parceler/#nullabletimeparceler","title":"NullableTimeParceler","text":"<p>androidJvm</p> <p><code>object NullableTimeParceler : Parceler&lt;Time?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Time?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Time?&gt;</code> write <p>androidJvm</p><code>open override fun Time?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Time?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Time?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-zone-parceler/","title":"NullableTimeZoneParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableTimeZoneParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-zone-parceler/#nullabletimezoneparceler","title":"NullableTimeZoneParceler","text":"<p>androidJvm</p> <p><code>object NullableTimeZoneParceler : Parceler&lt;TimeZone?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-zone-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): TimeZone?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;TimeZone?&gt;</code> write <p>androidJvm</p><code>open override fun TimeZone?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-zone-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableTimeZoneParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-zone-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): TimeZone?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-zone-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableTimeZoneParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-time-zone-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun TimeZone?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-year-month-parceler/","title":"NullableYearMonthParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableYearMonthParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-year-month-parceler/#nullableyearmonthparceler","title":"NullableYearMonthParceler","text":"<p>androidJvm</p> <p><code>object NullableYearMonthParceler : Parceler&lt;YearMonth?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-year-month-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): YearMonth?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;YearMonth?&gt;</code> write <p>androidJvm</p><code>open override fun YearMonth?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-year-month-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableYearMonthParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-year-month-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): YearMonth?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-year-month-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableYearMonthParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-year-month-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun YearMonth?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-zoned-date-time-parceler/","title":"NullableZonedDateTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableZonedDateTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-zoned-date-time-parceler/#nullablezoneddatetimeparceler","title":"NullableZonedDateTimeParceler","text":"<p>androidJvm</p> <p><code>object NullableZonedDateTimeParceler : Parceler&lt;ZonedDateTime?&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-zoned-date-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): ZonedDateTime?</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;ZonedDateTime?&gt;</code> write <p>androidJvm</p><code>open override fun ZonedDateTime?.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-zoned-date-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableZonedDateTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-zoned-date-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): ZonedDateTime?</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-zoned-date-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/NullableZonedDateTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-nullable-zoned-date-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun ZonedDateTime?.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-interval-parceler/","title":"OffsetDateTimeIntervalParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetDateTimeIntervalParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-interval-parceler/#offsetdatetimeintervalparceler","title":"OffsetDateTimeIntervalParceler","text":"<p>androidJvm</p> <p><code>object OffsetDateTimeIntervalParceler : Parceler&lt;OffsetDateTimeInterval&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-interval-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): OffsetDateTimeInterval</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;OffsetDateTimeInterval&gt;</code> write <p>androidJvm</p><code>open override fun OffsetDateTimeInterval.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-interval-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetDateTimeIntervalParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-interval-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): OffsetDateTimeInterval</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-interval-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetDateTimeIntervalParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-interval-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun OffsetDateTimeInterval.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-parceler/","title":"OffsetDateTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetDateTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-parceler/#offsetdatetimeparceler","title":"OffsetDateTimeParceler","text":"<p>androidJvm</p> <p><code>object OffsetDateTimeParceler : Parceler&lt;OffsetDateTime&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): OffsetDateTime</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;OffsetDateTime&gt;</code> write <p>androidJvm</p><code>open override fun OffsetDateTime.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetDateTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): OffsetDateTime</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetDateTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-date-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun OffsetDateTime.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-time-parceler/","title":"OffsetTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-time-parceler/#offsettimeparceler","title":"OffsetTimeParceler","text":"<p>androidJvm</p> <p><code>object OffsetTimeParceler : Parceler&lt;OffsetTime&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): OffsetTime</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;OffsetTime&gt;</code> write <p>androidJvm</p><code>open override fun OffsetTime.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): OffsetTime</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/OffsetTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-offset-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun OffsetTime.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-period-parceler/","title":"PeriodParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/PeriodParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-period-parceler/#periodparceler","title":"PeriodParceler","text":"<p>androidJvm</p> <p><code>object PeriodParceler : Parceler&lt;Period&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-period-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Period</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Period&gt;</code> write <p>androidJvm</p><code>open override fun Period.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-period-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/PeriodParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-period-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Period</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-period-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/PeriodParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-period-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Period.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-parceler/","title":"TimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/TimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-parceler/#timeparceler","title":"TimeParceler","text":"<p>androidJvm</p> <p><code>object TimeParceler : Parceler&lt;Time&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): Time</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;Time&gt;</code> write <p>androidJvm</p><code>open override fun Time.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/TimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): Time</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/TimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun Time.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-zone-parceler/","title":"TimeZoneParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/TimeZoneParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-zone-parceler/#timezoneparceler","title":"TimeZoneParceler","text":"<p>androidJvm</p> <p><code>object TimeZoneParceler : Parceler&lt;TimeZone&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-zone-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): TimeZone</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;TimeZone&gt;</code> write <p>androidJvm</p><code>open override fun TimeZone.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-zone-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/TimeZoneParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-zone-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): TimeZone</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-zone-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/TimeZoneParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-time-zone-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun TimeZone.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-year-month-parceler/","title":"YearMonthParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/YearMonthParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-year-month-parceler/#yearmonthparceler","title":"YearMonthParceler","text":"<p>androidJvm</p> <p><code>object YearMonthParceler : Parceler&lt;YearMonth&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-year-month-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): YearMonth</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;YearMonth&gt;</code> write <p>androidJvm</p><code>open override fun YearMonth.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-year-month-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/YearMonthParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-year-month-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): YearMonth</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-year-month-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/YearMonthParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-year-month-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun YearMonth.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-interval-parceler/","title":"ZonedDateTimeIntervalParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/ZonedDateTimeIntervalParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-interval-parceler/#zoneddatetimeintervalparceler","title":"ZonedDateTimeIntervalParceler","text":"<p>androidJvm</p> <p><code>object ZonedDateTimeIntervalParceler : Parceler&lt;ZonedDateTimeInterval&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-interval-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): ZonedDateTimeInterval</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;ZonedDateTimeInterval&gt;</code> write <p>androidJvm</p><code>open override fun ZonedDateTimeInterval.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-interval-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/ZonedDateTimeIntervalParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-interval-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): ZonedDateTimeInterval</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-interval-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/ZonedDateTimeIntervalParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-interval-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun ZonedDateTimeInterval.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-parceler/","title":"ZonedDateTimeParceler","text":"<p>//parcelize-extensions/io.islandtime.parcelize/ZonedDateTimeParceler</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-parceler/#zoneddatetimeparceler","title":"ZonedDateTimeParceler","text":"<p>androidJvm</p> <p><code>object ZonedDateTimeParceler : Parceler&lt;ZonedDateTime&gt; </code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-parceler/#functions","title":"Functions","text":"Name Summary create <p>androidJvm</p><code>open override fun create(parcel: Parcel): ZonedDateTime</code> newArray <p>androidJvm</p><code>open fun newArray(size: Int): Array&lt;ZonedDateTime&gt;</code> write <p>androidJvm</p><code>open override fun ZonedDateTime.write(parcel: Parcel, flags: Int)</code>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-parceler/create/","title":"create","text":"<p>//parcelize-extensions/io.islandtime.parcelize/ZonedDateTimeParceler/create</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-parceler/create/#create","title":"create","text":"<p>androidJvm</p> <p><code>open override fun create(parcel: Parcel): ZonedDateTime</code></p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-parceler/write/","title":"write","text":"<p>//parcelize-extensions/io.islandtime.parcelize/ZonedDateTimeParceler/write</p>"},{"location":"api/extensions/parcelize/parcelize-extensions/io.islandtime.parcelize/-zoned-date-time-parceler/write/#write","title":"write","text":"<p>androidJvm</p> <p><code>open override fun ZonedDateTime.write(parcel: Parcel, flags: Int)</code></p>"},{"location":"basics/clocks/","title":"Clocks","text":"<p>Island Time's <code>Clock</code> interface abstracts access to the current time, easing testing and opening up a number of other possibilities, such as offsetting the current time or modifying the precision.</p> <p>So while it's possible to retrieve the current system time like this:</p> <pre><code>val now = ZonedDateTime.now()\n</code></pre> <p>... It's generally better practice to supply a <code>Clock</code> explicitly \u2014 ideally, via dependency injection.</p> <pre><code>val clock: Clock = SystemClock()\nval now = ZonedDateTime.now(clock)\n</code></pre> <p>Two implementations are provided out of the box \u2014 <code>SystemClock</code>, which accesses the current system time, and <code>FixedClock</code>, which returns a fixed time that can be controlled, making it well-suited for testing.</p>"},{"location":"basics/clocks/#time-zones","title":"Time Zones","text":"<p>Each <code>Clock</code> has a time zone associated with it. The implementations included in Island Time treat it as an immutable property, requiring you to create a new clock if you wish to change it. Depending on the needs of your application, you may choose to respond to time zone change notifications generated by the system to do that.</p>"},{"location":"basics/clocks/#system-clock-precision","title":"System Clock Precision","text":"<p>Island Time's <code>SystemClock</code> provides the highest precision time available on each platform. In practice, that usually looks like this:</p> Platform Precision Java 8 millisecond Java 9+ microsecond Android millisecond Apple microsecond"},{"location":"basics/clocks/#writing-tests-with-fixedclock","title":"Writing Tests with <code>FixedClock</code>","text":"<p>The following example shows how <code>FixedClock</code> can be used to add predictability when testing time-sensitive code.</p> <p>Let's assume we have a class called <code>ClassUnderTest</code>.</p> <pre><code>class ClassUnderTest(private val clock: Clock) {\n    val createdAt: Instant = Instant.now(clock)\n\n    var lastModified: Instant = createdAt\n        private set\n\n    // ...\n\n    fun performAction() {\n        // Do something\n        lastModified = Instant.now(clock)\n    }\n}\n</code></pre> <p>And now to test it...</p> <pre><code>@Test\nfun testClassUnderTest() {\n    val clock = FixedClock(\"2020-08-25T04:30Z\".toInstant(), TimeZone.UTC)\n\n    val classUnderTest = ClassUnderTest(clock)\n\n    // Now, let's increment the clock by an hour\n    clock += 1.hours\n\n    classUnderTest.performAction()\n\n    assertEquals(\"2020-08-25T04:30Z\".toInstant(), classUnderTest.createdAt)\n    assertEquals(\"2020-08-25T05:30Z\".toInstant(), classUnderTest.lastModified)\n}\n</code></pre>"},{"location":"basics/clocks/#using-a-javatimeclock","title":"Using a <code>java.time.Clock</code>","text":"<p>On the JVM, it's possible to use a java.time <code>Clock</code> instead of an Island Time <code>Clock</code> when calling any of the <code>now()</code> functions.</p> <pre><code>val javaClock = java.time.Clock.system()\nval today = Date.now(javaClock)\n</code></pre> <p>You can also take an existing Java <code>Clock</code> and make it compatible with Island Time's <code>Clock</code> interface:</p> <pre><code>val javaClock = java.time.Clock.system()\nval islandClock = javaClock.asIslandClock()\n</code></pre>"},{"location":"basics/dates-and-times/","title":"Dates and Times","text":"<p>Island Time has a wide array of different date-time classes, each tailored to its own set of use cases. These classes model the date and timekeeping system defined in ISO-8601, the international standard for the exchange of dates and times. The ISO standard applies the present-day Gregorian calendar proleptically, which is to say, even to the time period before it was adopted.</p>"},{"location":"basics/dates-and-times/#date-representations","title":"Date Representations","text":"Class Precision Example ISO Representation <code>Date</code> day <code>2020-02-15</code> <code>YearMonth</code> month <code>2020-02</code> <code>Year</code> year <code>2020</code> <p>The <code>Date</code> class represents a date in an ambiguous region. It could be in New York City, it could be in Tokyo. The instants in time that define the start and end of a <code>Date</code> can only be determined in the context of a particular time zone \u2014 hence the ambiguous part.</p> <pre><code>// Get the current date in the local time zone of the system\nval today = Date.now()\n\n// Create a date from components\nval leapDay = Date(2020, Month.February, 29)\n\n// Parse a date from ISO string representation\nval cincoDeMayo = \"2020-05-05\".toDate()\n</code></pre> <p>It's also possible to represent a date with reduced precision. For example, a <code>YearMonth</code> could be used to represent a credit card expiration date containing just a year and month.</p> <pre><code>// Create a year-month from a year and month\nval expiration = YearMonth(year, month)\n\n// A year-month can also be built using the \"at\" operator\nval yearMonth: YearMonth = Year(2020) at Month.AUGUST\n</code></pre>"},{"location":"basics/dates-and-times/#time-of-day","title":"Time of Day","text":"<p>The <code>Time</code> class can be used to represent a time of the day in an ambiguous region. Unlike <code>Date</code>, there are no classes with reduced precision \u2014 a <code>Time</code> is always precise to the nanosecond.</p> <pre><code>// Get the current time in the local time zone of the system\nval currentTime = Time.now()\n\n// Create a time from components\nval time = Time(13, 59, 59, 999_999_999)\n\n// Destructure a time back into components\nval (hour, minute, second, nanosecond) = time\n</code></pre>"},{"location":"basics/dates-and-times/#combined-date-and-time-of-day","title":"Combined Date and Time of Day","text":"<p>A <code>DateTime</code> combines a <code>Date</code> and <code>Time</code>, allowing you to represent both in a single data structure, still in an ambiguous region.</p> <pre><code>// Create a date-time from individual date and time components\nval dateTime = DateTime(2020, Month.JANUARY, 21, 1, 0)\n\n// Destructure a date-time\nval (date, time) = dateTime\n\nval date = Date(2019, Month.MARCH, 15)\n\n// The \"at\" operator can also be used to create a date-time\nval anotherDateTime: DateTime = date at Time.NOON\n\n// Or you could get the date-time at midnight from a date\nval startOfDay: DateTime = date.startOfDay\n</code></pre> <p>There's no guarantee that a <code>DateTime</code> will exist exactly once in a given time zone. Due to daylight savings time transitions, it may exist twice or it may not exist at all. We'll get into this more shortly, but it's important to keep in mind that working with and manipulating a <code>DateTime</code> directly can lead to subtle bugs.</p>"},{"location":"basics/dates-and-times/#instants-in-time","title":"Instants in Time","text":"<p>So far, the classes we've looked at model dates and times in an ambiguous region, but often we want to unambiguously capture an instant in time. There are three different classes in Island Time that can do this, each serving a different purpose.</p> Class Description <code>Instant</code> A timestamp <code>ZonedDateTime</code> A date and time of day in a particular time zone <code>OffsetDateTime</code> A date and time of day with fixed UTC offset <p>An <code>Instant</code> is simply a number of seconds and nanoseconds that have elapsed since the Unix epoch (<code>1970-01-01T00:00Z</code>), ignoring leap seconds. There's no concept of \"date\" without conversion to one of the other types. Practically speaking, this is the class you should use when you don't care about the local time and just want a UTC timestamp.</p> <pre><code>data class DogDto(\n    val name: String,\n    val breed: String,\n    // Capture the current system time\n    val creationTime: Instant = Instant.now()\n)\n</code></pre> <p>To capture an instant along with the local time, you have two options \u2014 <code>OffsetDateTime</code> and <code>ZonedDateTime</code>. Both store a <code>DateTime</code> along with a <code>UtcOffset</code>, however, <code>ZonedDateTime</code> is also aware of time zone rules, which is an important distinction.</p>"},{"location":"basics/dates-and-times/#timezone-vs-utcoffset","title":"<code>TimeZone</code> vs. <code>UtcOffset</code>","text":"<p>In Island Time, a <code>UtcOffset</code> is just a number of seconds that a local time must be adjusted forward or backward by to be equivalent to UTC. A <code>TimeZone</code> defines the rules used to determine the UTC offset. Time zones fall into two categories \u2014 region-based (<code>TimeZone.Region</code>) and fixed offset (<code>TimeZone.FixedOffset</code>).</p> <p>Region-based zones have identifiers, such as \"America/New_York\" or \"Europe/London\", that correspond to entries in the IANA Time Zone Database.</p> <p>Fixed offset zones have a fixed UTC offset. While region-based zones are generally preferrable, a suitable one may not exist in all situations.</p>"},{"location":"basics/dates-and-times/#zoneddatetime-vs-offsetdatetime","title":"<code>ZonedDateTime</code> vs. <code>OffsetDateTime</code>","text":"<p>While most platforms nowadays draw their understanding of time zones from the IANA Time Zone Database, time zones and their rules change all the time and different systems might have different versions of the database or only a subset of it available. This makes persistance and serialization of <code>ZonedDateTime</code> troublesome since there's the possibility that when the stored data gets read later, the zone can't be found or its rules have changed, thus altering the local date and time.</p> <p>Using <code>OffsetDateTime</code> guarantees that you'll never get an exception due to an unavailable time zone and that the value you save will be the value that's read later, making it well-suited for this particular use case. More often than not, you should use <code>ZonedDateTime</code> since it will handle daylight savings transitions correctly when doing any sort of calendar math, but you may want to consider converting to an <code>OffsetDateTime</code> when you persist or serialize your data.</p> <pre><code>val date = Date(2020, Month.MARCH, 8)\nval time = Time(2, 30)\nval zone = TimeZone(\"America/New_York\")\n\n// 2:00 on March 8 marks the beginning of daylight savings time on the east\n// coast of the United States, so 2:30 doesn't exist. The time is automatically\n// adjusted by an hour to 3:30.\nval zonedDateTime = date at time at zone\nprintln(zonedDateTime)\n// Output: 2020-03-08T03:30-04:00 [America/New_York]\n\n// If we subtract an hour, the offset will revert to that of standard time\nprintln(zonedDateTime - 1.hours)\n// Output: 2020-03-08T01:30-05:00 [America/New_York]\n\n// It's easy to convert a ZonedDateTime to an OffsetDateTime\nprintln(zonedDateTime.toOffsetDateTime())\n// Output: 2020-03-08T03:30-04:00\n\n// It's also possible to change the time zone such that it uses a fixed offset\n// instead of \"America/New_York\", making it functionally equivalent to an\n// OffsetDateTime.\nprintln(zonedDateTime.withFixedOffsetZone())\n// Output: 2020-03-08T03:30-04:00\n\n// Or change the zone while preserving the captured instant\nprintln(zonedDateTime.adjustedTo(TimeZone(\"America/Los_Angeles\")))\n// Output: 2020-03-07T23:30-08:00\n</code></pre>"},{"location":"basics/dates-and-times/#patterns-properties-and-operators","title":"Patterns, Properties, and Operators","text":"<p>Throughout Island Time's date-time primitives, you'll find a set of patterns that remain (relatively) constant, as well as a number of properties and operators that simplify common tasks.</p>"},{"location":"basics/dates-and-times/#at","title":"<code>at</code>","text":"<p>The <code>at</code> infix function can be used to build up date-time primitives from \"smaller\" pieces. For example, we can create a <code>DateTime</code> by combining a <code>Date</code> and a <code>Time</code>.</p> <pre><code>val dateTime = Date.now() at Time.NOON\n</code></pre> <p>We can then turn that into a <code>ZonedDateTime</code> by combining it with a <code>TimeZone</code>.</p> <pre><code>val zonedDateTime = dateTime at TimeZone.systemDefault()\n</code></pre>"},{"location":"basics/dates-and-times/#copy","title":"<code>copy()</code>","text":"<p>Similar to Kotlin's data classes, each date-time primitive has a <code>copy()</code> method available, making it easy to create a copy while changing any number of properties.</p> <pre><code>val dateTime = DateTime.now().copy(dayOfMonth = 15)\nval dateTimeAtMidnight = dateTime.copy(time = Time.MIDNIGHT)\n</code></pre>"},{"location":"basics/dates-and-times/#addition-and-subtraction","title":"Addition and subtraction","text":"<p>A duration of time can be added or subtracted from a date-time primitive. Which units are supported will vary depending on whether the primitive is date-based, time-based, or both.</p> <pre><code>val tomorrow = Date.now() + 1.days\nval yesterday = Date.now() - 1.days\n\nval tenSecondsLater = Instant.now() + 10.seconds\n</code></pre> <p>When working with <code>ZonedDateTime</code>, adding a day-based period of time may cross a daylight savings time transition, in which case, adding <code>1.days</code> may not be the same as adding <code>24.hours</code>.</p>"},{"location":"basics/dates-and-times/#start-and-end-of-time-periods","title":"Start and end of time periods","text":"<p>Relative to any date-based primitive, it's possible to get the start or end of a given period, be it the year, month, week, or day.</p> <pre><code>val date = Date.now()\nval startOfYear = date.startOfYear\nval endOfYear = date.endOfYear\nval startOfMonth = date.startOfMonth\nval startOfDay: DateTime = date.startOfDay\n</code></pre> <p>When it comes to weeks, we need to consider which day represents the start of the week. According to the ISO standard, that's Monday. However, depending on the locale, that may be on Sunday or Saturday instead. <code>WeekSettings</code> and the platform <code>Locale</code> type can be used to provide control over this.</p> <pre><code>// Start of ISO week (Monday start)\nval isoStart = Date.now().startOfWeek\n\n// Start of week using Sunday as start\nval sundayStart = Date.now().startOfWeek(WeekSettings.SUNDAY_START)\n\n// Respect the user's system settings (usually, most appropriate)\nval systemStart = Date.now().startOfWeek(WeekSettings.systemDefault())\n\n// Use the default associated with a particular locale\nval localeStart = Date.now().startOfWeek(explicitLocale)\n</code></pre> <p>You can also get the week period as a range or interval.</p> <pre><code>// Get the date range of the current week\nval rangeOfWeek: DateRange = Date.now().week(WeekSettings.systemDefault())\n</code></pre>"},{"location":"basics/dates-and-times/#previous-or-next-day-of-week","title":"Previous or next day of week","text":"<p>To get, say, the previous Tuesday from a particular date-time, you can do something like this:</p> <pre><code>val now = ZonedDateTime.now()\n\n// Get the Tuesday before \"now\" at the same time of day\nval nowOnTuesday = now.previous(TUESDAY)\n\n// Get the Tuesday before \"now\" or \"now\" if it already falls on a Tuesday\nval nowOnTuesdayOrSame = now.previousOrSame(TUESDAY)\n</code></pre> <p>Similarly, you can use <code>next()</code> or <code>nextOrSame()</code> to get the next day of the week relative to the current date.</p> <pre><code>val today = Date.now()\nval nextWednesday = today.next(WEDNESDAY)\nval nextWednesdayOrToday = today.nextOrSame(WEDNESDAY)\n</code></pre>"},{"location":"basics/dates-and-times/#rounding","title":"Rounding","text":"<p>A time or date-time can be rounded up, down, or half-up to the precision of a particular unit.</p> <pre><code>val dateTime = DateTime.now()\n// Output: 2020-06-30T06:32:14.168\n\n// Round half-up to the nearest minute\nval roundedToMinute = dateTime.roundedTo(MINUTES)\n// Output: 2020-06-30T06:32\n\n// Round up to the nearest hour\nval roundedUpToHour = dateTime.roundedUpTo(HOURS)\n// Output: 2020-06-30T07:00\n\n// Round down to the nearest hour (alternatively, you can use roundedDownTo())\nval roundedDownToHour = dateTime.truncatedTo(HOURS)\n// Output: 2020-06-30T06:00\n</code></pre> <p>You can also round to the nearest 15 minutes \u2014 or whatever increment you'd like.</p> <pre><code>// Round half-up to the nearest 15 minutes\nval roundedToNearest15Mins = dateTime.roundedToNearest(15.minutes)\n// Output: 2020-06-30T06:30\n\n// Round down to the nearest 100 milliseconds\nval roundedDownTo100Millis = dateTime.roundedDownToNearest(100.milliseconds)\n// Output: 2020-06-30T06:32:14.1\n</code></pre>"},{"location":"basics/dates-and-times/#week-numbers","title":"Week numbers","text":"<p>You can obtain the week number and year as defined in the ISO week date system like this:</p> <pre><code>val date = Date.now()\n\n// Get the week-based year, which may differ from the regular year\nval isoWeekYear: Int = date.weekBasedYear\n\n// Get the week of the week-based year\nval isoWeekNumber: Int = date.weekOfWeekBasedYear\n\n// Or convert the date to a full ISO week date representation in a single step\ndate.toWeekDate { year: Int, week: Int, day: Int -&gt;\n    // ...\n}\n</code></pre> <p>Different week definitions can be used by specifying the <code>WeekSettings</code> explicitly.</p> <pre><code>val usaWeekNumber: Int = date.weekOfWeekBasedYear(WeekSettings.SUNDAY_START)\n</code></pre> <p><code>weekOfYear</code> vs. <code>weekOfWeekBasedYear</code></p> <p>The week number associated with a particular date could fall in the prior or subsequent year, depending on how the week is defined. <code>weekOfYear</code> will return the week number relative to the date's regular <code>year</code> \u2014 <code>0</code> if it falls in the prior year, for example. On the other hand, <code>weekOfWeekBasedYear</code> will adjust the number to the <code>weekBasedYear</code>.</p>"},{"location":"basics/dates-and-times/#iso-representation","title":"ISO Representation","text":"<p>Any date-time primitive can be converted to an appropriate ISO string format by simply calling <code>toString()</code>. To convert a string into a date-time primitive, use the appropriate conversion function, such as <code>String.toDate()</code> or <code>String.toInstant()</code>.</p> <pre><code>val date = Date.now()\nval isoString: String = date.toString\nval dateFromString: Date = isoString.toDate()\n</code></pre> <p>By default, Island Time reads and writes using ISO-8601 extended format, which is most common. Predefined parsers are also available that can handle other formats.</p>"},{"location":"basics/durations/","title":"Durations","text":"<p>In Island Time, durations are fully type-safe. The use of durations in terms of a single unit is encouraged where possible. Date-based periods in terms of multiple units and long time-based durations are also available.</p>"},{"location":"basics/durations/#single-unit-durations","title":"Single Unit Durations","text":"<p>Island Time provides value classes representing each individual duration unit backed by a <code>Long</code> value \u2014 such as <code>Years</code>, <code>Hours</code>, or <code>Nanoseconds</code>. This allows the precision of each quantity to be maintained, avoids ambiguitity regarding the meaning of a day (ie. conceptual vs. 24 hours), and is quite efficient as well. When adding or subtracting quantities in mixed units, precision is increased automatically as needed. For example:</p> <pre><code>// The minimum necessary unit granularity is preserved when\n// combining different units\nval totalSeconds: Seconds = 5.hours + 30.minutes + 1.seconds\nval nanoseconds: Nanoseconds = totalSeconds + 1.nanoseconds\n</code></pre> <p>A quantity in one unit can be broken down into parts in terms of \"bigger\" units using the <code>toComponents()</code> method.</p> <pre><code>61.minutes.toComponents { hours: Hours, minutes: Minutes -&gt;\n   println(hours) // PT1H\n   println(minutes) // PT1M\n}\n</code></pre> <p>Or converted to another unit.</p> <pre><code>val hours: Hours = 60.minutes.inWholeHours\n</code></pre> <p>You can also get the duration between two date-times in terms of any given unit, using companion methods such as <code>Hours.between()</code> or <code>Days.between()</code>.</p> <pre><code>val hours = Hours.between(firstDateTime, secondDateTime)\nval absHours = hours.absoluteValue // hours may be negative\n</code></pre>"},{"location":"basics/durations/#duration","title":"<code>Duration</code>","text":"<p>The <code>Duration</code> class can be used to represent time-based durations that are potentially very large at nanosecond precision. In most cases, it's probably unnecessary and single unit durations will be perfectly satisfactory, but you can be assured that overflow won't happen when expressing any duration that fits within the supported time scale.</p> <p>A single unit duration can be converted to a <code>Duration</code> like so:</p> <pre><code>val duration: Duration = 5.seconds.asDuration()\n</code></pre> <p>To construct a <code>Duration</code> from seconds and nanoseconds in a single step, you can use <code>durationOf()</code>.</p> <pre><code>val duration: Duration = durationOf(5.seconds, 100.nanoseconds)\n</code></pre> <p>The methods and operators available to <code>Duration</code> are mostly the same as those on the single unit durations.</p> <pre><code>val duration: Duration = Duration.between(firstDateTime, secondDateTime)\nval minutes: Minutes = duration.inMinutes\n</code></pre>"},{"location":"basics/durations/#period","title":"<code>Period</code>","text":"<p>A <code>Period</code> is a date-based measurement of time consisting of a number of years, months, and days. The code below shows some of the things that you can do with it.</p> <pre><code>val period: Period = periodOf(5.years, 13.months, 10.days)\n\n// Convert months to years where appropriate\nval normalizedPeriod = period.normalized() // 6.years, 1.months, 10.days\n\n// Units can be added or subtracted\nval modifiedPeriod = period - 1.years - 15.days // 5.years, 1.months, (-5).days\n\n// Or inverted\nval invertedPeriod = -period // (-5).years, (-13).months, (-10).days\n\n// The period can also be destructured\nval (years, months, days) = period\n\n// We can also get the period between two dates\nval periodBetweenDates = Period.between(date1, date2)\n</code></pre>"},{"location":"basics/durations/#iso-representation","title":"ISO Representation","text":"<p>Similar to date-times, calling <code>toString()</code> on any duration will return an ISO representation, such as <code>PT23H12M</code> or <code>P0D</code>. <code>String.toDuration()</code> or <code>String.toPeriod()</code> can be used to convert an ISO duration string into an object of the corresponding type.</p> <pre><code>val period = periodOf(5.years, 13.months, (-10).days)\nval isoString = period.toString() // P5Y13M-10D\nval readPeriod = isoString.toPeriod()\n</code></pre> <p>Currently, there's no way to represent a full ISO duration consisting of both date and time components and it's not possible to parse a string directly to a single duration unit. Some changes in this area are planned for the future.</p>"},{"location":"basics/formatting/","title":"Formatting","text":"<p>Currently, Island Time lacks the ability to do localized and custom formatting of dates and times in common code. This is in the works and should be available pretty soon. Right now though, it is still possible to access localized text in common code and platform-specific APIs can be used to handle formatting.</p>"},{"location":"basics/formatting/#accessing-localized-text","title":"Accessing Localized Text","text":"<p>You can obtain the localized name of a month, day of the week, or time zone in common code like so:</p> <pre><code>// Get the system default locale. We'll assume this is \"en_US\".\nval locale = defaultLocale()\n\nval shortMonth = FEBRUARY.localizedName(TextStyle.SHORT_STANDALONE, locale)\n// Output: \"Feb\"\n\nval fullDayOfWeek = TUESDAY.localizedName(TextStyle.FULL_STANDALONE, locale)\n// Output: \"Tuesday\"\n\nval tz = TimeZone(\"America/New_York\")\nval tzName = tz.displayName(TimeZoneTextStyle.DAYLIGHT, locale)\n// Output: \"Eastern Daylight Time\"\n</code></pre> <p>In general, you'll find a <code>localizedName()</code> method that returns <code>null</code> if text is unavailable for the provided style and locale. And then a <code>displayName()</code> method that will instead return a default value if localized text is unavailable, such as the month or day of week number.</p>"},{"location":"basics/formatting/#locale","title":"<code>Locale</code>","text":"<p>Island Time's <code>Locale</code> is simply a <code>typealias</code> for <code>java.util.Locale</code> or <code>NSLocale</code>. The <code>defaultLocale()</code> function allows you to access the user's current locale in common code. A specific locale can be used by converting a language tag, such as \"en-US\", using the <code>String.toLocale()</code> method. For anything more sophisticated, you should use platform-specific code.</p>"},{"location":"basics/formatting/#using-platform-apis","title":"Using Platform APIs","text":"<p>While you can't share all of your formatting-related code when using platform APIs, there are reasons why you may not necessarily want to do that anyway.</p> <ul> <li> <p>Even though Island Time only supports the ISO calendar system, using platform APIs, you can still output to the user's preferred calendar</p> </li> <li> <p>You can better guarantee that formatting will be consistent with the user's expectations for the platform</p> </li> <li> <p>You can take advantage of localization features that may not be available or implemented consistently on all platforms</p> </li> </ul>"},{"location":"basics/formatting/#javaandroid","title":"Java/Android","text":"<pre><code>val zone = TimeZone(\"America/New_York\")\nval instant = Instant.UNIX_EPOCH\nval islandZonedDateTime = instant at zone\n\n// Create a java.time DateTimeFormatter to do the formatting\nval formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL)\n\nprintln(islandZonedDateTime.toJavaZonedDateTime().format(formatter))\n// Output: \"Wednesday, December 31, 1969 at 7:00:00 PM Eastern Standard Time\"\n</code></pre>"},{"location":"basics/formatting/#apple","title":"Apple","text":"<pre><code>val zone = TimeZone(\"America/New_York\")\nval instant = Instant.UNIX_EPOCH\n\n// Convert to an NSDate\nval nsDate = instant.toNSDate()\n\n// Create an NSDateFormatter to do the formatting\nval formatter = NSDateFormatter().apply {\n   dateStyle = NSDateFormatterFullStyle\n   timeStyle = NSDateFormatterFullStyle\n   timeZone = zone.toNSTimeZone()\n}\n\nprintln(formatter.stringFromDate(nsDate))\n// Output: \"Wednesday, December 31, 1969 at 7:00:00 PM Eastern Standard Time\"\n</code></pre>"},{"location":"basics/interop/","title":"Interoperating with Platform Libraries","text":"<p>In a multiplatform project, it's often necessary to interoperate with code that uses platform libraries directly. A number of conversion functions are available to help simplify this process.</p>"},{"location":"basics/interop/#java-time-library","title":"Java Time Library","text":"<p>Island Time's classes map very closely to those in java.time, making it pretty easy to go back and forth between them. The following table shows the relationship between a subset of the classes:</p> java.time Island Time Description <code>LocalDate</code> <code>Date</code> A date in arbitrary region <code>LocalTime</code> <code>Time</code> A time of day in arbitrary region <code>LocalDateTime</code> <code>DateTime</code> A combined date and time of day in arbitrary region <code>Instant</code> <code>Instant</code> An instant in time, represented by the number of seconds/nanoseconds relative to the Unix epoch (<code>1970-01-01T00:00Z</code>) <code>OffsetTime</code> <code>OffsetTime</code> A time of day with UTC offset <code>OffsetDateTime</code> <code>OffsetDateTime</code> A date and time of day with fixed UTC offset <code>ZonedDateTime</code> <code>ZonedDateTime</code> A date and time of day in a particular time zone region <code>ZoneOffset</code> <code>UtcOffset</code> An offset from UTC <code>ZoneId</code> <code>TimeZone</code> An IANA time zone database region ID or fixed offset from UTC <code>Duration</code> <code>Duration</code> A (potentially large) duration of time <code>Period</code> <code>Period</code> A date-based period of time <p>To convert between an Island Time <code>Date</code> and Java <code>LocalDate</code>, you can do something like this:</p> <pre><code>val javaLocalDate = java.time.LocalDate.now()\n\n// Convert a Java LocalDate to Island Time Date\nval islandDate = javaLocalDate.toIslandDate()\n\n// Convert an Island Time Date back to a Java LocalDate\nval backToJavaLocalDate = islandDate.toJavaLocalDate()\n</code></pre> <p>The pattern above can be applied for the majority of the date-time and duration classes. For durations, it's also possible to convert any of Island Time's single unit durations directly to a Java <code>Duration</code>.</p> <pre><code>val javaDuration: java.time.Duration = 30.minutes.toJavaDuration()\n</code></pre> <p>You can find the full set of conversions in the io.islandtime.jvm package.</p>"},{"location":"basics/interop/#apple-foundation-classes","title":"Apple Foundation Classes","text":"<p>We can map between some Island Time types and the date-time types provided in Apple's Foundation API, such as <code>NSDate</code>, <code>NSDateComponents</code>, and <code>NSTimeZone</code>. Keep in mind that <code>NSDate</code> and <code>NSTimeInterval</code> are based around floating-point numbers, so conversion may result in lost precision.</p> <pre><code>// NSDate is a timestamp, just like Instant\nval islandInstant = Instant.now()\nval nsDate = islandInstant.toNSDate()\nval islandInstantAgain = nsDate.toIslandInstant()\n\n// NSDateComponents separates out the calendar/time components, roughly modeling\n// Date, DateTime, ZonedDateTime, et all\nval zonedDateTime = ZonedDateTime.now()\nval nsDateComponents = zonedDateTime.toNSDateComponents()\nval zonedDateTimeAgain = nsDateComponents.toIslandZonedDateTimeOrNull()\n\n// Convert from IntMinutes to NSTimeInterval\nval nsTimeInterval = 5.minutes.toNSTimeInterval()\n</code></pre> <p>The full set of conversions can be found in the io.islandtime.darwin package.</p>"},{"location":"basics/interop/#kotlintime","title":"kotlin.time","text":"<p>As of Kotlin 1.6.0, a <code>Duration</code> type has been stabilized as part of the standard library. It isn't an exact replacement for Island Time's <code>Duration</code>, but you can easily convert between the two types (with possible loss of precision for larger durations).</p> <pre><code>import kotlin.time.seconds as kotlinSeconds\n\n// Convert from Island Time IntMinutes to Kotlin Duration\nval kotlinDuration: kotlin.time.Duration = 30.minutes.toKotlinDuration()\n\n// Convert from Kotlin Duration to Island Time Duration\nval islandDuration: Duration = 30.kotlinSeconds.toIslandDuration()\n</code></pre> <p>Kotlin's <code>Duration</code> type can also be used directly with Island Time classes, such as <code>Instant</code> or <code>ZonedDateTime</code>.</p> <pre><code>val untilInstant = Instant.now() + 10.kotlinSeconds\n</code></pre>"},{"location":"basics/intervals/","title":"Ranges and Intervals","text":"<p>Kotlin offers first class support for ranges and Island Time takes full advantage of that, allowing you to model date ranges and time intervals in a way that feels natural.</p>"},{"location":"basics/intervals/#terminology-ranges-vs-intervals","title":"Terminology: \"Ranges\" vs. \"Intervals\"","text":"<p>In Island Time, \"ranges\" are inclusive, implementing Kotlin's <code>ClosedRange</code> interface, while \"intervals\" are half-open with an exclusive end. When representing time-based intervals, precision differences (ie. millisecond vs. nanosecond) can make an inclusive end troublesome to work with, so while you can create an interval from a closed range, it'll be stored, read, and written with an exclusive end.</p>"},{"location":"basics/intervals/#daterange","title":"<code>DateRange</code>","text":"<p>A range of dates can be represented by a <code>DateRange</code>, which is also a progression, allowing you to iterate over each day in the range. Using a custom <code>step</code>, you can iterate with an increment of any number of days, weeks, months, or years. You can also use <code>until</code> and <code>downTo</code> just like you can with Kotlin's built-in types.</p> <pre><code>val clock: Clock = SystemClock()\nval today: Date = Date.now(clock)\n\n// Create a date range\nval dateRange: DateRange = today - 1.months..today\n\n// Iterate over each day in the range\nfor (date in dateRange) {\n    val startOfDay: ZonedDateTime = date.startOfDayAt(clock.zone)\n    val endOfDay: ZonedDateTime = date.endOfDayAt(clock.zone)\n    // ...\n}\n\n// Step by months instead of days\nfor (date in today until today + 1.years step 1.months) {\n   // ...\n}\n</code></pre> <p>Additional operations are also supported, such as <code>random()</code> and the ability to get the length of the range in terms of whatever unit you'd like.</p> <pre><code>// Pick a random date\nval randomDate = (today..today + 1.months).random()\n\n// Get the total number of days\nval totalDays: Days = (today until today + 6.months).lengthInDays\n\n// Get the Period represented by the range\nval period: Period = (today..today + 1.months).toPeriod()\n</code></pre>"},{"location":"basics/intervals/#time-intervals","title":"Time Intervals","text":"<p>Each of Island Time's date-time classes has a corresponding interval class.</p> Class Example ISO Representation <code>DateTimeInterval</code> <code>2020-04-15T10:00/2020-04-15T13:00</code> <code>InstantInterval</code> <code>2020-04-15T10:00Z/2020-04-15T13:00Z</code> <code>OffsetDateTimeInterval</code> <code>2020-03-09T14:00-05:00/2020-03-10T17:00-04:00</code> <code>ZonedDateTimeInterval</code> <code>2020-04-15T10:00-04:00[America/New_York]/2020-04-15T21:30+01:00[Europe/London]</code> <p>For <code>OffsetDateTimeInterval</code> and <code>ZonedDateTimeInterval</code>, inclusivity within a time interval is based on the instants defined by the start and end points, ignoring any local time differences (ie. timeline order, not natural order).</p>"},{"location":"basics/intervals/#converting-a-daterange-to-an-interval","title":"Converting a <code>DateRange</code> to an interval","text":"<p>A <code>DateRange</code> can be converted directly to an interval representing the period from the start of the first day to the end of the last day.</p> <pre><code>val today: Date = Date.now()\nval dateRange: DateRange = today - 1.weeks until today\nval zone: TimeZone = TimeZone.systemDefault()\n\n// Convert to a ZonedDateTimeInterval\nval zonedDateTimeInterval: ZonedDateTimeInterval = dateRange at zone\n\n// Convert to an InstantInterval\nval instantInterval: InstantInterval = dateRange.toInstantIntervalAt(zone)\n</code></pre>"},{"location":"basics/intervals/#iterating-over-intervals","title":"Iterating over intervals","text":"<p>Only <code>InstantInterval</code> allows iteration, though the other interval types can be converted easily enough.</p> <pre><code>val now: ZonedDateTime = ZonedDateTime.now()\nval zonedDateTimeInterval: ZonedDateTimeInterval = now until now + 1.weeks\nval instantInterval: InstantInterval = zonedDateTimeInterval.toInstantInterval()\n</code></pre> <p>Unlike with date ranges, the <code>step</code> is necessary to create a progression.</p> <pre><code>val now = Instant.now()\nval then = now + 1.hours\n\nfor (instant in now until then step 1.seconds) {\n   // ...\n}\n</code></pre>"},{"location":"basics/intervals/#unbounded-and-empty-intervals","title":"Unbounded and Empty Intervals","text":"<p>A range or interval may be unbounded on one or both ends \u2014 or empty. The <code>MIN</code> and <code>MAX</code> sentinels can be used to indicate the \"far past\" or \"far future\".</p> <pre><code>val partiallyBoundedDateRange = \"2020-04-12/..\".toDateRange()\nassertFalse { partiallyBoundedDateRange.isBounded() }\n\n// Most operations are not valid on unbounded ranges\nassertFailsWith&lt;UnsupportedOperationException&gt; {\n   partiallyBoundedDateRange.lengthInYears\n}\n\n// Range containing every representable date\nval completelyUnbounded = DateRange.UNBOUNDED\n\n// Range containing no dates\nval emptyDateRange = DateRange.EMPTY\n</code></pre> <p>\"Unbounded\" vs. \"Open\"</p> <p>In ISO-8601, an \"unbounded\" interval is referred to as an \"open\" interval. However, this conflicts with the mathematical meaning of \"open\" (ie. end points that are exclusive rather than inclusive), so we try to avoid using that terminology.</p>"},{"location":"basics/intervals/#iso-representation","title":"ISO Representation","text":"<p>As with all of the other types in Island Time, calling <code>toString()</code> on an interval will return an ISO represention, which can be converted back to the appropriate interval type using methods like <code>String.toDateRange()</code> or <code>String.toZonedDateTimeInterval()</code>.</p> <pre><code>val firstDate = Date(2020, MARCH, 1)\nval secondDate = Date(2020, MAY, 13)\nval dateRange: DateRange = firstDate..secondDate\n\nval isoDateRangeString = dateRange.toString()\n// Output: 2020-03-01/2020-05-13\n\nval readDateRange = isoDateRangeString.toDateRange()\n\nval zone = TimeZone(\"America/New_York\")\nval zonedInterval: ZonedDateTimeInterval = dateRange at zone\nval isoZonedIntervalString = zonedInterval.toString()\n// Output: 2020-03-01T00:00-05:00[America/New_York]/2020-05-13T23:59:59.999999999-04:00[America/New_York]\n\nval readZonedInterval = isoZonedIntervalString.toZonedDateTimeInterval()\n</code></pre> <p>By default, Island Time parses only ISO-8601 extended format, but predefined parsers are also available that can read the less common basic format \u2014 or either format.</p>"},{"location":"basics/overview/","title":"Overview","text":"<p>Being heavily inspired by the java.time library, Island Time should look fairly familiar to those acquainted with it and tends to follow many of the same design principles.</p>"},{"location":"basics/overview/#general-design","title":"General Design","text":""},{"location":"basics/overview/#immutability","title":"Immutability","text":"<p>All date-time primitives are immutable and thread-safe. Operations that manipulate a date, time, duration, or interval will always return a new object.</p>"},{"location":"basics/overview/#precision","title":"Precision","text":"<p>Island Time uses integer rather than floating-point values, offering a fixed nanosecond precision across the entire supported time scale. This avoids any surprises that might emerge from the use of floating-point arithmetic and the reduction in precision that occurs when representing larger durations.</p>"},{"location":"basics/overview/#overflow-handling","title":"Overflow Handling","text":"<p>When working with dates and times, overflow is almost never a behavior that you want. See Y2k or Time formatting and storage bugs. Island Time uses checked arithmetic throughout to detect overflow and throw exceptions rather than failing silently.</p>"},{"location":"basics/overview/#type-safety","title":"Type-Safety","text":"<p>In general, Island Time tries to prevent nonsensical operations at compile time rather than runtime. To that end, you'll find that there are a lot more classes than there are in a number of other date-time libraries.</p>"},{"location":"basics/parsing/","title":"Parsing","text":""},{"location":"basics/parsing/#predefined-parsers","title":"Predefined Parsers","text":"<p>Out of the box, Island Time can parse the most common ISO-8601 formats for dates, times, durations, and time intervals. The set of included parsers can be found in <code>DateTimeParsers</code>.</p> <p>The table below illustrates how the parsers for the various ISO formats are organized within <code>DateTimeParsers</code>, using the calendar date format as an example:</p> Iso Format Parser Acceptable Input(s) Basic <code>DateTimeParsers.Basic.CALENDAR_DATE</code> <code>20200101</code> Extended <code>DateTimeParsers.Extended.CALENDAR_DATE</code> <code>2020-01-01</code> Any <code>DateTimeParsers.CALENDAR_DATE</code> <code>20200101</code> or <code>2020-01-01</code> <p>The extended format is \u2014 by far \u2014 the most common. If you don't specify a parser explicitly when converting a string to an Island Time type, it will look for extended format only. Below are some examples:</p> <pre><code>// Parse an extended format date-time\nval extendedDateTime = \"2020-12-31T13:45\".toDateTime()\n\n// Parse a basic format date-time\nval basicDateTime = \"20201231T1345\".toDateTime(DateTimeParsers.Basic.DATE_TIME)\n\n// Parse an ordinal date (year and day of year)\nval ordinalDate = \"2020-365\".toDate(DateTimeParsers.Extended.ORDINAL_DATE)\n</code></pre>"},{"location":"basics/parsing/#custom-parsers","title":"Custom Parsers","text":"<p>In an ideal world, non-ISO formats wouldn\u2019t exist, but sometimes they do and you need to parse them. To support that, you can define custom parsers using a DSL.</p> <pre><code>// Define a custom parser\nval customParser = dateTimeParser {\n    monthNumber()\n    anyOf({ +'/' }, { +'-' })\n    dayOfMonth()\n    optional {\n        anyOf({ +'/' }, { +'-' })\n        year()\n    }\n}\n\n// Parse a date using it\ntry {\n    val date = \"3/17/2020\".toDate(customParser)\n} catch (e: DateTimeException) {\n    // ...\n}\n</code></pre> <p>When dealing with ranges and intervals, you'll need to define a \"grouped\" parser, which can handle multiple results.</p> <pre><code>val customGroupedParser = groupedDateTimeParser {\n    group {\n        childParser(customParser)\n    }\n    +\"--\"\n    group {\n        childParser(customParser)\n    }\n}\n\nval dateRange = \"3/17/2020--4/5/2020\".toDateRange(customGroupedParser)\n</code></pre>"},{"location":"basics/serialization/","title":"Serialization","text":"<p>Island Time includes built-in support for Kotlin Serialization. By default, dates, times, durations, and intervals are serialized as ISO-compatible strings.</p>"},{"location":"basics/serialization/#serializing-to-json","title":"Serializing to JSON","text":"<p>For example purposes, let's assume we have a data structure describing an event that we'd like to serialize.</p> <pre><code>@Serializable\ndata class EventDto(\n    val name: String,\n    val dateRange: DateRange,\n    val createdAt: Instant\n)\n</code></pre> <p>By using the <code>@Serializable</code> annotation, we instruct the Kotlin Serialization plugin to generate a serializer for the <code>EventDto</code> class. Island Time's DateRange and Instant classes will be automatically serialized as ISO-8601 strings.</p> <p>Now, we can serialize the <code>EventDto</code> class to JSON with the following code:</p> <pre><code>fun writeToJson(val event: EventDto): String {\n    val json = Json { prettyPrint = true }\n    return json.encodeToString(EventDto.serializer(), event)\n}\n</code></pre> <p>Example output might look something like this:</p> <pre><code>{\n    \"name\": \"KotlinConf 2019\",\n    \"dateRange\": \"2019-12-04/2012-12-06\",\n    \"createdAt\": \"2020-03-14T14:19:03.478Z\"\n}\n</code></pre> <p>For more information on how to use Kotlin Serialization, consult the GitHub page.</p>"},{"location":"basics/serialization/#binary-formats","title":"Binary Formats","text":"<p>At the present time, there are no serializers tuned specifically for binary formats. If you have a use case that requires that, feel free to raise an issue.</p>"},{"location":"extensions/parcelize/","title":"<code>@Parcelize</code>","text":"<p>The <code>parcelize-extensions</code> artifact provides a set of parcelers for use with the Parcelable implementation generator plugin.</p>"},{"location":"extensions/parcelize/#gradle-setup","title":"Gradle Setup","text":"KotlinGroovy <pre><code>dependencies {\n    implementation(\"io.islandtime:parcelize-extensions:0.6.3\")\n}\n</code></pre> <pre><code>dependencies {\n    implementation \"io.islandtime:parcelize-extensions:0.6.3\"\n}\n</code></pre>"},{"location":"extensions/parcelize/#usage","title":"Usage","text":"<p>Custom parcelers are available for each of Island Time's date-time primitives, durations, and intervals, allowing you to use them within <code>Parcelable</code> classes.</p> <pre><code>@Parcelize\n@TypeParceler&lt;Date, DateParceler&gt;()\ndata class MyParcelable(\n    val name: String,\n    val date: Date\n) : Parcelable\n</code></pre> <p>In the above example, DateParceler is used to generate a class containing a non-nullable <code>Date</code>. You could make the <code>Date</code> nullable instead by using NullableDateParceler.</p> <pre><code>@Parcelize\n@TypeParceler&lt;Date?, NullableDateParceler&gt;()\ndata class MyParcelableWithNull(\n    val name: String,\n    val date: Date?\n) : Parcelable\n</code></pre> <p>See the Parcelize Extensions API documention for the full list of available parcelers.</p>"}]}