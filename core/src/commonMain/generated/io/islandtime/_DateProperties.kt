//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("DateTimesKt")

package io.islandtime

import io.islandtime.calendar.WeekSettings
import io.islandtime.internal.lengthOfWeekBasedYearImpl
import io.islandtime.internal.weekBasedYearImpl
import io.islandtime.internal.weekOfMonthImpl
import io.islandtime.internal.weekOfWeekBasedYearImpl
import io.islandtime.internal.weekOfYearImpl
import io.islandtime.measures.IntDays
import io.islandtime.measures.IntWeeks
import kotlin.Boolean
import kotlin.Int
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * Checks if this date falls within a leap year.
 */
val Date.isInLeapYear: Boolean
  get() = isLeapYear(year)

/**
 * Checks if this date is February 29.
 */
val Date.isLeapDay: Boolean
  get() = month == Month.FEBRUARY && dayOfMonth == 29

/**
 * The length of this date's month in days.
 */
val Date.lengthOfMonth: IntDays
  get() = month.lengthIn(year)

/**
 * The length of this date's year in days.
 */
val Date.lengthOfYear: IntDays
  get() = lengthOfYear(year)

/**
 * The week of the month (0-5) according to the ISO definition.
 */
val Date.weekOfMonth: Int
  get() = weekOfMonthImpl

/**
 * The week of the month (0-5) according to the week definition in [settings].
 */
fun Date.weekOfMonth(settings: WeekSettings): Int = weekOfMonthImpl(settings)

/**
 * The week of the year according to the ISO week definition. If the week number is associated with
 * the preceding year, `0` will be returned.
 *
 * To obtain the week number used in the ISO week date system, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
val Date.weekOfYear: Int
  get() = weekOfYearImpl

/**
 * The week of the year according to the week definition in [settings]. If the week number is
 * associated with the preceding year, `0` will be returned.
 *
 * To obtain the week number of the week-based year, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
fun Date.weekOfYear(settings: WeekSettings): Int = weekOfYearImpl(settings)

/**
 * The week-based year used in the ISO
 * [week date system](https://en.wikipedia.org/wiki/ISO_week_date). This differs from the regular ISO
 * year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
val Date.weekBasedYear: Int
  get() = weekBasedYearImpl

/**
 * The week-based year according to the week definition in [settings]. This differs from the regular
 * ISO year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
fun Date.weekBasedYear(settings: WeekSettings): Int = weekBasedYearImpl(settings)

/**
 * The week number used in the ISO [week date system](https://en.wikipedia.org/wiki/ISO_week_date).
 *
 * @see weekBasedYear
 */
val Date.weekOfWeekBasedYear: Int
  get() = weekOfWeekBasedYearImpl

/**
 * The week number of the week-based year according to the week definition in [settings].
 *
 * @see weekBasedYear
 */
fun Date.weekOfWeekBasedYear(settings: WeekSettings): Int = weekOfWeekBasedYearImpl(settings)

/**
 * The length of the ISO week-based year that this date falls in, either 52 or 53 weeks.
 */
val Date.lengthOfWeekBasedYear: IntWeeks
  get() = lengthOfWeekBasedYearImpl

/**
 * Checks if this date-time falls within a leap year.
 */
val DateTime.isInLeapYear: Boolean
  inline get() = date.isInLeapYear

/**
 * Checks if this date-time falls within February 29.
 */
val DateTime.isInLeapDay: Boolean
  inline get() = date.isLeapDay

/**
 * The length of this date-time's month in days.
 */
val DateTime.lengthOfMonth: IntDays
  inline get() = date.lengthOfMonth

/**
 * The length of this date-time's year in days.
 */
val DateTime.lengthOfYear: IntDays
  inline get() = date.lengthOfYear

/**
 * The week of the month (0-5) according to the ISO definition.
 */
val DateTime.weekOfMonth: Int
  inline get() = date.weekOfMonth

/**
 * The week of the month (0-5) according to the week definition in [settings].
 */
fun DateTime.weekOfMonth(settings: WeekSettings): Int = date.weekOfMonth(settings)

/**
 * The week of the year according to the ISO week definition. If the week number is associated with
 * the preceding year, `0` will be returned.
 *
 * To obtain the week number used in the ISO week date system, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
val DateTime.weekOfYear: Int
  inline get() = date.weekOfYear

/**
 * The week of the year according to the week definition in [settings]. If the week number is
 * associated with the preceding year, `0` will be returned.
 *
 * To obtain the week number of the week-based year, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
fun DateTime.weekOfYear(settings: WeekSettings): Int = date.weekOfYear(settings)

/**
 * The week-based year used in the ISO
 * [week date system](https://en.wikipedia.org/wiki/ISO_week_date). This differs from the regular ISO
 * year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
val DateTime.weekBasedYear: Int
  inline get() = date.weekBasedYear

/**
 * The week-based year according to the week definition in [settings]. This differs from the regular
 * ISO year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
fun DateTime.weekBasedYear(settings: WeekSettings): Int = date.weekBasedYear(settings)

/**
 * The week number used in the ISO [week date system](https://en.wikipedia.org/wiki/ISO_week_date).
 *
 * @see weekBasedYear
 */
val DateTime.weekOfWeekBasedYear: Int
  inline get() = date.weekOfWeekBasedYear

/**
 * The week number of the week-based year according to the week definition in [settings].
 *
 * @see weekBasedYear
 */
fun DateTime.weekOfWeekBasedYear(settings: WeekSettings): Int = date.weekOfWeekBasedYear(settings)

/**
 * The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks.
 */
val DateTime.lengthOfWeekBasedYear: IntWeeks
  inline get() = date.lengthOfWeekBasedYear

/**
 * Checks if this date-time falls within a leap year.
 */
val OffsetDateTime.isInLeapYear: Boolean
  inline get() = dateTime.isInLeapYear

/**
 * Checks if this date-time falls within February 29.
 */
val OffsetDateTime.isInLeapDay: Boolean
  inline get() = date.isLeapDay

/**
 * The length of this date-time's month in days.
 */
val OffsetDateTime.lengthOfMonth: IntDays
  inline get() = dateTime.lengthOfMonth

/**
 * The length of this date-time's year in days.
 */
val OffsetDateTime.lengthOfYear: IntDays
  inline get() = dateTime.lengthOfYear

/**
 * The week of the month (0-5) according to the ISO definition.
 */
val OffsetDateTime.weekOfMonth: Int
  inline get() = dateTime.weekOfMonth

/**
 * The week of the month (0-5) according to the week definition in [settings].
 */
fun OffsetDateTime.weekOfMonth(settings: WeekSettings): Int = dateTime.weekOfMonth(settings)

/**
 * The week of the year according to the ISO week definition. If the week number is associated with
 * the preceding year, `0` will be returned.
 *
 * To obtain the week number used in the ISO week date system, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
val OffsetDateTime.weekOfYear: Int
  inline get() = dateTime.weekOfYear

/**
 * The week of the year according to the week definition in [settings]. If the week number is
 * associated with the preceding year, `0` will be returned.
 *
 * To obtain the week number of the week-based year, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
fun OffsetDateTime.weekOfYear(settings: WeekSettings): Int = dateTime.weekOfYear(settings)

/**
 * The week-based year used in the ISO
 * [week date system](https://en.wikipedia.org/wiki/ISO_week_date). This differs from the regular ISO
 * year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
val OffsetDateTime.weekBasedYear: Int
  inline get() = dateTime.weekBasedYear

/**
 * The week-based year according to the week definition in [settings]. This differs from the regular
 * ISO year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
fun OffsetDateTime.weekBasedYear(settings: WeekSettings): Int = dateTime.weekBasedYear(settings)

/**
 * The week number used in the ISO [week date system](https://en.wikipedia.org/wiki/ISO_week_date).
 *
 * @see weekBasedYear
 */
val OffsetDateTime.weekOfWeekBasedYear: Int
  inline get() = dateTime.weekOfWeekBasedYear

/**
 * The week number of the week-based year according to the week definition in [settings].
 *
 * @see weekBasedYear
 */
fun OffsetDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int =
    dateTime.weekOfWeekBasedYear(settings)

/**
 * The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks.
 */
val OffsetDateTime.lengthOfWeekBasedYear: IntWeeks
  inline get() = dateTime.lengthOfWeekBasedYear

/**
 * Checks if this date-time falls within a leap year.
 */
val ZonedDateTime.isInLeapYear: Boolean
  inline get() = dateTime.isInLeapYear

/**
 * Checks if this date-time falls within February 29.
 */
val ZonedDateTime.isInLeapDay: Boolean
  inline get() = date.isLeapDay

/**
 * The length of this date-time's month in days.
 */
val ZonedDateTime.lengthOfMonth: IntDays
  inline get() = dateTime.lengthOfMonth

/**
 * The length of this date-time's year in days.
 */
val ZonedDateTime.lengthOfYear: IntDays
  inline get() = dateTime.lengthOfYear

/**
 * The week of the month (0-5) according to the ISO definition.
 */
val ZonedDateTime.weekOfMonth: Int
  inline get() = dateTime.weekOfMonth

/**
 * The week of the month (0-5) according to the week definition in [settings].
 */
fun ZonedDateTime.weekOfMonth(settings: WeekSettings): Int = dateTime.weekOfMonth(settings)

/**
 * The week of the year according to the ISO week definition. If the week number is associated with
 * the preceding year, `0` will be returned.
 *
 * To obtain the week number used in the ISO week date system, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
val ZonedDateTime.weekOfYear: Int
  inline get() = dateTime.weekOfYear

/**
 * The week of the year according to the week definition in [settings]. If the week number is
 * associated with the preceding year, `0` will be returned.
 *
 * To obtain the week number of the week-based year, use [weekOfWeekBasedYear] instead.
 *
 * @see weekOfWeekBasedYear
 */
fun ZonedDateTime.weekOfYear(settings: WeekSettings): Int = dateTime.weekOfYear(settings)

/**
 * The week-based year used in the ISO
 * [week date system](https://en.wikipedia.org/wiki/ISO_week_date). This differs from the regular ISO
 * year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
val ZonedDateTime.weekBasedYear: Int
  inline get() = dateTime.weekBasedYear

/**
 * The week-based year according to the week definition in [settings]. This differs from the regular
 * ISO year when the week number falls in the preceding or following year.
 *
 * @see weekOfWeekBasedYear
 */
fun ZonedDateTime.weekBasedYear(settings: WeekSettings): Int = dateTime.weekBasedYear(settings)

/**
 * The week number used in the ISO [week date system](https://en.wikipedia.org/wiki/ISO_week_date).
 *
 * @see weekBasedYear
 */
val ZonedDateTime.weekOfWeekBasedYear: Int
  inline get() = dateTime.weekOfWeekBasedYear

/**
 * The week number of the week-based year according to the week definition in [settings].
 *
 * @see weekBasedYear
 */
fun ZonedDateTime.weekOfWeekBasedYear(settings: WeekSettings): Int =
    dateTime.weekOfWeekBasedYear(settings)

/**
 * The length of the ISO week-based year that this date-time falls in, either 52 or 53 weeks.
 */
val ZonedDateTime.lengthOfWeekBasedYear: IntWeeks
  inline get() = dateTime.lengthOfWeekBasedYear
