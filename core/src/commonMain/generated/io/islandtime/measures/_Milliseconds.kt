//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("MillisecondsKt")

package io.islandtime.measures

import io.islandtime.internal.MICROSECONDS_PER_MILLISECOND
import io.islandtime.internal.MILLISECONDS_PER_DAY
import io.islandtime.internal.MILLISECONDS_PER_HOUR
import io.islandtime.internal.MILLISECONDS_PER_MINUTE
import io.islandtime.internal.MILLISECONDS_PER_SECOND
import io.islandtime.internal.NANOSECONDS_PER_MILLISECOND
import io.islandtime.internal.timesExact
import io.islandtime.internal.toZeroPaddedString
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntMilliseconds(
  val value: Int
) : Comparable<IntMilliseconds> {
  val inNanoseconds: LongNanoseconds
    get() = (this.value.toLong() * NANOSECONDS_PER_MILLISECOND).nanoseconds

  val inMicroseconds: LongMicroseconds
    get() = (this.value.toLong() * MICROSECONDS_PER_MILLISECOND).microseconds

  val inSeconds: IntSeconds
    get() = (this.value / MILLISECONDS_PER_SECOND).seconds

  val inMinutes: IntMinutes
    get() = (this.value / MILLISECONDS_PER_MINUTE).minutes

  val inHours: IntHours
    get() = (this.value / MILLISECONDS_PER_HOUR).hours

  val inDays: IntDays
    get() = (this.value / MILLISECONDS_PER_DAY).days

  fun isZero(): Boolean = value == 0

  val inSeconds: IntSeconds
    get() = (this.value / MILLISECONDS_PER_SECOND).seconds

  val inMicroseconds: LongMicroseconds
    get() = (this.value.toLong() * MILLISECONDS_PER_MICROSECOND).microseconds

  fun isPositive(): Boolean = value > 0

  override fun compareTo(other: IntMilliseconds): Int = value.compareTo(other.value)

  override fun toString(): String = if (isZero()) {
      "MILLISECONDS.isoPeriodZeroString"
  } else {
      buildString {
          val absValue = value.absoluteValue
          val wholePart = absValue / 1000
          val fractionalPart = absValue % 1000
          if (isNegative) { append('-') }
          append("PT")
          append(wholePart)
          if (fractionalPart != 0) {
              append('.')
              append(fractionalPart.toZeroPaddedString(3).dropLastWhile { it == '0' })
          }
          append('S')
      }
  }
  companion object {
    val MIN: IntMilliseconds = IntMilliseconds(Int.MIN_VALUE)

    val MAX: IntMilliseconds = IntMilliseconds(Int.MAX_VALUE)
  }
}

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongMilliseconds(
  val value: Long
) : Comparable<LongMilliseconds> {
  val inNanoseconds: LongNanoseconds
    get() = (this.value * NANOSECONDS_PER_MILLISECOND).nanoseconds

  val inMicroseconds: LongMicroseconds
    get() = (this.value * MICROSECONDS_PER_MILLISECOND).microseconds

  val inSeconds: LongSeconds
    get() = (this.value / MILLISECONDS_PER_SECOND).seconds

  val inMinutes: LongMinutes
    get() = (this.value / MILLISECONDS_PER_MINUTE).minutes

  val inHours: LongHours
    get() = (this.value / MILLISECONDS_PER_HOUR).hours

  val inDays: LongDays
    get() = (this.value / MILLISECONDS_PER_DAY).days

  val inHours: LongHours
    get() = (this.value / MILLISECONDS_PER_HOUR).hours

  val inMinutes: LongMinutes
    get() = (this.value / MILLISECONDS_PER_MINUTE).minutes

  fun isZero(): Boolean = value == 0L

  fun isNegative(): Boolean = value < 0L

  fun isPositive(): Boolean = value > 0L

  override fun compareTo(other: LongMilliseconds): Int = value.compareTo(other.value)

  override fun toString(): String = if (isZero()) {
      "MILLISECONDS.isoPeriodZeroString"
  } else {
      buildString {
          val absValue = value.absoluteValue
          val wholePart = absValue / 1000
          val fractionalPart = (absValue % 1000).toInt()
          if (isNegative) { append('-') }
          append("PT")
          append(wholePart)
          if (fractionalPart != 0) {
              append('.')
              append(fractionalPart.toZeroPaddedString(3).dropLastWhile { it == '0' })
          }
          append('S')
      }
  }
  fun inNanosecondsExact() = (this.value timesExact NANOSECONDS_PER_MILLISECOND).nanoseconds

  fun inMicrosecondsExact() = (this.value timesExact MICROSECONDS_PER_MILLISECOND).microseconds

  companion object {
    val MIN: LongMilliseconds = LongMilliseconds(Long.MIN_VALUE)

    val MAX: LongMilliseconds = LongMilliseconds(Long.MAX_VALUE)
  }
}

val Int.milliseconds: IntMilliseconds
  get() = IntMilliseconds(this)

val Long.milliseconds: LongMilliseconds
  get() = LongMilliseconds(this)
