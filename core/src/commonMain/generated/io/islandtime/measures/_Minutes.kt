//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("MinutesKt")

package io.islandtime.measures

import io.islandtime.internal.MICROSECONDS_PER_MINUTE
import io.islandtime.internal.MILLISECONDS_PER_MINUTE
import io.islandtime.internal.MINUTES_PER_DAY
import io.islandtime.internal.MINUTES_PER_HOUR
import io.islandtime.internal.NANOSECONDS_PER_MINUTE
import io.islandtime.internal.SECONDS_PER_MINUTE
import io.islandtime.internal.timesExact
import io.islandtime.internal.toIntExact
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

/**
 * A number of minutes.
 */
@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntMinutes(
  /**
   * The underlying value.
   */
  val value: Int
) : Comparable<IntMinutes> {
  /**
   * Get the absolute value.
   */
  val absoluteValue: IntMinutes
    get() = IntMinutes(value.absoluteValue)
  /**
   * Convert to nanoseconds.
   */
  val inNanoseconds: LongNanoseconds
    get() = (value.toLong() * NANOSECONDS_PER_MINUTE).nanoseconds

  /**
   * Convert to microseconds.
   */
  val inMicroseconds: LongMicroseconds
    get() = (value.toLong() * MICROSECONDS_PER_MINUTE).microseconds

  /**
   * Convert to milliseconds.
   */
  val inMilliseconds: LongMilliseconds
    get() = (value.toLong() * MILLISECONDS_PER_MINUTE).milliseconds

  /**
   * Convert to seconds.
   */
  val inSeconds: IntSeconds
    get() = (value * SECONDS_PER_MINUTE).seconds

  /**
   * Convert to whole hours.
   */
  val inHours: IntHours
    get() = (value / MINUTES_PER_HOUR).hours

  /**
   * Convert to whole days.
   */
  val inDays: IntDays
    get() = (value / MINUTES_PER_DAY).days

  /**
   * Is this duration zero?
   */
  fun isZero(): Boolean = value == 0

  /**
   * Is this duration negative?
   */
  fun isNegative(): Boolean = value < 0

  /**
   * Is this duration positive?
   */
  fun isPositive(): Boolean = value > 0

  override fun compareTo(other: IntMinutes): Int = value.compareTo(other.value)

  /**
   * Convert to an ISO-8601 time interval representation.
   */
  override fun toString(): String = if (isZero()) {
      "PT0M"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("PT")
          append(value.absoluteValue)
          append('M')
      }
  }
  operator fun unaryMinus() = IntMinutes(-value)

  operator fun times(scalar: Int) = IntMinutes(value * scalar)

  operator fun times(scalar: Long) = this.toLong() * scalar

  operator fun div(scalar: Int) = IntMinutes(value / scalar)

  operator fun div(scalar: Long) = this.toLong() / scalar

  operator fun rem(scalar: Int) = IntMinutes(value % scalar)

  operator fun rem(scalar: Long) = this.toLong() % scalar

  operator fun plus(nanoseconds: IntNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: IntNanoseconds) = this.inNanoseconds - nanoseconds

  operator fun plus(nanoseconds: LongNanoseconds) = this.toLong().inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: LongNanoseconds) = this.toLong().inNanoseconds - nanoseconds

  operator fun plus(microseconds: IntMicroseconds) = this.inMicroseconds + microseconds

  operator fun minus(microseconds: IntMicroseconds) = this.inMicroseconds - microseconds

  operator fun plus(microseconds: LongMicroseconds) = this.toLong().inMicroseconds + microseconds

  operator fun minus(microseconds: LongMicroseconds) = this.toLong().inMicroseconds - microseconds

  operator fun plus(milliseconds: IntMilliseconds) = this.inMilliseconds + milliseconds

  operator fun minus(milliseconds: IntMilliseconds) = this.inMilliseconds - milliseconds

  operator fun plus(milliseconds: LongMilliseconds) = this.toLong().inMilliseconds + milliseconds

  operator fun minus(milliseconds: LongMilliseconds) = this.toLong().inMilliseconds - milliseconds

  operator fun plus(seconds: IntSeconds) = this.inSeconds + seconds

  operator fun minus(seconds: IntSeconds) = this.inSeconds - seconds

  operator fun plus(seconds: LongSeconds) = this.toLong().inSeconds + seconds

  operator fun minus(seconds: LongSeconds) = this.toLong().inSeconds - seconds

  operator fun plus(minutes: IntMinutes) = IntMinutes(value + minutes.value)

  operator fun minus(minutes: IntMinutes) = IntMinutes(value - minutes.value)

  operator fun plus(minutes: LongMinutes) = LongMinutes(value.toLong() + minutes.value)

  operator fun minus(minutes: LongMinutes) = LongMinutes(value.toLong() - minutes.value)

  operator fun plus(hours: IntHours) = this + hours.inMinutes

  operator fun minus(hours: IntHours) = this - hours.inMinutes

  operator fun plus(hours: LongHours) = this.toLong() + hours.inMinutes

  operator fun minus(hours: LongHours) = this.toLong() - hours.inMinutes

  operator fun plus(days: IntDays) = this + days.inMinutes

  operator fun minus(days: IntDays) = this - days.inMinutes

  operator fun plus(days: LongDays) = this.toLong() + days.inMinutes

  operator fun minus(days: LongDays) = this.toLong() - days.inMinutes

  /**
   * Convert to nanoseconds.
   */
  fun inNanosecondsExact() = (value.toLong() timesExact NANOSECONDS_PER_MINUTE).nanoseconds

  /**
   * Convert to seconds.
   */
  fun inSecondsExact() = (value timesExact SECONDS_PER_MINUTE).seconds

  inline fun <T> toComponents(action: (hours: IntHours, minutes: IntMinutes) -> T): T {
    val hours = this.inHours
    val minutes = (this - hours)
    return action(hours, minutes)
  }

  inline fun <T> toComponents(action: (
    days: IntDays,
    hours: IntHours,
    minutes: IntMinutes
  ) -> T): T {
    val days = this.inDays
    val hours = (this - days).inHours
    val minutes = (this - days - hours)
    return action(days, hours, minutes)
  }

  fun toLong() = LongMinutes(value.toLong())

  companion object {
    /**
     * The smallest supported value.
     */
    val MIN: IntMinutes = IntMinutes(Int.MIN_VALUE)

    /**
     * The largest supported value.
     */
    val MAX: IntMinutes = IntMinutes(Int.MAX_VALUE)
  }
}

/**
 * Convert to [IntMinutes].
 */
val Int.minutes: IntMinutes
  get() = IntMinutes(this)

/**
 * A number of minutes.
 */
@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongMinutes(
  /**
   * The underlying value.
   */
  val value: Long
) : Comparable<LongMinutes> {
  /**
   * Get the absolute value.
   */
  val absoluteValue: LongMinutes
    get() = LongMinutes(value.absoluteValue)
  /**
   * Convert to nanoseconds.
   */
  val inNanoseconds: LongNanoseconds
    get() = (value * NANOSECONDS_PER_MINUTE).nanoseconds

  /**
   * Convert to microseconds.
   */
  val inMicroseconds: LongMicroseconds
    get() = (value * MICROSECONDS_PER_MINUTE).microseconds

  /**
   * Convert to milliseconds.
   */
  val inMilliseconds: LongMilliseconds
    get() = (value * MILLISECONDS_PER_MINUTE).milliseconds

  /**
   * Convert to seconds.
   */
  val inSeconds: LongSeconds
    get() = (value * SECONDS_PER_MINUTE).seconds

  /**
   * Convert to whole hours.
   */
  val inHours: LongHours
    get() = (value / MINUTES_PER_HOUR).hours

  /**
   * Convert to whole days.
   */
  val inDays: LongDays
    get() = (value / MINUTES_PER_DAY).days

  /**
   * Is this duration zero?
   */
  fun isZero(): Boolean = value == 0L

  /**
   * Is this duration negative?
   */
  fun isNegative(): Boolean = value < 0L

  /**
   * Is this duration positive?
   */
  fun isPositive(): Boolean = value > 0L

  override fun compareTo(other: LongMinutes): Int = value.compareTo(other.value)

  /**
   * Convert to an ISO-8601 time interval representation.
   */
  override fun toString(): String = if (isZero()) {
      "PT0M"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("PT")
          append(value.absoluteValue)
          append('M')
      }
  }
  operator fun unaryMinus() = LongMinutes(-value)

  operator fun times(scalar: Int) = LongMinutes(value * scalar)

  operator fun times(scalar: Long) = LongMinutes(value * scalar)

  operator fun div(scalar: Int) = LongMinutes(value / scalar)

  operator fun div(scalar: Long) = LongMinutes(value / scalar)

  operator fun rem(scalar: Int) = LongMinutes(value % scalar)

  operator fun rem(scalar: Long) = LongMinutes(value % scalar)

  operator fun plus(nanoseconds: IntNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: IntNanoseconds) = this.inNanoseconds - nanoseconds

  operator fun plus(nanoseconds: LongNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: LongNanoseconds) = this.inNanoseconds - nanoseconds

  operator fun plus(microseconds: IntMicroseconds) = this.inMicroseconds + microseconds

  operator fun minus(microseconds: IntMicroseconds) = this.inMicroseconds - microseconds

  operator fun plus(microseconds: LongMicroseconds) = this.inMicroseconds + microseconds

  operator fun minus(microseconds: LongMicroseconds) = this.inMicroseconds - microseconds

  operator fun plus(milliseconds: IntMilliseconds) = this.inMilliseconds + milliseconds

  operator fun minus(milliseconds: IntMilliseconds) = this.inMilliseconds - milliseconds

  operator fun plus(milliseconds: LongMilliseconds) = this.inMilliseconds + milliseconds

  operator fun minus(milliseconds: LongMilliseconds) = this.inMilliseconds - milliseconds

  operator fun plus(seconds: IntSeconds) = this.inSeconds + seconds

  operator fun minus(seconds: IntSeconds) = this.inSeconds - seconds

  operator fun plus(seconds: LongSeconds) = this.inSeconds + seconds

  operator fun minus(seconds: LongSeconds) = this.inSeconds - seconds

  operator fun plus(minutes: IntMinutes) = LongMinutes(value + minutes.value)

  operator fun minus(minutes: IntMinutes) = LongMinutes(value - minutes.value)

  operator fun plus(minutes: LongMinutes) = LongMinutes(value + minutes.value)

  operator fun minus(minutes: LongMinutes) = LongMinutes(value - minutes.value)

  operator fun plus(hours: IntHours) = this + hours.inMinutes

  operator fun minus(hours: IntHours) = this - hours.inMinutes

  operator fun plus(hours: LongHours) = this + hours.inMinutes

  operator fun minus(hours: LongHours) = this - hours.inMinutes

  operator fun plus(days: IntDays) = this + days.inMinutes

  operator fun minus(days: IntDays) = this - days.inMinutes

  operator fun plus(days: LongDays) = this + days.inMinutes

  operator fun minus(days: LongDays) = this - days.inMinutes

  /**
   * Convert to nanoseconds.
   */
  fun inNanosecondsExact() = (value timesExact NANOSECONDS_PER_MINUTE).nanoseconds

  /**
   * Convert to microseconds.
   */
  fun inMicrosecondsExact() = (value timesExact MICROSECONDS_PER_MINUTE).microseconds

  /**
   * Convert to milliseconds.
   */
  fun inMillisecondsExact() = (value timesExact MILLISECONDS_PER_MINUTE).milliseconds

  /**
   * Convert to seconds.
   */
  fun inSecondsExact() = (value timesExact SECONDS_PER_MINUTE).seconds

  inline fun <T> toComponents(action: (hours: LongHours, minutes: IntMinutes) -> T): T {
    val hours = this.inHours
    val minutes = (this - hours).toInt()
    return action(hours, minutes)
  }

  inline fun <T> toComponents(action: (
    days: LongDays,
    hours: IntHours,
    minutes: IntMinutes
  ) -> T): T {
    val days = this.inDays
    val hours = (this - days).toInt().inHours
    val minutes = (this - days - hours).toInt()
    return action(days, hours, minutes)
  }

  fun toInt() = IntMinutes(value.toInt())

  fun toIntExact() = IntMinutes(value.toIntExact())

  companion object {
    /**
     * The smallest supported value.
     */
    val MIN: LongMinutes = LongMinutes(Long.MIN_VALUE)

    /**
     * The largest supported value.
     */
    val MAX: LongMinutes = LongMinutes(Long.MAX_VALUE)
  }
}

/**
 * Convert to [LongMinutes].
 */
val Long.minutes: LongMinutes
  get() = LongMinutes(this)
