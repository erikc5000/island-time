//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("WeeksKt")

package io.islandtime.measures

import io.islandtime.internal.DAYS_PER_WEEK
import io.islandtime.internal.timesExact
import io.islandtime.internal.toIntExact
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntWeeks(
  val value: Int
) : Comparable<IntWeeks> {
  val absoluteValue: IntWeeks
    get() = IntWeeks(value.absoluteValue)
  val inDays: IntDays
    get() = (this.value * DAYS_PER_WEEK).days

  fun isZero(): Boolean = value == 0

  fun isNegative(): Boolean = value < 0

  fun isPositive(): Boolean = value > 0

  override fun compareTo(other: IntWeeks): Int = value.compareTo(other.value)

  override fun toString(): String = if (isZero()) {
      "P0W"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue)
          append('W')
      }
  }
  fun inDaysExact() = (this.value timesExact DAYS_PER_WEEK).days

  operator fun unaryMinus() = IntWeeks(-value)

  operator fun plus(days: IntDays) = this.inDays + days

  operator fun plus(days: LongDays) = this.toLong().inDays + days

  operator fun plus(weeks: IntWeeks) = IntWeeks(this.value + weeks.value)

  operator fun plus(weeks: LongWeeks) = LongWeeks(this.value.toLong() + weeks.value)

  operator fun minus(days: IntDays) = plus(-days)

  operator fun minus(days: LongDays) = plus(-days)

  operator fun minus(weeks: IntWeeks) = plus(-weeks)

  operator fun minus(weeks: LongWeeks) = plus(-weeks)

  operator fun times(scalar: Int) = IntWeeks(this.value * scalar)

  operator fun times(scalar: Long) = this.toLong() * scalar

  operator fun div(scalar: Int) = IntWeeks(this.value / scalar)

  operator fun div(scalar: Long) = this.toLong() / scalar

  operator fun rem(scalar: Int) = IntWeeks(this.value % scalar)

  operator fun rem(scalar: Long) = this.toLong() % scalar

  fun toLong() = LongWeeks(this.value.toLong())

  companion object {
    val MIN: IntWeeks = IntWeeks(Int.MIN_VALUE)

    val MAX: IntWeeks = IntWeeks(Int.MAX_VALUE)
  }
}

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongWeeks(
  val value: Long
) : Comparable<LongWeeks> {
  val absoluteValue: LongWeeks
    get() = LongWeeks(value.absoluteValue)
  val inDays: LongDays
    get() = (this.value * DAYS_PER_WEEK).days

  fun isZero(): Boolean = value == 0L

  fun isNegative(): Boolean = value < 0L

  fun isPositive(): Boolean = value > 0L

  override fun compareTo(other: LongWeeks): Int = value.compareTo(other.value)

  override fun toString(): String = if (isZero()) {
      "P0W"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue)
          append('W')
      }
  }
  fun inDaysExact() = (this.value timesExact DAYS_PER_WEEK).days

  operator fun unaryMinus() = LongWeeks(-value)

  operator fun plus(days: IntDays) = this.inDays + days

  operator fun plus(days: LongDays) = this.inDays + days

  operator fun plus(weeks: IntWeeks) = LongWeeks(this.value + weeks.value)

  operator fun plus(weeks: LongWeeks) = LongWeeks(this.value + weeks.value)

  operator fun minus(days: IntDays) = plus(-days)

  operator fun minus(days: LongDays) = plus(-days)

  operator fun minus(weeks: IntWeeks) = plus(-weeks)

  operator fun minus(weeks: LongWeeks) = plus(-weeks)

  operator fun times(scalar: Int) = LongWeeks(this.value * scalar)

  operator fun times(scalar: Long) = LongWeeks(this.value * scalar)

  operator fun div(scalar: Int) = LongWeeks(this.value / scalar)

  operator fun div(scalar: Long) = LongWeeks(this.value / scalar)

  operator fun rem(scalar: Int) = LongWeeks(this.value % scalar)

  operator fun rem(scalar: Long) = LongWeeks(this.value % scalar)

  fun toInt() = IntWeeks(this.value.toInt())

  fun toIntExact() = IntWeeks(this.value.toIntExact())

  companion object {
    val MIN: LongWeeks = LongWeeks(Long.MIN_VALUE)

    val MAX: LongWeeks = LongWeeks(Long.MAX_VALUE)
  }
}

val Int.weeks: IntWeeks
  get() = IntWeeks(this)

val Long.weeks: LongWeeks
  get() = LongWeeks(this)
