//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("DaysKt")

package io.islandtime.measures

import io.islandtime.internal.DAYS_PER_WEEK
import io.islandtime.internal.HOURS_PER_DAY
import io.islandtime.internal.MICROSECONDS_PER_DAY
import io.islandtime.internal.MILLISECONDS_PER_DAY
import io.islandtime.internal.MINUTES_PER_DAY
import io.islandtime.internal.NANOSECONDS_PER_DAY
import io.islandtime.internal.SECONDS_PER_DAY
import io.islandtime.internal.timesExact
import io.islandtime.internal.toIntExact
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

/**
 * A number of days.
 */
@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntDays(
  /**
   * The underlying value.
   */
  val value: Int
) : Comparable<IntDays> {
  /**
   * Get the absolute value.
   */
  val absoluteValue: IntDays
    get() = IntDays(value.absoluteValue)
  /**
   * Convert to nanoseconds.
   */
  val inNanoseconds: LongNanoseconds
    get() = (value.toLong() * NANOSECONDS_PER_DAY).nanoseconds

  /**
   * Convert to microseconds.
   */
  val inMicroseconds: LongMicroseconds
    get() = (value.toLong() * MICROSECONDS_PER_DAY).microseconds

  /**
   * Convert to milliseconds.
   */
  val inMilliseconds: LongMilliseconds
    get() = (value.toLong() * MILLISECONDS_PER_DAY).milliseconds

  /**
   * Convert to seconds.
   */
  val inSeconds: IntSeconds
    get() = (value * SECONDS_PER_DAY).seconds

  /**
   * Convert to minutes.
   */
  val inMinutes: IntMinutes
    get() = (value * MINUTES_PER_DAY).minutes

  /**
   * Convert to hours.
   */
  val inHours: IntHours
    get() = (value * HOURS_PER_DAY).hours

  /**
   * Convert to whole weeks.
   */
  val inWeeks: IntWeeks
    get() = (value / DAYS_PER_WEEK).weeks

  /**
   * Is this duration zero?
   */
  fun isZero(): Boolean = value == 0

  /**
   * Is this duration negative?
   */
  fun isNegative(): Boolean = value < 0

  /**
   * Is this duration positive?
   */
  fun isPositive(): Boolean = value > 0

  override fun compareTo(other: IntDays): Int = value.compareTo(other.value)

  /**
   * Convert to an ISO-8601 time interval representation.
   */
  override fun toString(): String = if (isZero()) {
      "P0D"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue)
          append('D')
      }
  }
  operator fun unaryMinus() = IntDays(-value)

  operator fun times(scalar: Int) = IntDays(value * scalar)

  operator fun times(scalar: Long) = this.toLong() * scalar

  operator fun div(scalar: Int) = IntDays(value / scalar)

  operator fun div(scalar: Long) = this.toLong() / scalar

  operator fun rem(scalar: Int) = IntDays(value % scalar)

  operator fun rem(scalar: Long) = this.toLong() % scalar

  operator fun plus(nanoseconds: IntNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: IntNanoseconds) = this.inNanoseconds - nanoseconds

  operator fun plus(nanoseconds: LongNanoseconds) = this.toLong().inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: LongNanoseconds) = this.toLong().inNanoseconds - nanoseconds

  operator fun plus(microseconds: IntMicroseconds) = this.inMicroseconds + microseconds

  operator fun minus(microseconds: IntMicroseconds) = this.inMicroseconds - microseconds

  operator fun plus(microseconds: LongMicroseconds) = this.toLong().inMicroseconds + microseconds

  operator fun minus(microseconds: LongMicroseconds) = this.toLong().inMicroseconds - microseconds

  operator fun plus(milliseconds: IntMilliseconds) = this.inMilliseconds + milliseconds

  operator fun minus(milliseconds: IntMilliseconds) = this.inMilliseconds - milliseconds

  operator fun plus(milliseconds: LongMilliseconds) = this.toLong().inMilliseconds + milliseconds

  operator fun minus(milliseconds: LongMilliseconds) = this.toLong().inMilliseconds - milliseconds

  operator fun plus(seconds: IntSeconds) = this.inSeconds + seconds

  operator fun minus(seconds: IntSeconds) = this.inSeconds - seconds

  operator fun plus(seconds: LongSeconds) = this.toLong().inSeconds + seconds

  operator fun minus(seconds: LongSeconds) = this.toLong().inSeconds - seconds

  operator fun plus(minutes: IntMinutes) = this.inMinutes + minutes

  operator fun minus(minutes: IntMinutes) = this.inMinutes - minutes

  operator fun plus(minutes: LongMinutes) = this.toLong().inMinutes + minutes

  operator fun minus(minutes: LongMinutes) = this.toLong().inMinutes - minutes

  operator fun plus(hours: IntHours) = this.inHours + hours

  operator fun minus(hours: IntHours) = this.inHours - hours

  operator fun plus(hours: LongHours) = this.toLong().inHours + hours

  operator fun minus(hours: LongHours) = this.toLong().inHours - hours

  operator fun plus(days: IntDays) = IntDays(value + days.value)

  operator fun minus(days: IntDays) = IntDays(value - days.value)

  operator fun plus(days: LongDays) = LongDays(value.toLong() + days.value)

  operator fun minus(days: LongDays) = LongDays(value.toLong() - days.value)

  operator fun plus(weeks: IntWeeks) = this + weeks.inDays

  operator fun minus(weeks: IntWeeks) = this - weeks.inDays

  operator fun plus(weeks: LongWeeks) = this.toLong() + weeks.inDays

  operator fun minus(weeks: LongWeeks) = this.toLong() - weeks.inDays

  /**
   * Convert to nanoseconds.
   */
  fun inNanosecondsExact() = (value.toLong() timesExact NANOSECONDS_PER_DAY).nanoseconds

  /**
   * Convert to microseconds.
   */
  fun inMicrosecondsExact() = (value.toLong() timesExact MICROSECONDS_PER_DAY).microseconds

  /**
   * Convert to seconds.
   */
  fun inSecondsExact() = (value timesExact SECONDS_PER_DAY).seconds

  /**
   * Convert to minutes.
   */
  fun inMinutesExact() = (value timesExact MINUTES_PER_DAY).minutes

  /**
   * Convert to hours.
   */
  fun inHoursExact() = (value timesExact HOURS_PER_DAY).hours

  inline fun <T> toComponents(action: (weeks: IntWeeks, days: IntDays) -> T): T {
    val weeks = this.inWeeks
    val days = (this - weeks)
    return action(weeks, days)
  }

  fun toLong() = LongDays(value.toLong())

  companion object {
    /**
     * The smallest supported value.
     */
    val MIN: IntDays = IntDays(Int.MIN_VALUE)

    /**
     * The largest supported value.
     */
    val MAX: IntDays = IntDays(Int.MAX_VALUE)
  }
}

/**
 * Convert to [IntDays].
 */
val Int.days: IntDays
  get() = IntDays(this)

/**
 * A number of days.
 */
@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongDays(
  /**
   * The underlying value.
   */
  val value: Long
) : Comparable<LongDays> {
  /**
   * Get the absolute value.
   */
  val absoluteValue: LongDays
    get() = LongDays(value.absoluteValue)
  /**
   * Convert to nanoseconds.
   */
  val inNanoseconds: LongNanoseconds
    get() = (value * NANOSECONDS_PER_DAY).nanoseconds

  /**
   * Convert to microseconds.
   */
  val inMicroseconds: LongMicroseconds
    get() = (value * MICROSECONDS_PER_DAY).microseconds

  /**
   * Convert to milliseconds.
   */
  val inMilliseconds: LongMilliseconds
    get() = (value * MILLISECONDS_PER_DAY).milliseconds

  /**
   * Convert to seconds.
   */
  val inSeconds: LongSeconds
    get() = (value * SECONDS_PER_DAY).seconds

  /**
   * Convert to minutes.
   */
  val inMinutes: LongMinutes
    get() = (value * MINUTES_PER_DAY).minutes

  /**
   * Convert to hours.
   */
  val inHours: LongHours
    get() = (value * HOURS_PER_DAY).hours

  /**
   * Convert to whole weeks.
   */
  val inWeeks: LongWeeks
    get() = (value / DAYS_PER_WEEK).weeks

  /**
   * Is this duration zero?
   */
  fun isZero(): Boolean = value == 0L

  /**
   * Is this duration negative?
   */
  fun isNegative(): Boolean = value < 0L

  /**
   * Is this duration positive?
   */
  fun isPositive(): Boolean = value > 0L

  override fun compareTo(other: LongDays): Int = value.compareTo(other.value)

  /**
   * Convert to an ISO-8601 time interval representation.
   */
  override fun toString(): String = if (isZero()) {
      "P0D"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue)
          append('D')
      }
  }
  operator fun unaryMinus() = LongDays(-value)

  operator fun times(scalar: Int) = LongDays(value * scalar)

  operator fun times(scalar: Long) = LongDays(value * scalar)

  operator fun div(scalar: Int) = LongDays(value / scalar)

  operator fun div(scalar: Long) = LongDays(value / scalar)

  operator fun rem(scalar: Int) = LongDays(value % scalar)

  operator fun rem(scalar: Long) = LongDays(value % scalar)

  operator fun plus(nanoseconds: IntNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: IntNanoseconds) = this.inNanoseconds - nanoseconds

  operator fun plus(nanoseconds: LongNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun minus(nanoseconds: LongNanoseconds) = this.inNanoseconds - nanoseconds

  operator fun plus(microseconds: IntMicroseconds) = this.inMicroseconds + microseconds

  operator fun minus(microseconds: IntMicroseconds) = this.inMicroseconds - microseconds

  operator fun plus(microseconds: LongMicroseconds) = this.inMicroseconds + microseconds

  operator fun minus(microseconds: LongMicroseconds) = this.inMicroseconds - microseconds

  operator fun plus(milliseconds: IntMilliseconds) = this.inMilliseconds + milliseconds

  operator fun minus(milliseconds: IntMilliseconds) = this.inMilliseconds - milliseconds

  operator fun plus(milliseconds: LongMilliseconds) = this.inMilliseconds + milliseconds

  operator fun minus(milliseconds: LongMilliseconds) = this.inMilliseconds - milliseconds

  operator fun plus(seconds: IntSeconds) = this.inSeconds + seconds

  operator fun minus(seconds: IntSeconds) = this.inSeconds - seconds

  operator fun plus(seconds: LongSeconds) = this.inSeconds + seconds

  operator fun minus(seconds: LongSeconds) = this.inSeconds - seconds

  operator fun plus(minutes: IntMinutes) = this.inMinutes + minutes

  operator fun minus(minutes: IntMinutes) = this.inMinutes - minutes

  operator fun plus(minutes: LongMinutes) = this.inMinutes + minutes

  operator fun minus(minutes: LongMinutes) = this.inMinutes - minutes

  operator fun plus(hours: IntHours) = this.inHours + hours

  operator fun minus(hours: IntHours) = this.inHours - hours

  operator fun plus(hours: LongHours) = this.inHours + hours

  operator fun minus(hours: LongHours) = this.inHours - hours

  operator fun plus(days: IntDays) = LongDays(value + days.value)

  operator fun minus(days: IntDays) = LongDays(value - days.value)

  operator fun plus(days: LongDays) = LongDays(value + days.value)

  operator fun minus(days: LongDays) = LongDays(value - days.value)

  operator fun plus(weeks: IntWeeks) = this + weeks.inDays

  operator fun minus(weeks: IntWeeks) = this - weeks.inDays

  operator fun plus(weeks: LongWeeks) = this + weeks.inDays

  operator fun minus(weeks: LongWeeks) = this - weeks.inDays

  /**
   * Convert to nanoseconds.
   */
  fun inNanosecondsExact() = (value timesExact NANOSECONDS_PER_DAY).nanoseconds

  /**
   * Convert to microseconds.
   */
  fun inMicrosecondsExact() = (value timesExact MICROSECONDS_PER_DAY).microseconds

  /**
   * Convert to milliseconds.
   */
  fun inMillisecondsExact() = (value timesExact MILLISECONDS_PER_DAY).milliseconds

  /**
   * Convert to seconds.
   */
  fun inSecondsExact() = (value timesExact SECONDS_PER_DAY).seconds

  /**
   * Convert to minutes.
   */
  fun inMinutesExact() = (value timesExact MINUTES_PER_DAY).minutes

  /**
   * Convert to hours.
   */
  fun inHoursExact() = (value timesExact HOURS_PER_DAY).hours

  inline fun <T> toComponents(action: (weeks: LongWeeks, days: IntDays) -> T): T {
    val weeks = this.inWeeks
    val days = (this - weeks).toInt()
    return action(weeks, days)
  }

  fun toInt() = IntDays(value.toInt())

  fun toIntExact() = IntDays(value.toIntExact())

  companion object {
    /**
     * The smallest supported value.
     */
    val MIN: LongDays = LongDays(Long.MIN_VALUE)

    /**
     * The largest supported value.
     */
    val MAX: LongDays = LongDays(Long.MAX_VALUE)
  }
}

/**
 * Convert to [LongDays].
 */
val Long.days: LongDays
  get() = LongDays(this)
