//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("CenturiesKt")

package io.islandtime.measures

import dev.erikchristensen.javamath2kmp.absExact
import dev.erikchristensen.javamath2kmp.minusExact
import dev.erikchristensen.javamath2kmp.negateExact
import dev.erikchristensen.javamath2kmp.plusExact
import dev.erikchristensen.javamath2kmp.timesExact
import dev.erikchristensen.javamath2kmp.toIntExact
import io.islandtime.`internal`.DECADES_PER_CENTURY
import io.islandtime.`internal`.MONTHS_PER_CENTURY
import io.islandtime.`internal`.YEARS_PER_CENTURY
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.PublishedApi
import kotlin.String
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

/**
 * A number of centuries.
 */
@JvmInline
public value class IntCenturies(
  /**
   * The underlying value.
   */
  public val `value`: Int
) : Comparable<IntCenturies> {
  /**
   * The absolute value of this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public val absoluteValue: IntCenturies
    get() = IntCenturies(absExact(`value`))

  /**
   * Converts this duration to months.
   * @throws ArithmeticException if overflow occurs
   */
  public val inMonths: IntMonths
    get() = (`value` timesExact MONTHS_PER_CENTURY).months

  /**
   * Converts this duration to months without checking for overflow.
   */
  internal val inMonthsUnchecked: IntMonths
    get() = (`value` * MONTHS_PER_CENTURY).months

  /**
   * Converts this duration to years.
   * @throws ArithmeticException if overflow occurs
   */
  public val inYears: IntYears
    get() = (`value` timesExact YEARS_PER_CENTURY).years

  /**
   * Converts this duration to years without checking for overflow.
   */
  internal val inYearsUnchecked: IntYears
    get() = (`value` * YEARS_PER_CENTURY).years

  /**
   * Converts this duration to decades.
   * @throws ArithmeticException if overflow occurs
   */
  public val inDecades: IntDecades
    get() = (`value` timesExact DECADES_PER_CENTURY).decades

  /**
   * Converts this duration to decades without checking for overflow.
   */
  internal val inDecadesUnchecked: IntDecades
    get() = (`value` * DECADES_PER_CENTURY).decades

  /**
   * Checks if this duration is zero.
   */
  public fun isZero(): Boolean = `value` == 0

  /**
   * Checks if this duration is negative.
   */
  public fun isNegative(): Boolean = `value` < 0

  /**
   * Checks if this duration is positive.
   */
  public fun isPositive(): Boolean = `value` > 0

  public override fun compareTo(other: IntCenturies): Int = `value`.compareTo(other.`value`)

  /**
   * Converts this duration to an ISO-8601 time interval representation.
   */
  public override fun toString(): String {
     return when (`value`) {
       0 -> "P0Y"
       Int.MIN_VALUE -> "-P2147483648Y"
       else -> buildString {
         if (`value` < 0) { append('-') }
         append("P")
         append(`value`.absoluteValue timesExact 100)
         append('Y')
       }
     }
  }

  /**
   * Negates this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun unaryMinus(): IntCenturies = IntCenturies(`value`.negateExact())

  /**
   * Negates this duration without checking for overflow.
   */
  internal fun negateUnchecked(): IntCenturies = IntCenturies(-`value`)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Int): IntCenturies = IntCenturies(`value` timesExact scalar)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Long): LongCenturies = this.toLongCenturies() * scalar

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Int): IntCenturies {
     return if (scalar == -1) {
       -this
     } else {
       IntCenturies(`value` / scalar)
     }
  }

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if the scalar is zero
   */
  public operator fun div(scalar: Long): LongCenturies = this.toLongCenturies() / scalar

  public operator fun rem(scalar: Int): IntCenturies = IntCenturies(`value` % scalar)

  public operator fun rem(scalar: Long): LongCenturies = this.toLongCenturies() % scalar

  public operator fun plus(months: IntMonths): IntMonths = this.inMonths + months

  public operator fun minus(months: IntMonths): IntMonths = this.inMonths - months

  public operator fun plus(months: LongMonths): LongMonths = this.toLongCenturies().inMonths +
      months

  public operator fun minus(months: LongMonths): LongMonths = this.toLongCenturies().inMonths -
      months

  public operator fun plus(years: IntYears): IntYears = this.inYears + years

  public operator fun minus(years: IntYears): IntYears = this.inYears - years

  public operator fun plus(years: LongYears): LongYears = this.toLongCenturies().inYears + years

  public operator fun minus(years: LongYears): LongYears = this.toLongCenturies().inYears - years

  public operator fun plus(decades: IntDecades): IntDecades = this.inDecades + decades

  public operator fun minus(decades: IntDecades): IntDecades = this.inDecades - decades

  public operator fun plus(decades: LongDecades): LongDecades = this.toLongCenturies().inDecades +
      decades

  public operator fun minus(decades: LongDecades): LongDecades = this.toLongCenturies().inDecades -
      decades

  public operator fun plus(centuries: IntCenturies): IntCenturies = IntCenturies(`value` plusExact
      centuries.value)

  public operator fun minus(centuries: IntCenturies): IntCenturies = IntCenturies(`value` minusExact
      centuries.value)

  public operator fun plus(centuries: LongCenturies): LongCenturies =
      LongCenturies(`value`.toLong() plusExact centuries.value)

  public operator fun minus(centuries: LongCenturies): LongCenturies =
      LongCenturies(`value`.toLong() minusExact centuries.value)

  /**
   * Converts this duration to [LongCenturies].
   */
  public fun toLongCenturies(): LongCenturies = LongCenturies(`value`.toLong())

  /**
   * Converts this duration to a `Long` value.
   */
  public fun toLong(): Long = `value`.toLong()

  public companion object {
    /**
     * The smallest supported value.
     */
    public val MIN: IntCenturies = IntCenturies(Int.MIN_VALUE)

    /**
     * The largest supported value.
     */
    public val MAX: IntCenturies = IntCenturies(Int.MAX_VALUE)
  }
}

/**
 * Converts this value to a duration of centuries.
 */
public val Int.centuries: IntCenturies
  get() = IntCenturies(this)

/**
 * Multiplies this value by a duration of centuries.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Int.times(centuries: IntCenturies): IntCenturies = centuries * this

/**
 * Multiplies this value by a duration of centuries.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Long.times(centuries: IntCenturies): LongCenturies = centuries * this

/**
 * A number of centuries.
 */
@JvmInline
public value class LongCenturies(
  /**
   * The underlying value.
   */
  public val `value`: Long
) : Comparable<LongCenturies> {
  /**
   * The absolute value of this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public val absoluteValue: LongCenturies
    get() = LongCenturies(absExact(`value`))

  /**
   * Converts this duration to months.
   * @throws ArithmeticException if overflow occurs
   */
  public val inMonths: LongMonths
    get() = (`value` timesExact MONTHS_PER_CENTURY).months

  /**
   * Converts this duration to months without checking for overflow.
   */
  internal val inMonthsUnchecked: LongMonths
    get() = (`value` * MONTHS_PER_CENTURY).months

  /**
   * Converts this duration to years.
   * @throws ArithmeticException if overflow occurs
   */
  public val inYears: LongYears
    get() = (`value` timesExact YEARS_PER_CENTURY).years

  /**
   * Converts this duration to years without checking for overflow.
   */
  internal val inYearsUnchecked: LongYears
    get() = (`value` * YEARS_PER_CENTURY).years

  /**
   * Converts this duration to decades.
   * @throws ArithmeticException if overflow occurs
   */
  public val inDecades: LongDecades
    get() = (`value` timesExact DECADES_PER_CENTURY).decades

  /**
   * Converts this duration to decades without checking for overflow.
   */
  internal val inDecadesUnchecked: LongDecades
    get() = (`value` * DECADES_PER_CENTURY).decades

  /**
   * Checks if this duration is zero.
   */
  public fun isZero(): Boolean = `value` == 0L

  /**
   * Checks if this duration is negative.
   */
  public fun isNegative(): Boolean = `value` < 0L

  /**
   * Checks if this duration is positive.
   */
  public fun isPositive(): Boolean = `value` > 0L

  public override fun compareTo(other: LongCenturies): Int = `value`.compareTo(other.`value`)

  /**
   * Converts this duration to an ISO-8601 time interval representation.
   */
  public override fun toString(): String {
     return when (`value`) {
       0L -> "P0Y"
       Long.MIN_VALUE -> "-P9223372036854775808Y"
       else -> buildString {
         if (`value` < 0) { append('-') }
         append("P")
         append(`value`.absoluteValue timesExact 100)
         append('Y')
       }
     }
  }

  /**
   * Negates this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun unaryMinus(): LongCenturies = LongCenturies(`value`.negateExact())

  /**
   * Negates this duration without checking for overflow.
   */
  internal fun negateUnchecked(): LongCenturies = LongCenturies(-`value`)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Int): LongCenturies = LongCenturies(`value` timesExact scalar)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Long): LongCenturies = LongCenturies(`value` timesExact scalar)

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Int): LongCenturies {
     return if (scalar == -1) {
       -this
     } else {
       LongCenturies(`value` / scalar)
     }
  }

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Long): LongCenturies {
     return if (scalar == -1L) {
       -this
     } else {
       LongCenturies(`value` / scalar)
     }
  }

  public operator fun rem(scalar: Int): LongCenturies = LongCenturies(`value` % scalar)

  public operator fun rem(scalar: Long): LongCenturies = LongCenturies(`value` % scalar)

  public operator fun plus(months: IntMonths): LongMonths = this.inMonths + months

  public operator fun minus(months: IntMonths): LongMonths = this.inMonths - months

  public operator fun plus(months: LongMonths): LongMonths = this.inMonths + months

  public operator fun minus(months: LongMonths): LongMonths = this.inMonths - months

  public operator fun plus(years: IntYears): LongYears = this.inYears + years

  public operator fun minus(years: IntYears): LongYears = this.inYears - years

  public operator fun plus(years: LongYears): LongYears = this.inYears + years

  public operator fun minus(years: LongYears): LongYears = this.inYears - years

  public operator fun plus(decades: IntDecades): LongDecades = this.inDecades + decades

  public operator fun minus(decades: IntDecades): LongDecades = this.inDecades - decades

  public operator fun plus(decades: LongDecades): LongDecades = this.inDecades + decades

  public operator fun minus(decades: LongDecades): LongDecades = this.inDecades - decades

  public operator fun plus(centuries: IntCenturies): LongCenturies = LongCenturies(`value` plusExact
      centuries.value)

  public operator fun minus(centuries: IntCenturies): LongCenturies =
      LongCenturies(`value` minusExact centuries.value)

  public operator fun plus(centuries: LongCenturies): LongCenturies =
      LongCenturies(`value` plusExact centuries.value)

  public operator fun minus(centuries: LongCenturies): LongCenturies =
      LongCenturies(`value` minusExact centuries.value)

  /**
   * Converts this duration to [IntCenturies].
   * @throws ArithmeticException if overflow occurs
   */
  public fun toIntCenturies(): IntCenturies = IntCenturies(`value`.toIntExact())

  /**
   * Converts this duration to [IntCenturies] without checking for overflow.
   */
  @PublishedApi
  internal fun toIntCenturiesUnchecked(): IntCenturies = IntCenturies(`value`.toInt())

  /**
   * Converts this duration to an `Int` value.
   * @throws ArithmeticException if overflow occurs
   */
  public fun toInt(): Int = `value`.toIntExact()

  /**
   * Converts this duration to an `Int` value without checking for overflow.
   */
  internal fun toIntUnchecked(): Int = `value`.toInt()

  public companion object {
    /**
     * The smallest supported value.
     */
    public val MIN: LongCenturies = LongCenturies(Long.MIN_VALUE)

    /**
     * The largest supported value.
     */
    public val MAX: LongCenturies = LongCenturies(Long.MAX_VALUE)
  }
}

/**
 * Converts this value to a duration of centuries.
 */
public val Long.centuries: LongCenturies
  get() = LongCenturies(this)

/**
 * Multiplies this value by a duration of centuries.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Int.times(centuries: LongCenturies): LongCenturies = centuries * this

/**
 * Multiplies this value by a duration of centuries.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Long.times(centuries: LongCenturies): LongCenturies = centuries * this
