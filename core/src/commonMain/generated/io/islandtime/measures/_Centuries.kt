//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("CenturiesKt")

package io.islandtime.measures

import io.islandtime.internal.DECADES_PER_CENTURY
import io.islandtime.internal.MONTHS_PER_CENTURY
import io.islandtime.internal.YEARS_PER_CENTURY
import io.islandtime.internal.timesExact
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntCenturies(
  val value: Int
) : Comparable<IntCenturies> {
  val inMonths: IntMonths
    get() = (this.value * MONTHS_PER_CENTURY).months

  val inYears: IntYears
    get() = (this.value * YEARS_PER_CENTURY).years

  val inDecades: IntDecades
    get() = (this.value * DECADES_PER_CENTURY).decades

  fun isZero(): Boolean = value == 0

  fun isNegative(): Boolean = value < 0

  fun isPositive(): Boolean = value > 0

  override fun compareTo(other: IntCenturies): Int = value.compareTo(other.value)

  override fun toString(): String = if (isZero()) {
      "P0Y"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue timesExact 100)
          append('Y')
      }
  }
  fun inMonthsExact() = (this.value timesExact MONTHS_PER_CENTURY).months

  fun inYearsExact() = (this.value timesExact YEARS_PER_CENTURY).years

  fun inDecadesExact() = (this.value timesExact DECADES_PER_CENTURY).decades

  companion object {
    val MIN: IntCenturies = IntCenturies(Int.MIN_VALUE)

    val MAX: IntCenturies = IntCenturies(Int.MAX_VALUE)
  }
}

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongCenturies(
  val value: Long
) : Comparable<LongCenturies> {
  val inMonths: LongMonths
    get() = (this.value * MONTHS_PER_CENTURY).months

  val inYears: LongYears
    get() = (this.value * YEARS_PER_CENTURY).years

  val inDecades: LongDecades
    get() = (this.value * DECADES_PER_CENTURY).decades

  fun isZero(): Boolean = value == 0L

  fun isNegative(): Boolean = value < 0L

  fun isPositive(): Boolean = value > 0L

  override fun compareTo(other: LongCenturies): Int = value.compareTo(other.value)

  override fun toString(): String = if (isZero()) {
      "P0Y"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue timesExact 100)
          append('Y')
      }
  }
  fun inMonthsExact() = (this.value timesExact MONTHS_PER_CENTURY).months

  fun inYearsExact() = (this.value timesExact YEARS_PER_CENTURY).years

  fun inDecadesExact() = (this.value timesExact DECADES_PER_CENTURY).decades

  companion object {
    val MIN: LongCenturies = LongCenturies(Long.MIN_VALUE)

    val MAX: LongCenturies = LongCenturies(Long.MAX_VALUE)
  }
}

val Int.centuries: IntCenturies
  get() = IntCenturies(this)

val Long.centuries: LongCenturies
  get() = LongCenturies(this)
