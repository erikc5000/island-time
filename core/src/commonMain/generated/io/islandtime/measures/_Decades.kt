//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("DecadesKt")

package io.islandtime.measures

import dev.erikchristensen.javamath2kmp.absExact
import dev.erikchristensen.javamath2kmp.minusExact
import dev.erikchristensen.javamath2kmp.negateExact
import dev.erikchristensen.javamath2kmp.plusExact
import dev.erikchristensen.javamath2kmp.timesExact
import dev.erikchristensen.javamath2kmp.toIntExact
import io.islandtime.`internal`.DECADES_PER_CENTURY
import io.islandtime.`internal`.MONTHS_PER_DECADE
import io.islandtime.`internal`.YEARS_PER_DECADE
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.PublishedApi
import kotlin.String
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

/**
 * A number of decades.
 */
@JvmInline
public value class IntDecades(
  /**
   * The underlying value.
   */
  public val `value`: Int
) : Comparable<IntDecades> {
  /**
   * The absolute value of this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public val absoluteValue: IntDecades
    get() = IntDecades(absExact(`value`))

  /**
   * Converts this duration to months.
   * @throws ArithmeticException if overflow occurs
   */
  public val inMonths: IntMonths
    get() = (`value` timesExact MONTHS_PER_DECADE).months

  /**
   * Converts this duration to months without checking for overflow.
   */
  internal val inMonthsUnchecked: IntMonths
    get() = (`value` * MONTHS_PER_DECADE).months

  /**
   * Converts this duration to years.
   * @throws ArithmeticException if overflow occurs
   */
  public val inYears: IntYears
    get() = (`value` timesExact YEARS_PER_DECADE).years

  /**
   * Converts this duration to years without checking for overflow.
   */
  internal val inYearsUnchecked: IntYears
    get() = (`value` * YEARS_PER_DECADE).years

  /**
   * Converts this duration to the number of whole centuries.
   */
  public val inCenturies: IntCenturies
    get() = (`value` / DECADES_PER_CENTURY).centuries

  /**
   * Checks if this duration is zero.
   */
  public fun isZero(): Boolean = `value` == 0

  /**
   * Checks if this duration is negative.
   */
  public fun isNegative(): Boolean = `value` < 0

  /**
   * Checks if this duration is positive.
   */
  public fun isPositive(): Boolean = `value` > 0

  public override fun compareTo(other: IntDecades): Int = `value`.compareTo(other.`value`)

  /**
   * Converts this duration to an ISO-8601 time interval representation.
   */
  public override fun toString(): String {
     return when (`value`) {
       0 -> "P0Y"
       Int.MIN_VALUE -> "-P2147483648Y"
       else -> buildString {
         if (`value` < 0) { append('-') }
         append("P")
         append(`value`.absoluteValue timesExact 10)
         append('Y')
       }
     }
  }

  /**
   * Negates this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun unaryMinus(): IntDecades = IntDecades(`value`.negateExact())

  /**
   * Negates this duration without checking for overflow.
   */
  internal fun negateUnchecked(): IntDecades = IntDecades(-`value`)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Int): IntDecades = IntDecades(`value` timesExact scalar)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Long): LongDecades = this.toLongDecades() * scalar

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Int): IntDecades {
     return if (scalar == -1) {
       -this
     } else {
       IntDecades(`value` / scalar)
     }
  }

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if the scalar is zero
   */
  public operator fun div(scalar: Long): LongDecades = this.toLongDecades() / scalar

  public operator fun rem(scalar: Int): IntDecades = IntDecades(`value` % scalar)

  public operator fun rem(scalar: Long): LongDecades = this.toLongDecades() % scalar

  public operator fun plus(months: IntMonths): IntMonths = this.inMonths + months

  public operator fun minus(months: IntMonths): IntMonths = this.inMonths - months

  public operator fun plus(months: LongMonths): LongMonths = this.toLongDecades().inMonths + months

  public operator fun minus(months: LongMonths): LongMonths = this.toLongDecades().inMonths - months

  public operator fun plus(years: IntYears): IntYears = this.inYears + years

  public operator fun minus(years: IntYears): IntYears = this.inYears - years

  public operator fun plus(years: LongYears): LongYears = this.toLongDecades().inYears + years

  public operator fun minus(years: LongYears): LongYears = this.toLongDecades().inYears - years

  public operator fun plus(decades: IntDecades): IntDecades = IntDecades(`value` plusExact
      decades.value)

  public operator fun minus(decades: IntDecades): IntDecades = IntDecades(`value` minusExact
      decades.value)

  public operator fun plus(decades: LongDecades): LongDecades =
      LongDecades(`value`.toLong() plusExact decades.value)

  public operator fun minus(decades: LongDecades): LongDecades =
      LongDecades(`value`.toLong() minusExact decades.value)

  public operator fun plus(centuries: IntCenturies): IntDecades = this + centuries.inDecades

  public operator fun minus(centuries: IntCenturies): IntDecades = this - centuries.inDecades

  public operator fun plus(centuries: LongCenturies): LongDecades = this.toLongDecades() +
      centuries.inDecades

  public operator fun minus(centuries: LongCenturies): LongDecades = this.toLongDecades() -
      centuries.inDecades

  public inline fun <T> toComponents(action: (centuries: IntCenturies, decades: IntDecades) -> T):
      T {
    val centuries = (`value` / DECADES_PER_CENTURY).centuries
    val decades = (`value` % DECADES_PER_CENTURY).decades
    return action(centuries, decades)
  }

  /**
   * Converts this duration to [LongDecades].
   */
  public fun toLongDecades(): LongDecades = LongDecades(`value`.toLong())

  /**
   * Converts this duration to a `Long` value.
   */
  public fun toLong(): Long = `value`.toLong()

  public companion object {
    /**
     * The smallest supported value.
     */
    public val MIN: IntDecades = IntDecades(Int.MIN_VALUE)

    /**
     * The largest supported value.
     */
    public val MAX: IntDecades = IntDecades(Int.MAX_VALUE)
  }
}

/**
 * Converts this value to a duration of decades.
 */
public val Int.decades: IntDecades
  get() = IntDecades(this)

/**
 * Multiplies this value by a duration of decades.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Int.times(decades: IntDecades): IntDecades = decades * this

/**
 * Multiplies this value by a duration of decades.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Long.times(decades: IntDecades): LongDecades = decades * this

/**
 * A number of decades.
 */
@JvmInline
public value class LongDecades(
  /**
   * The underlying value.
   */
  public val `value`: Long
) : Comparable<LongDecades> {
  /**
   * The absolute value of this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public val absoluteValue: LongDecades
    get() = LongDecades(absExact(`value`))

  /**
   * Converts this duration to months.
   * @throws ArithmeticException if overflow occurs
   */
  public val inMonths: LongMonths
    get() = (`value` timesExact MONTHS_PER_DECADE).months

  /**
   * Converts this duration to months without checking for overflow.
   */
  internal val inMonthsUnchecked: LongMonths
    get() = (`value` * MONTHS_PER_DECADE).months

  /**
   * Converts this duration to years.
   * @throws ArithmeticException if overflow occurs
   */
  public val inYears: LongYears
    get() = (`value` timesExact YEARS_PER_DECADE).years

  /**
   * Converts this duration to years without checking for overflow.
   */
  internal val inYearsUnchecked: LongYears
    get() = (`value` * YEARS_PER_DECADE).years

  /**
   * Converts this duration to the number of whole centuries.
   */
  public val inCenturies: LongCenturies
    get() = (`value` / DECADES_PER_CENTURY).centuries

  /**
   * Checks if this duration is zero.
   */
  public fun isZero(): Boolean = `value` == 0L

  /**
   * Checks if this duration is negative.
   */
  public fun isNegative(): Boolean = `value` < 0L

  /**
   * Checks if this duration is positive.
   */
  public fun isPositive(): Boolean = `value` > 0L

  public override fun compareTo(other: LongDecades): Int = `value`.compareTo(other.`value`)

  /**
   * Converts this duration to an ISO-8601 time interval representation.
   */
  public override fun toString(): String {
     return when (`value`) {
       0L -> "P0Y"
       Long.MIN_VALUE -> "-P9223372036854775808Y"
       else -> buildString {
         if (`value` < 0) { append('-') }
         append("P")
         append(`value`.absoluteValue timesExact 10)
         append('Y')
       }
     }
  }

  /**
   * Negates this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun unaryMinus(): LongDecades = LongDecades(`value`.negateExact())

  /**
   * Negates this duration without checking for overflow.
   */
  internal fun negateUnchecked(): LongDecades = LongDecades(-`value`)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Int): LongDecades = LongDecades(`value` timesExact scalar)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Long): LongDecades = LongDecades(`value` timesExact scalar)

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Int): LongDecades {
     return if (scalar == -1) {
       -this
     } else {
       LongDecades(`value` / scalar)
     }
  }

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Long): LongDecades {
     return if (scalar == -1L) {
       -this
     } else {
       LongDecades(`value` / scalar)
     }
  }

  public operator fun rem(scalar: Int): LongDecades = LongDecades(`value` % scalar)

  public operator fun rem(scalar: Long): LongDecades = LongDecades(`value` % scalar)

  public operator fun plus(months: IntMonths): LongMonths = this.inMonths + months

  public operator fun minus(months: IntMonths): LongMonths = this.inMonths - months

  public operator fun plus(months: LongMonths): LongMonths = this.inMonths + months

  public operator fun minus(months: LongMonths): LongMonths = this.inMonths - months

  public operator fun plus(years: IntYears): LongYears = this.inYears + years

  public operator fun minus(years: IntYears): LongYears = this.inYears - years

  public operator fun plus(years: LongYears): LongYears = this.inYears + years

  public operator fun minus(years: LongYears): LongYears = this.inYears - years

  public operator fun plus(decades: IntDecades): LongDecades = LongDecades(`value` plusExact
      decades.value)

  public operator fun minus(decades: IntDecades): LongDecades = LongDecades(`value` minusExact
      decades.value)

  public operator fun plus(decades: LongDecades): LongDecades = LongDecades(`value` plusExact
      decades.value)

  public operator fun minus(decades: LongDecades): LongDecades = LongDecades(`value` minusExact
      decades.value)

  public operator fun plus(centuries: IntCenturies): LongDecades = this + centuries.inDecades

  public operator fun minus(centuries: IntCenturies): LongDecades = this - centuries.inDecades

  public operator fun plus(centuries: LongCenturies): LongDecades = this + centuries.inDecades

  public operator fun minus(centuries: LongCenturies): LongDecades = this - centuries.inDecades

  public inline fun <T> toComponents(action: (centuries: LongCenturies, decades: IntDecades) -> T):
      T {
    val centuries = (`value` / DECADES_PER_CENTURY).centuries
    val decades = (`value` % DECADES_PER_CENTURY).toInt().decades
    return action(centuries, decades)
  }

  /**
   * Converts this duration to [IntDecades].
   * @throws ArithmeticException if overflow occurs
   */
  public fun toIntDecades(): IntDecades = IntDecades(`value`.toIntExact())

  /**
   * Converts this duration to [IntDecades] without checking for overflow.
   */
  @PublishedApi
  internal fun toIntDecadesUnchecked(): IntDecades = IntDecades(`value`.toInt())

  /**
   * Converts this duration to an `Int` value.
   * @throws ArithmeticException if overflow occurs
   */
  public fun toInt(): Int = `value`.toIntExact()

  /**
   * Converts this duration to an `Int` value without checking for overflow.
   */
  internal fun toIntUnchecked(): Int = `value`.toInt()

  public companion object {
    /**
     * The smallest supported value.
     */
    public val MIN: LongDecades = LongDecades(Long.MIN_VALUE)

    /**
     * The largest supported value.
     */
    public val MAX: LongDecades = LongDecades(Long.MAX_VALUE)
  }
}

/**
 * Converts this value to a duration of decades.
 */
public val Long.decades: LongDecades
  get() = LongDecades(this)

/**
 * Multiplies this value by a duration of decades.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Int.times(decades: LongDecades): LongDecades = decades * this

/**
 * Multiplies this value by a duration of decades.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Long.times(decades: LongDecades): LongDecades = decades * this
