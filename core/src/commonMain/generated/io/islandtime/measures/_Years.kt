//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("YearsKt")

package io.islandtime.measures

import dev.erikchristensen.javamath2kmp.absExact
import dev.erikchristensen.javamath2kmp.minusExact
import dev.erikchristensen.javamath2kmp.negateExact
import dev.erikchristensen.javamath2kmp.plusExact
import dev.erikchristensen.javamath2kmp.timesExact
import dev.erikchristensen.javamath2kmp.toIntExact
import io.islandtime.`internal`.MONTHS_PER_YEAR
import io.islandtime.`internal`.YEARS_PER_CENTURY
import io.islandtime.`internal`.YEARS_PER_DECADE
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.PublishedApi
import kotlin.String
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

/**
 * A number of years.
 */
@JvmInline
public value class IntYears(
  /**
   * The underlying value.
   */
  public val `value`: Int
) : Comparable<IntYears> {
  /**
   * The absolute value of this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public val absoluteValue: IntYears
    get() = IntYears(absExact(`value`))

  /**
   * Converts this duration to months.
   * @throws ArithmeticException if overflow occurs
   */
  public val inMonths: IntMonths
    get() = (`value` timesExact MONTHS_PER_YEAR).months

  /**
   * Converts this duration to months without checking for overflow.
   */
  internal val inMonthsUnchecked: IntMonths
    get() = (`value` * MONTHS_PER_YEAR).months

  /**
   * Converts this duration to the number of whole decades.
   */
  public val inDecades: IntDecades
    get() = (`value` / YEARS_PER_DECADE).decades

  /**
   * Converts this duration to the number of whole centuries.
   */
  public val inCenturies: IntCenturies
    get() = (`value` / YEARS_PER_CENTURY).centuries

  /**
   * Checks if this duration is zero.
   */
  public fun isZero(): Boolean = `value` == 0

  /**
   * Checks if this duration is negative.
   */
  public fun isNegative(): Boolean = `value` < 0

  /**
   * Checks if this duration is positive.
   */
  public fun isPositive(): Boolean = `value` > 0

  public override fun compareTo(other: IntYears): Int = `value`.compareTo(other.`value`)

  /**
   * Converts this duration to an ISO-8601 time interval representation.
   */
  public override fun toString(): String {
     return when (`value`) {
       0 -> "P0Y"
       Int.MIN_VALUE -> "-P2147483648Y"
       else -> buildString {
         if (`value` < 0) { append('-') }
         append("P")
         append(`value`.absoluteValue)
         append('Y')
       }
     }
  }

  /**
   * Negates this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun unaryMinus(): IntYears = IntYears(`value`.negateExact())

  /**
   * Negates this duration without checking for overflow.
   */
  internal fun negateUnchecked(): IntYears = IntYears(-`value`)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Int): IntYears = IntYears(`value` timesExact scalar)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Long): LongYears = this.toLongYears() * scalar

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Int): IntYears {
     return if (scalar == -1) {
       -this
     } else {
       IntYears(`value` / scalar)
     }
  }

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if the scalar is zero
   */
  public operator fun div(scalar: Long): LongYears = this.toLongYears() / scalar

  public operator fun rem(scalar: Int): IntYears = IntYears(`value` % scalar)

  public operator fun rem(scalar: Long): LongYears = this.toLongYears() % scalar

  public operator fun plus(months: IntMonths): IntMonths = this.inMonths + months

  public operator fun minus(months: IntMonths): IntMonths = this.inMonths - months

  public operator fun plus(months: LongMonths): LongMonths = this.toLongYears().inMonths + months

  public operator fun minus(months: LongMonths): LongMonths = this.toLongYears().inMonths - months

  public operator fun plus(years: IntYears): IntYears = IntYears(`value` plusExact years.value)

  public operator fun minus(years: IntYears): IntYears = IntYears(`value` minusExact years.value)

  public operator fun plus(years: LongYears): LongYears = LongYears(`value`.toLong() plusExact
      years.value)

  public operator fun minus(years: LongYears): LongYears = LongYears(`value`.toLong() minusExact
      years.value)

  public operator fun plus(decades: IntDecades): IntYears = this + decades.inYears

  public operator fun minus(decades: IntDecades): IntYears = this - decades.inYears

  public operator fun plus(decades: LongDecades): LongYears = this.toLongYears() + decades.inYears

  public operator fun minus(decades: LongDecades): LongYears = this.toLongYears() - decades.inYears

  public operator fun plus(centuries: IntCenturies): IntYears = this + centuries.inYears

  public operator fun minus(centuries: IntCenturies): IntYears = this - centuries.inYears

  public operator fun plus(centuries: LongCenturies): LongYears = this.toLongYears() +
      centuries.inYears

  public operator fun minus(centuries: LongCenturies): LongYears = this.toLongYears() -
      centuries.inYears

  public inline fun <T> toComponents(action: (decades: IntDecades, years: IntYears) -> T): T {
    val decades = (`value` / YEARS_PER_DECADE).decades
    val years = (`value` % YEARS_PER_DECADE).years
    return action(decades, years)
  }

  public inline fun <T> toComponents(action: (
    centuries: IntCenturies,
    decades: IntDecades,
    years: IntYears
  ) -> T): T {
    val centuries = (`value` / YEARS_PER_CENTURY).centuries
    val decades = ((`value` % YEARS_PER_CENTURY) / YEARS_PER_DECADE).decades
    val years = (`value` % YEARS_PER_DECADE).years
    return action(centuries, decades, years)
  }

  /**
   * Converts this duration to [LongYears].
   */
  public fun toLongYears(): LongYears = LongYears(`value`.toLong())

  /**
   * Converts this duration to a `Long` value.
   */
  public fun toLong(): Long = `value`.toLong()

  public companion object {
    /**
     * The smallest supported value.
     */
    public val MIN: IntYears = IntYears(Int.MIN_VALUE)

    /**
     * The largest supported value.
     */
    public val MAX: IntYears = IntYears(Int.MAX_VALUE)
  }
}

/**
 * Converts this value to a duration of years.
 */
public val Int.years: IntYears
  get() = IntYears(this)

/**
 * Multiplies this value by a duration of years.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Int.times(years: IntYears): IntYears = years * this

/**
 * Multiplies this value by a duration of years.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Long.times(years: IntYears): LongYears = years * this

/**
 * A number of years.
 */
@JvmInline
public value class LongYears(
  /**
   * The underlying value.
   */
  public val `value`: Long
) : Comparable<LongYears> {
  /**
   * The absolute value of this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public val absoluteValue: LongYears
    get() = LongYears(absExact(`value`))

  /**
   * Converts this duration to months.
   * @throws ArithmeticException if overflow occurs
   */
  public val inMonths: LongMonths
    get() = (`value` timesExact MONTHS_PER_YEAR).months

  /**
   * Converts this duration to months without checking for overflow.
   */
  internal val inMonthsUnchecked: LongMonths
    get() = (`value` * MONTHS_PER_YEAR).months

  /**
   * Converts this duration to the number of whole decades.
   */
  public val inDecades: LongDecades
    get() = (`value` / YEARS_PER_DECADE).decades

  /**
   * Converts this duration to the number of whole centuries.
   */
  public val inCenturies: LongCenturies
    get() = (`value` / YEARS_PER_CENTURY).centuries

  /**
   * Checks if this duration is zero.
   */
  public fun isZero(): Boolean = `value` == 0L

  /**
   * Checks if this duration is negative.
   */
  public fun isNegative(): Boolean = `value` < 0L

  /**
   * Checks if this duration is positive.
   */
  public fun isPositive(): Boolean = `value` > 0L

  public override fun compareTo(other: LongYears): Int = `value`.compareTo(other.`value`)

  /**
   * Converts this duration to an ISO-8601 time interval representation.
   */
  public override fun toString(): String {
     return when (`value`) {
       0L -> "P0Y"
       Long.MIN_VALUE -> "-P9223372036854775808Y"
       else -> buildString {
         if (`value` < 0) { append('-') }
         append("P")
         append(`value`.absoluteValue)
         append('Y')
       }
     }
  }

  /**
   * Negates this duration.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun unaryMinus(): LongYears = LongYears(`value`.negateExact())

  /**
   * Negates this duration without checking for overflow.
   */
  internal fun negateUnchecked(): LongYears = LongYears(-`value`)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Int): LongYears = LongYears(`value` timesExact scalar)

  /**
   * Multiplies this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs
   */
  public operator fun times(scalar: Long): LongYears = LongYears(`value` timesExact scalar)

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Int): LongYears {
     return if (scalar == -1) {
       -this
     } else {
       LongYears(`value` / scalar)
     }
  }

  /**
   * Divides this duration by a scalar value.
   * @throws ArithmeticException if overflow occurs or the scalar is zero
   */
  public operator fun div(scalar: Long): LongYears {
     return if (scalar == -1L) {
       -this
     } else {
       LongYears(`value` / scalar)
     }
  }

  public operator fun rem(scalar: Int): LongYears = LongYears(`value` % scalar)

  public operator fun rem(scalar: Long): LongYears = LongYears(`value` % scalar)

  public operator fun plus(months: IntMonths): LongMonths = this.inMonths + months

  public operator fun minus(months: IntMonths): LongMonths = this.inMonths - months

  public operator fun plus(months: LongMonths): LongMonths = this.inMonths + months

  public operator fun minus(months: LongMonths): LongMonths = this.inMonths - months

  public operator fun plus(years: IntYears): LongYears = LongYears(`value` plusExact years.value)

  public operator fun minus(years: IntYears): LongYears = LongYears(`value` minusExact years.value)

  public operator fun plus(years: LongYears): LongYears = LongYears(`value` plusExact years.value)

  public operator fun minus(years: LongYears): LongYears = LongYears(`value` minusExact years.value)

  public operator fun plus(decades: IntDecades): LongYears = this + decades.inYears

  public operator fun minus(decades: IntDecades): LongYears = this - decades.inYears

  public operator fun plus(decades: LongDecades): LongYears = this + decades.inYears

  public operator fun minus(decades: LongDecades): LongYears = this - decades.inYears

  public operator fun plus(centuries: IntCenturies): LongYears = this + centuries.inYears

  public operator fun minus(centuries: IntCenturies): LongYears = this - centuries.inYears

  public operator fun plus(centuries: LongCenturies): LongYears = this + centuries.inYears

  public operator fun minus(centuries: LongCenturies): LongYears = this - centuries.inYears

  public inline fun <T> toComponents(action: (decades: LongDecades, years: IntYears) -> T): T {
    val decades = (`value` / YEARS_PER_DECADE).decades
    val years = (`value` % YEARS_PER_DECADE).toInt().years
    return action(decades, years)
  }

  public inline fun <T> toComponents(action: (
    centuries: LongCenturies,
    decades: IntDecades,
    years: IntYears
  ) -> T): T {
    val centuries = (`value` / YEARS_PER_CENTURY).centuries
    val decades = ((`value` % YEARS_PER_CENTURY) / YEARS_PER_DECADE).toInt().decades
    val years = (`value` % YEARS_PER_DECADE).toInt().years
    return action(centuries, decades, years)
  }

  /**
   * Converts this duration to [IntYears].
   * @throws ArithmeticException if overflow occurs
   */
  public fun toIntYears(): IntYears = IntYears(`value`.toIntExact())

  /**
   * Converts this duration to [IntYears] without checking for overflow.
   */
  @PublishedApi
  internal fun toIntYearsUnchecked(): IntYears = IntYears(`value`.toInt())

  /**
   * Converts this duration to an `Int` value.
   * @throws ArithmeticException if overflow occurs
   */
  public fun toInt(): Int = `value`.toIntExact()

  /**
   * Converts this duration to an `Int` value without checking for overflow.
   */
  internal fun toIntUnchecked(): Int = `value`.toInt()

  public companion object {
    /**
     * The smallest supported value.
     */
    public val MIN: LongYears = LongYears(Long.MIN_VALUE)

    /**
     * The largest supported value.
     */
    public val MAX: LongYears = LongYears(Long.MAX_VALUE)
  }
}

/**
 * Converts this value to a duration of years.
 */
public val Long.years: LongYears
  get() = LongYears(this)

/**
 * Multiplies this value by a duration of years.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Int.times(years: LongYears): LongYears = years * this

/**
 * Multiplies this value by a duration of years.
 * @throws ArithmeticException if overflow occurs
 */
public operator fun Long.times(years: LongYears): LongYears = years * this
