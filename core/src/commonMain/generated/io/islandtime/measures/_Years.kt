//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("YearsKt")

package io.islandtime.measures

import io.islandtime.internal.MONTHS_PER_YEAR
import io.islandtime.internal.YEARS_PER_CENTURY
import io.islandtime.internal.YEARS_PER_DECADE
import io.islandtime.internal.timesExact
import io.islandtime.internal.toIntExact
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

/**
 * A number of years.
 */
@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntYears(
  /**
   * The underlying value.
   */
  val value: Int
) : Comparable<IntYears> {
  /**
   * Get the absolute value.
   */
  val absoluteValue: IntYears
    get() = IntYears(value.absoluteValue)
  /**
   * Convert to months.
   */
  val inMonths: IntMonths
    get() = (value * MONTHS_PER_YEAR).months

  /**
   * Convert to whole decades.
   */
  val inDecades: IntDecades
    get() = (value / YEARS_PER_DECADE).decades

  /**
   * Convert to whole centuries.
   */
  val inCenturies: IntCenturies
    get() = (value / YEARS_PER_CENTURY).centuries

  /**
   * Is this duration zero?
   */
  fun isZero(): Boolean = value == 0

  /**
   * Is this duration negative?
   */
  fun isNegative(): Boolean = value < 0

  /**
   * Is this duration positive?
   */
  fun isPositive(): Boolean = value > 0

  override fun compareTo(other: IntYears): Int = value.compareTo(other.value)

  /**
   * Convert to an ISO-8601 time interval representation.
   */
  override fun toString(): String = if (isZero()) {
      "P0Y"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue)
          append('Y')
      }
  }
  operator fun unaryMinus() = IntYears(-value)

  operator fun times(scalar: Int) = IntYears(value * scalar)

  operator fun times(scalar: Long) = this.toLong() * scalar

  operator fun div(scalar: Int) = IntYears(value / scalar)

  operator fun div(scalar: Long) = this.toLong() / scalar

  operator fun rem(scalar: Int) = IntYears(value % scalar)

  operator fun rem(scalar: Long) = this.toLong() % scalar

  operator fun plus(months: IntMonths) = this.inMonths + months

  operator fun minus(months: IntMonths) = this.inMonths - months

  operator fun plus(months: LongMonths) = this.toLong().inMonths + months

  operator fun minus(months: LongMonths) = this.toLong().inMonths - months

  operator fun plus(years: IntYears) = IntYears(value + years.value)

  operator fun minus(years: IntYears) = IntYears(value - years.value)

  operator fun plus(years: LongYears) = LongYears(value.toLong() + years.value)

  operator fun minus(years: LongYears) = LongYears(value.toLong() - years.value)

  operator fun plus(decades: IntDecades) = this + decades.inYears

  operator fun minus(decades: IntDecades) = this - decades.inYears

  operator fun plus(decades: LongDecades) = this.toLong() + decades.inYears

  operator fun minus(decades: LongDecades) = this.toLong() - decades.inYears

  operator fun plus(centuries: IntCenturies) = this + centuries.inYears

  operator fun minus(centuries: IntCenturies) = this - centuries.inYears

  operator fun plus(centuries: LongCenturies) = this.toLong() + centuries.inYears

  operator fun minus(centuries: LongCenturies) = this.toLong() - centuries.inYears

  /**
   * Convert to months.
   */
  fun inMonthsExact() = (value timesExact MONTHS_PER_YEAR).months

  inline fun <T> toComponents(action: (decades: IntDecades, years: IntYears) -> T): T {
    val decades = this.inDecades
    val years = (this - decades)
    return action(decades, years)
  }

  inline fun <T> toComponents(action: (
    centuries: IntCenturies,
    decades: IntDecades,
    years: IntYears
  ) -> T): T {
    val centuries = this.inCenturies
    val decades = (this - centuries).inDecades
    val years = (this - centuries - decades)
    return action(centuries, decades, years)
  }

  fun toLong() = LongYears(value.toLong())

  companion object {
    /**
     * The smallest supported value.
     */
    val MIN: IntYears = IntYears(Int.MIN_VALUE)

    /**
     * The largest supported value.
     */
    val MAX: IntYears = IntYears(Int.MAX_VALUE)
  }
}

/**
 * Convert to [IntYears].
 */
val Int.years: IntYears
  get() = IntYears(this)

/**
 * A number of years.
 */
@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongYears(
  /**
   * The underlying value.
   */
  val value: Long
) : Comparable<LongYears> {
  /**
   * Get the absolute value.
   */
  val absoluteValue: LongYears
    get() = LongYears(value.absoluteValue)
  /**
   * Convert to months.
   */
  val inMonths: LongMonths
    get() = (value * MONTHS_PER_YEAR).months

  /**
   * Convert to whole decades.
   */
  val inDecades: LongDecades
    get() = (value / YEARS_PER_DECADE).decades

  /**
   * Convert to whole centuries.
   */
  val inCenturies: LongCenturies
    get() = (value / YEARS_PER_CENTURY).centuries

  /**
   * Is this duration zero?
   */
  fun isZero(): Boolean = value == 0L

  /**
   * Is this duration negative?
   */
  fun isNegative(): Boolean = value < 0L

  /**
   * Is this duration positive?
   */
  fun isPositive(): Boolean = value > 0L

  override fun compareTo(other: LongYears): Int = value.compareTo(other.value)

  /**
   * Convert to an ISO-8601 time interval representation.
   */
  override fun toString(): String = if (isZero()) {
      "P0Y"
  } else {
      buildString {
          if (isNegative()) { append('-') }
          append("P")
          append(value.absoluteValue)
          append('Y')
      }
  }
  operator fun unaryMinus() = LongYears(-value)

  operator fun times(scalar: Int) = LongYears(value * scalar)

  operator fun times(scalar: Long) = LongYears(value * scalar)

  operator fun div(scalar: Int) = LongYears(value / scalar)

  operator fun div(scalar: Long) = LongYears(value / scalar)

  operator fun rem(scalar: Int) = LongYears(value % scalar)

  operator fun rem(scalar: Long) = LongYears(value % scalar)

  operator fun plus(months: IntMonths) = this.inMonths + months

  operator fun minus(months: IntMonths) = this.inMonths - months

  operator fun plus(months: LongMonths) = this.inMonths + months

  operator fun minus(months: LongMonths) = this.inMonths - months

  operator fun plus(years: IntYears) = LongYears(value + years.value)

  operator fun minus(years: IntYears) = LongYears(value - years.value)

  operator fun plus(years: LongYears) = LongYears(value + years.value)

  operator fun minus(years: LongYears) = LongYears(value - years.value)

  operator fun plus(decades: IntDecades) = this + decades.inYears

  operator fun minus(decades: IntDecades) = this - decades.inYears

  operator fun plus(decades: LongDecades) = this + decades.inYears

  operator fun minus(decades: LongDecades) = this - decades.inYears

  operator fun plus(centuries: IntCenturies) = this + centuries.inYears

  operator fun minus(centuries: IntCenturies) = this - centuries.inYears

  operator fun plus(centuries: LongCenturies) = this + centuries.inYears

  operator fun minus(centuries: LongCenturies) = this - centuries.inYears

  /**
   * Convert to months.
   */
  fun inMonthsExact() = (value timesExact MONTHS_PER_YEAR).months

  inline fun <T> toComponents(action: (decades: LongDecades, years: IntYears) -> T): T {
    val decades = this.inDecades
    val years = (this - decades).toInt()
    return action(decades, years)
  }

  inline fun <T> toComponents(action: (
    centuries: LongCenturies,
    decades: IntDecades,
    years: IntYears
  ) -> T): T {
    val centuries = this.inCenturies
    val decades = (this - centuries).toInt().inDecades
    val years = (this - centuries - decades).toInt()
    return action(centuries, decades, years)
  }

  fun toInt() = IntYears(value.toInt())

  fun toIntExact() = IntYears(value.toIntExact())

  companion object {
    /**
     * The smallest supported value.
     */
    val MIN: LongYears = LongYears(Long.MIN_VALUE)

    /**
     * The largest supported value.
     */
    val MAX: LongYears = LongYears(Long.MAX_VALUE)
  }
}

/**
 * Convert to [LongYears].
 */
val Long.years: LongYears
  get() = LongYears(this)
