//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("MicrosecondsKt")

package dev.erikchristensen.islandtime.interval

import dev.erikchristensen.islandtime.internal.MICROSECONDS_PER_DAY
import dev.erikchristensen.islandtime.internal.MICROSECONDS_PER_HOUR
import dev.erikchristensen.islandtime.internal.MICROSECONDS_PER_MILLISECOND
import dev.erikchristensen.islandtime.internal.MICROSECONDS_PER_MINUTE
import dev.erikchristensen.islandtime.internal.MICROSECONDS_PER_NANOSECOND
import dev.erikchristensen.islandtime.internal.MICROSECONDS_PER_SECOND
import dev.erikchristensen.islandtime.internal.toZeroPaddedString
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntMicroseconds(
  val value: Int
) : Comparable<IntMicroseconds> {
  val isZero: Boolean
    inline get() = this.value == 0

  val isNegative: Boolean
    inline get() = this.value < 0

  val isPositive: Boolean
    inline get() = this.value > 0

  val absoluteValue: IntMicroseconds
    get() = IntMicroseconds(this.value.absoluteValue)

  override fun compareTo(other: IntMicroseconds): Int = this.value.compareTo(other.value)

  override fun toString(): String = if (this.isZero) {
      "PT0S"
  } else {
      buildString {
          append("PT")
          val absValue = value.absoluteValue
          val wholePart = absValue / 1000000
          val fractionalPart = absValue % 1000000
          if (isNegative) { append('-') }
          append(wholePart)
          if (fractionalPart != 0) {
              append('.')
              append(fractionalPart.toZeroPaddedString(6).dropLastWhile { it == '0' })
          }
          append('S')
      }
  }

  operator fun unaryMinus() = IntMicroseconds(-value)

  operator fun plus(days: IntDays) = this.toLong() + days.asMicroseconds()

  operator fun plus(days: LongDays) = this.toLong() + days.asMicroseconds()

  operator fun plus(hours: IntHours) = this.toLong() + hours.asMicroseconds()

  operator fun plus(hours: LongHours) = this.toLong() + hours.asMicroseconds()

  operator fun plus(minutes: IntMinutes) = this.toLong() + minutes.asMicroseconds()

  operator fun plus(minutes: LongMinutes) = this.toLong() + minutes.asMicroseconds()

  operator fun plus(seconds: IntSeconds) = this.toLong() + seconds.asMicroseconds()

  operator fun plus(seconds: LongSeconds) = this.toLong() + seconds.asMicroseconds()

  operator fun plus(milliseconds: IntMilliseconds) = this.toLong() + milliseconds.asMicroseconds()

  operator fun plus(milliseconds: LongMilliseconds) = this.toLong() + milliseconds.asMicroseconds()

  operator fun plus(microseconds: IntMicroseconds) = LongMicroseconds(this.value.toLong() +
      microseconds.value)

  operator fun plus(microseconds: LongMicroseconds) = LongMicroseconds(this.value.toLong() +
      microseconds.value)

  operator fun plus(nanoseconds: IntNanoseconds) = this.toLong().asNanoseconds() +
      nanoseconds.toLong()

  operator fun plus(nanoseconds: LongNanoseconds) = this.toLong().asNanoseconds() + nanoseconds

  operator fun minus(days: IntDays) = plus(-days)

  operator fun minus(days: LongDays) = plus(-days)

  operator fun minus(hours: IntHours) = plus(-hours)

  operator fun minus(hours: LongHours) = plus(-hours)

  operator fun minus(minutes: IntMinutes) = plus(-minutes)

  operator fun minus(minutes: LongMinutes) = plus(-minutes)

  operator fun minus(seconds: IntSeconds) = plus(-seconds)

  operator fun minus(seconds: LongSeconds) = plus(-seconds)

  operator fun minus(milliseconds: IntMilliseconds) = plus(-milliseconds)

  operator fun minus(milliseconds: LongMilliseconds) = plus(-milliseconds)

  operator fun minus(microseconds: IntMicroseconds) = plus(-microseconds)

  operator fun minus(microseconds: LongMicroseconds) = plus(-microseconds)

  operator fun minus(nanoseconds: IntNanoseconds) = plus(-nanoseconds)

  operator fun minus(nanoseconds: LongNanoseconds) = plus(-nanoseconds)

  operator fun times(scalar: Int) = this.toLong() * scalar

  operator fun times(scalar: Long) = this.toLong() * scalar

  operator fun div(scalar: Int) = this.toLong() / scalar

  operator fun div(scalar: Long) = this.toLong() / scalar

  operator fun rem(scalar: Int) = this.toLong() % scalar

  operator fun rem(scalar: Long) = this.toLong() % scalar

  fun toWholeDays() = (this.value / MICROSECONDS_PER_DAY).toInt().days

  fun toWholeHours() = (this.value / MICROSECONDS_PER_HOUR).toInt().hours

  fun toWholeMinutes() = (this.value / MICROSECONDS_PER_MINUTE).minutes

  fun toWholeSeconds() = (this.value / MICROSECONDS_PER_SECOND).seconds

  fun toWholeMilliseconds() = (this.value / MICROSECONDS_PER_MILLISECOND).milliseconds

  fun asNanoseconds() = (this.value.toLong() * MICROSECONDS_PER_NANOSECOND).nanoseconds

  inline fun <T> toComponents(action: (
    days: IntDays,
    hours: IntHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val days = this.toWholeDays()
    val hours = (this - days).toInt().toWholeHours()
    val minutes = (this - days - hours).toInt().toWholeMinutes()
    val seconds = (this - days - hours - minutes).toInt().toWholeSeconds()
    val milliseconds = (this - days - hours - minutes - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - days - hours - minutes - seconds - milliseconds).toInt()
    return action(days, hours, minutes, seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (
    hours: IntHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val hours = this.toWholeHours()
    val minutes = (this - hours).toInt().toWholeMinutes()
    val seconds = (this - hours - minutes).toInt().toWholeSeconds()
    val milliseconds = (this - hours - minutes - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - hours - minutes - seconds - milliseconds).toInt()
    return action(hours, minutes, seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val minutes = this.toWholeMinutes()
    val seconds = (this - minutes).toInt().toWholeSeconds()
    val milliseconds = (this - minutes - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - minutes - seconds - milliseconds).toInt()
    return action(minutes, seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (
    seconds: IntSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val seconds = this.toWholeSeconds()
    val milliseconds = (this - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - seconds - milliseconds).toInt()
    return action(seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (milliseconds: IntMilliseconds,
      microseconds: IntMicroseconds) -> T): T {
    val milliseconds = this.toWholeMilliseconds()
    val microseconds = (this - milliseconds).toInt()
    return action(milliseconds, microseconds)
  }

  fun toLong() = LongMicroseconds(this.value.toLong())

  companion object {
    val MIN: IntMicroseconds = IntMicroseconds(Int.MIN_VALUE)

    val MAX: IntMicroseconds = IntMicroseconds(Int.MAX_VALUE)
  }
}

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongMicroseconds(
  val value: Long
) : Comparable<LongMicroseconds> {
  val isZero: Boolean
    inline get() = this.value == 0L

  val isNegative: Boolean
    inline get() = this.value < 0L

  val isPositive: Boolean
    inline get() = this.value > 0L

  val absoluteValue: LongMicroseconds
    get() = LongMicroseconds(this.value.absoluteValue)

  override fun compareTo(other: LongMicroseconds): Int = this.value.compareTo(other.value)

  override fun toString(): String = if (this.isZero) {
      "PT0S"
  } else {
      buildString {
          append("PT")
          val absValue = value.absoluteValue
          val wholePart = absValue / 1000000
          val fractionalPart = (absValue % 1000000).toInt()
          if (isNegative) { append('-') }
          append(wholePart)
          if (fractionalPart != 0) {
              append('.')
              append(fractionalPart.toZeroPaddedString(6).dropLastWhile { it == '0' })
          }
          append('S')
      }
  }

  operator fun unaryMinus() = LongMicroseconds(-value)

  operator fun plus(days: IntDays) = this + days.asMicroseconds()

  operator fun plus(days: LongDays) = this + days.asMicroseconds()

  operator fun plus(hours: IntHours) = this + hours.asMicroseconds()

  operator fun plus(hours: LongHours) = this + hours.asMicroseconds()

  operator fun plus(minutes: IntMinutes) = this + minutes.asMicroseconds()

  operator fun plus(minutes: LongMinutes) = this + minutes.asMicroseconds()

  operator fun plus(seconds: IntSeconds) = this + seconds.asMicroseconds()

  operator fun plus(seconds: LongSeconds) = this + seconds.asMicroseconds()

  operator fun plus(milliseconds: IntMilliseconds) = this + milliseconds.asMicroseconds()

  operator fun plus(milliseconds: LongMilliseconds) = this + milliseconds.asMicroseconds()

  operator fun plus(microseconds: IntMicroseconds) = LongMicroseconds(this.value +
      microseconds.value)

  operator fun plus(microseconds: LongMicroseconds) = LongMicroseconds(this.value +
      microseconds.value)

  operator fun plus(nanoseconds: IntNanoseconds) = this.asNanoseconds() + nanoseconds

  operator fun plus(nanoseconds: LongNanoseconds) = this.asNanoseconds() + nanoseconds

  operator fun minus(days: IntDays) = plus(-days)

  operator fun minus(days: LongDays) = plus(-days)

  operator fun minus(hours: IntHours) = plus(-hours)

  operator fun minus(hours: LongHours) = plus(-hours)

  operator fun minus(minutes: IntMinutes) = plus(-minutes)

  operator fun minus(minutes: LongMinutes) = plus(-minutes)

  operator fun minus(seconds: IntSeconds) = plus(-seconds)

  operator fun minus(seconds: LongSeconds) = plus(-seconds)

  operator fun minus(milliseconds: IntMilliseconds) = plus(-milliseconds)

  operator fun minus(milliseconds: LongMilliseconds) = plus(-milliseconds)

  operator fun minus(microseconds: IntMicroseconds) = plus(-microseconds)

  operator fun minus(microseconds: LongMicroseconds) = plus(-microseconds)

  operator fun minus(nanoseconds: IntNanoseconds) = plus(-nanoseconds)

  operator fun minus(nanoseconds: LongNanoseconds) = plus(-nanoseconds)

  operator fun times(scalar: Int) = LongMicroseconds(this.value * scalar)

  operator fun times(scalar: Long) = LongMicroseconds(this.value * scalar)

  operator fun div(scalar: Int) = LongMicroseconds(this.value / scalar)

  operator fun div(scalar: Long) = LongMicroseconds(this.value / scalar)

  operator fun rem(scalar: Int) = LongMicroseconds(this.value % scalar)

  operator fun rem(scalar: Long) = LongMicroseconds(this.value % scalar)

  fun toWholeDays() = (this.value / MICROSECONDS_PER_DAY).days

  fun toWholeHours() = (this.value / MICROSECONDS_PER_HOUR).hours

  fun toWholeMinutes() = (this.value / MICROSECONDS_PER_MINUTE).minutes

  fun toWholeSeconds() = (this.value / MICROSECONDS_PER_SECOND).seconds

  fun toWholeMilliseconds() = (this.value / MICROSECONDS_PER_MILLISECOND).milliseconds

  fun asNanoseconds() = (this.value * MICROSECONDS_PER_NANOSECOND).nanoseconds

  inline fun <T> toComponents(action: (
    days: LongDays,
    hours: IntHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val days = this.toWholeDays()
    val hours = (this - days).toInt().toWholeHours()
    val minutes = (this - days - hours).toInt().toWholeMinutes()
    val seconds = (this - days - hours - minutes).toInt().toWholeSeconds()
    val milliseconds = (this - days - hours - minutes - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - days - hours - minutes - seconds - milliseconds).toInt()
    return action(days, hours, minutes, seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (
    hours: LongHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val hours = this.toWholeHours()
    val minutes = (this - hours).toInt().toWholeMinutes()
    val seconds = (this - hours - minutes).toInt().toWholeSeconds()
    val milliseconds = (this - hours - minutes - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - hours - minutes - seconds - milliseconds).toInt()
    return action(hours, minutes, seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (
    minutes: LongMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val minutes = this.toWholeMinutes()
    val seconds = (this - minutes).toInt().toWholeSeconds()
    val milliseconds = (this - minutes - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - minutes - seconds - milliseconds).toInt()
    return action(minutes, seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (
    seconds: LongSeconds,
    milliseconds: IntMilliseconds,
    microseconds: IntMicroseconds
  ) -> T): T {
    val seconds = this.toWholeSeconds()
    val milliseconds = (this - seconds).toInt().toWholeMilliseconds()
    val microseconds = (this - seconds - milliseconds).toInt()
    return action(seconds, milliseconds, microseconds)
  }

  inline fun <T> toComponents(action: (milliseconds: LongMilliseconds,
      microseconds: IntMicroseconds) -> T): T {
    val milliseconds = this.toWholeMilliseconds()
    val microseconds = (this - milliseconds).toInt()
    return action(milliseconds, microseconds)
  }

  fun toInt() = IntMicroseconds(this.value.toInt())

  companion object {
    val MIN: LongMicroseconds = LongMicroseconds(Long.MIN_VALUE)

    val MAX: LongMicroseconds = LongMicroseconds(Long.MAX_VALUE)
  }
}

val Int.microseconds: IntMicroseconds
  get() = IntMicroseconds(this)

val Long.microseconds: LongMicroseconds
  get() = LongMicroseconds(this)
