//
// This file is auto-generated by 'tools:code-generator'
//
@file:JvmMultifileClass
@file:JvmName("MillisecondsKt")

package dev.erikchristensen.islandtime.interval

import dev.erikchristensen.islandtime.internal.MILLISECONDS_PER_DAY
import dev.erikchristensen.islandtime.internal.MILLISECONDS_PER_HOUR
import dev.erikchristensen.islandtime.internal.MILLISECONDS_PER_MICROSECOND
import dev.erikchristensen.islandtime.internal.MILLISECONDS_PER_MINUTE
import dev.erikchristensen.islandtime.internal.MILLISECONDS_PER_NANOSECOND
import dev.erikchristensen.islandtime.internal.MILLISECONDS_PER_SECOND
import dev.erikchristensen.islandtime.internal.timesExact
import dev.erikchristensen.islandtime.internal.toIntExact
import dev.erikchristensen.islandtime.internal.toZeroPaddedString
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName
import kotlin.math.absoluteValue

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class IntMilliseconds(
  val value: Int
) : Comparable<IntMilliseconds> {
  val inWholeDays: IntDays
    get() = (this.value / MILLISECONDS_PER_DAY).days

  val inWholeHours: IntHours
    get() = (this.value / MILLISECONDS_PER_HOUR).hours

  val inWholeMinutes: IntMinutes
    get() = (this.value / MILLISECONDS_PER_MINUTE).minutes

  val inWholeSeconds: IntSeconds
    get() = (this.value / MILLISECONDS_PER_SECOND).seconds

  val inMicroseconds: LongMicroseconds
    get() = (this.value.toLong() * MILLISECONDS_PER_MICROSECOND).microseconds

  val inNanoseconds: LongNanoseconds
    get() = (this.value.toLong() * MILLISECONDS_PER_NANOSECOND).nanoseconds

  val isZero: Boolean
    inline get() = this.value == 0

  val isNegative: Boolean
    inline get() = this.value < 0

  val isPositive: Boolean
    inline get() = this.value > 0

  val absoluteValue: IntMilliseconds
    get() = IntMilliseconds(this.value.absoluteValue)

  override fun compareTo(other: IntMilliseconds): Int = this.value.compareTo(other.value)

  override fun toString(): String = if (this.isZero) {
      "PT0S"
  } else {
      buildString {
          append("PT")
          val absValue = value.absoluteValue
          val wholePart = absValue / 1000
          val fractionalPart = absValue % 1000
          if (isNegative) { append('-') }
          append(wholePart)
          if (fractionalPart != 0) {
              append('.')
              append(fractionalPart.toZeroPaddedString(3).dropLastWhile { it == '0' })
          }
          append('S')
      }
  }

  operator fun unaryMinus() = IntMilliseconds(-value)

  operator fun plus(days: IntDays) = this.toLong() + days.inMilliseconds

  operator fun plus(days: LongDays) = this.toLong() + days.inMilliseconds

  operator fun plus(hours: IntHours) = this.toLong() + hours.inMilliseconds

  operator fun plus(hours: LongHours) = this.toLong() + hours.inMilliseconds

  operator fun plus(minutes: IntMinutes) = this.toLong() + minutes.inMilliseconds

  operator fun plus(minutes: LongMinutes) = this.toLong() + minutes.inMilliseconds

  operator fun plus(seconds: IntSeconds) = this.toLong() + seconds.inMilliseconds

  operator fun plus(seconds: LongSeconds) = this.toLong() + seconds.inMilliseconds

  operator fun plus(milliseconds: IntMilliseconds) = LongMilliseconds(this.value.toLong() +
      milliseconds.value)

  operator fun plus(milliseconds: LongMilliseconds) = LongMilliseconds(this.value.toLong() +
      milliseconds.value)

  operator fun plus(microseconds: IntMicroseconds) = this.toLong().inMicroseconds +
      microseconds.toLong()

  operator fun plus(microseconds: LongMicroseconds) = this.toLong().inMicroseconds + microseconds

  operator fun plus(nanoseconds: IntNanoseconds) = this.toLong().inNanoseconds +
      nanoseconds.toLong()

  operator fun plus(nanoseconds: LongNanoseconds) = this.toLong().inNanoseconds + nanoseconds

  operator fun minus(days: IntDays) = plus(-days)

  operator fun minus(days: LongDays) = plus(-days)

  operator fun minus(hours: IntHours) = plus(-hours)

  operator fun minus(hours: LongHours) = plus(-hours)

  operator fun minus(minutes: IntMinutes) = plus(-minutes)

  operator fun minus(minutes: LongMinutes) = plus(-minutes)

  operator fun minus(seconds: IntSeconds) = plus(-seconds)

  operator fun minus(seconds: LongSeconds) = plus(-seconds)

  operator fun minus(milliseconds: IntMilliseconds) = plus(-milliseconds)

  operator fun minus(milliseconds: LongMilliseconds) = plus(-milliseconds)

  operator fun minus(microseconds: IntMicroseconds) = plus(-microseconds)

  operator fun minus(microseconds: LongMicroseconds) = plus(-microseconds)

  operator fun minus(nanoseconds: IntNanoseconds) = plus(-nanoseconds)

  operator fun minus(nanoseconds: LongNanoseconds) = plus(-nanoseconds)

  operator fun times(scalar: Int) = this.toLong() * scalar

  operator fun times(scalar: Long) = this.toLong() * scalar

  operator fun div(scalar: Int) = this.toLong() / scalar

  operator fun div(scalar: Long) = this.toLong() / scalar

  operator fun rem(scalar: Int) = this.toLong() % scalar

  operator fun rem(scalar: Long) = this.toLong() % scalar

  inline fun <T> toComponents(action: (
    days: IntDays,
    hours: IntHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds
  ) -> T): T {
    val days = this.inWholeDays
    val hours = (this - days).toInt().inWholeHours
    val minutes = (this - days - hours).toInt().inWholeMinutes
    val seconds = (this - days - hours - minutes).toInt().inWholeSeconds
    val milliseconds = (this - days - hours - minutes - seconds).toInt()
    return action(days, hours, minutes, seconds, milliseconds)
  }

  inline fun <T> toComponents(action: (
    hours: IntHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds
  ) -> T): T {
    val hours = this.inWholeHours
    val minutes = (this - hours).toInt().inWholeMinutes
    val seconds = (this - hours - minutes).toInt().inWholeSeconds
    val milliseconds = (this - hours - minutes - seconds).toInt()
    return action(hours, minutes, seconds, milliseconds)
  }

  inline fun <T> toComponents(action: (
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds
  ) -> T): T {
    val minutes = this.inWholeMinutes
    val seconds = (this - minutes).toInt().inWholeSeconds
    val milliseconds = (this - minutes - seconds).toInt()
    return action(minutes, seconds, milliseconds)
  }

  inline fun <T> toComponents(action: (seconds: IntSeconds, milliseconds: IntMilliseconds) -> T):
      T {
    val seconds = this.inWholeSeconds
    val milliseconds = (this - seconds).toInt()
    return action(seconds, milliseconds)
  }

  fun toLong() = LongMilliseconds(this.value.toLong())

  companion object {
    val MIN: IntMilliseconds = IntMilliseconds(Int.MIN_VALUE)

    val MAX: IntMilliseconds = IntMilliseconds(Int.MAX_VALUE)
  }
}

@Suppress("NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS")
inline class LongMilliseconds(
  val value: Long
) : Comparable<LongMilliseconds> {
  val inWholeDays: LongDays
    get() = (this.value / MILLISECONDS_PER_DAY).days

  val inWholeHours: LongHours
    get() = (this.value / MILLISECONDS_PER_HOUR).hours

  val inWholeMinutes: LongMinutes
    get() = (this.value / MILLISECONDS_PER_MINUTE).minutes

  val inWholeSeconds: LongSeconds
    get() = (this.value / MILLISECONDS_PER_SECOND).seconds

  val inMicroseconds: LongMicroseconds
    get() = (this.value * MILLISECONDS_PER_MICROSECOND).microseconds

  val inNanoseconds: LongNanoseconds
    get() = (this.value * MILLISECONDS_PER_NANOSECOND).nanoseconds

  val isZero: Boolean
    inline get() = this.value == 0L

  val isNegative: Boolean
    inline get() = this.value < 0L

  val isPositive: Boolean
    inline get() = this.value > 0L

  val absoluteValue: LongMilliseconds
    get() = LongMilliseconds(this.value.absoluteValue)

  override fun compareTo(other: LongMilliseconds): Int = this.value.compareTo(other.value)

  override fun toString(): String = if (this.isZero) {
      "PT0S"
  } else {
      buildString {
          append("PT")
          val absValue = value.absoluteValue
          val wholePart = absValue / 1000
          val fractionalPart = (absValue % 1000).toInt()
          if (isNegative) { append('-') }
          append(wholePart)
          if (fractionalPart != 0) {
              append('.')
              append(fractionalPart.toZeroPaddedString(3).dropLastWhile { it == '0' })
          }
          append('S')
      }
  }

  fun inMicrosecondsExact() = (this.value timesExact MILLISECONDS_PER_MICROSECOND).microseconds

  fun inNanosecondsExact() = (this.value timesExact MILLISECONDS_PER_NANOSECOND).nanoseconds

  operator fun unaryMinus() = LongMilliseconds(-value)

  operator fun plus(days: IntDays) = this + days.inMilliseconds

  operator fun plus(days: LongDays) = this + days.inMilliseconds

  operator fun plus(hours: IntHours) = this + hours.inMilliseconds

  operator fun plus(hours: LongHours) = this + hours.inMilliseconds

  operator fun plus(minutes: IntMinutes) = this + minutes.inMilliseconds

  operator fun plus(minutes: LongMinutes) = this + minutes.inMilliseconds

  operator fun plus(seconds: IntSeconds) = this + seconds.inMilliseconds

  operator fun plus(seconds: LongSeconds) = this + seconds.inMilliseconds

  operator fun plus(milliseconds: IntMilliseconds) = LongMilliseconds(this.value +
      milliseconds.value)

  operator fun plus(milliseconds: LongMilliseconds) = LongMilliseconds(this.value +
      milliseconds.value)

  operator fun plus(microseconds: IntMicroseconds) = this.inMicroseconds + microseconds

  operator fun plus(microseconds: LongMicroseconds) = this.inMicroseconds + microseconds

  operator fun plus(nanoseconds: IntNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun plus(nanoseconds: LongNanoseconds) = this.inNanoseconds + nanoseconds

  operator fun minus(days: IntDays) = plus(-days)

  operator fun minus(days: LongDays) = plus(-days)

  operator fun minus(hours: IntHours) = plus(-hours)

  operator fun minus(hours: LongHours) = plus(-hours)

  operator fun minus(minutes: IntMinutes) = plus(-minutes)

  operator fun minus(minutes: LongMinutes) = plus(-minutes)

  operator fun minus(seconds: IntSeconds) = plus(-seconds)

  operator fun minus(seconds: LongSeconds) = plus(-seconds)

  operator fun minus(milliseconds: IntMilliseconds) = plus(-milliseconds)

  operator fun minus(milliseconds: LongMilliseconds) = plus(-milliseconds)

  operator fun minus(microseconds: IntMicroseconds) = plus(-microseconds)

  operator fun minus(microseconds: LongMicroseconds) = plus(-microseconds)

  operator fun minus(nanoseconds: IntNanoseconds) = plus(-nanoseconds)

  operator fun minus(nanoseconds: LongNanoseconds) = plus(-nanoseconds)

  operator fun times(scalar: Int) = LongMilliseconds(this.value * scalar)

  operator fun times(scalar: Long) = LongMilliseconds(this.value * scalar)

  operator fun div(scalar: Int) = LongMilliseconds(this.value / scalar)

  operator fun div(scalar: Long) = LongMilliseconds(this.value / scalar)

  operator fun rem(scalar: Int) = LongMilliseconds(this.value % scalar)

  operator fun rem(scalar: Long) = LongMilliseconds(this.value % scalar)

  inline fun <T> toComponents(action: (
    days: LongDays,
    hours: IntHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds
  ) -> T): T {
    val days = this.inWholeDays
    val hours = (this - days).toInt().inWholeHours
    val minutes = (this - days - hours).toInt().inWholeMinutes
    val seconds = (this - days - hours - minutes).toInt().inWholeSeconds
    val milliseconds = (this - days - hours - minutes - seconds).toInt()
    return action(days, hours, minutes, seconds, milliseconds)
  }

  inline fun <T> toComponents(action: (
    hours: LongHours,
    minutes: IntMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds
  ) -> T): T {
    val hours = this.inWholeHours
    val minutes = (this - hours).toInt().inWholeMinutes
    val seconds = (this - hours - minutes).toInt().inWholeSeconds
    val milliseconds = (this - hours - minutes - seconds).toInt()
    return action(hours, minutes, seconds, milliseconds)
  }

  inline fun <T> toComponents(action: (
    minutes: LongMinutes,
    seconds: IntSeconds,
    milliseconds: IntMilliseconds
  ) -> T): T {
    val minutes = this.inWholeMinutes
    val seconds = (this - minutes).toInt().inWholeSeconds
    val milliseconds = (this - minutes - seconds).toInt()
    return action(minutes, seconds, milliseconds)
  }

  inline fun <T> toComponents(action: (seconds: LongSeconds, milliseconds: IntMilliseconds) -> T):
      T {
    val seconds = this.inWholeSeconds
    val milliseconds = (this - seconds).toInt()
    return action(seconds, milliseconds)
  }

  fun toInt() = IntMilliseconds(this.value.toInt())

  fun toIntExact() = IntMilliseconds(this.value.toIntExact())

  companion object {
    val MIN: LongMilliseconds = LongMilliseconds(Long.MIN_VALUE)

    val MAX: LongMilliseconds = LongMilliseconds(Long.MAX_VALUE)
  }
}

val Int.milliseconds: IntMilliseconds
  get() = IntMilliseconds(this)

val Long.milliseconds: LongMilliseconds
  get() = LongMilliseconds(this)
